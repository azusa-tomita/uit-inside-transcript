@Guest 00:04
こんにちは、UITのフォーディです。ユーザーインターフェースとテクノロジーアイス開発者のためのウィークリーポッド、キャストUIT INSIDE。今週も始めていきたいと思います。
@Guest 00:15
今週はですね。西山さんとえ、井上さんのニュースチームの開発者の2人をお呼びしてですね。月に1度行われているニュース会ということで、今回はイギリスイントのえーとの付き合い方みたいなところについて話していただこうと
@Guest 00:28
思っております。お2人とも、本日はよろしくお願いいたします、
@Guest 00:33
よろしくお願いします
@Guest 00:34
よろしくお願いします。
@Guest 00:43
さてということで、イエスリントに関する話題というところです。けど、イエスリントっていうと、割と色々話題があるのかなと思うんですけど、今回はどういったことについて話していただける感じでしょうか。
@Guest 00:55
はい、今回は、えっと、newsのesrentのdsableの
@Guest 01:00
えっと、種類だったり、数みたいなのを紹介しようかなと思っています。ディセーブルっていうと、ちょっと悪い印象なんですけど、
@Guest 01:09
えっと、newsには結構デセーブルがありまして、その理由が、あの、最近、
@Guest 01:16
イエスリントのルールの方を変更したっていうのが
@Guest 01:20
あります。その変更が、えっと、UIT全体で推奨のコピグみたいなのがありまして、そちらにえ統一する形で、ニュースも取り入れたために、ルールに違反する箇所が多くあって、出たんで、え。そこに関して、ディセーブルをえ付けているっていう
@Guest 01:35
ような形になってます。なんで、イスリートのdsbの数だったり、種類を見ると、えっと、今までニュースがどういう行動をし、あの書いてきたかとか、あの、どういう違反をしてるのかとか、
@Guest 01:46
まど、あの、そういうのがわかるかなっていうところで、今回紹介したいなと思っていう感じです。
@Guest 01:54
おお、なかなか楽しみですね。それはじゃ、歴史との付き合い方みたいなところと、まあ、新しい概念にどうやって適合するかっていうところがま
@Guest 02:03
聞いていける感じですかね。今回
@Guest 02:05
はい、そんな感じで
@Guest 02:07
あ、ちょっとぜひぜひお聞かせいただければと思います。じゃあ、まずえ早速なんですけど、
@Guest 02:16
今ですね。LINEnewsで、どんな感じでesリントを利用してるかとかっていうのもえ、なかなか。私もニュースに全然関わってなくて、知らないんで、なんかえと最新の状況を教えてもらってもいいですかね。はい、
@Guest 02:27
えっと、LINEnesでは、えっと、先ほど言った通り、推奨のルール使ってるんですけど、元々esリントとえーノは導入はしてまして、
@Guest 02:36
えっと、一般的な方法で、えっと、esリントを導入したり、プリティアの方もえ導入してます。でえ、リンターはciの方で定期的に実行してて、
@Guest 02:47
ブランチの運用もあのり、ciが通ったらっていうところなんでえ。必ずリントが通るような形になってるっていうのが、あの運用方法と同じ感じです。
@Guest 02:59
で、後はあのciだとやっぱり
@Guest 03:01
遅くなっちゃうというか、ciでおあのリントのエラーを切ったところでは、結構試合の実行速度で、あのリント直すまでの時間がかかっちゃうんで、あのハスキーでコミット
@Guest 03:12
するたびにし、あのリントをかけてて、そこで落ちた時には、あのすぐにあの修正できるような形で入れてたりします。
@Guest 03:22
じゃあ、基本的にあれですね、試合でもらうからでも、
@Guest 03:26
必ず実行されるんで、まあのリントが通ってないようなことですが、マージされることがなければ、フルリクエストに出てくることも、まあ、ほぼほぼないっていう風な
@Guest 03:35
そうですね、状態
@Guest 03:38
でここまではまあ結構一般的かなと思うんですけど。はい、UITとかニュースならでは。で言うならば、先ほど上げたあの
@Guest 03:46
会社全体の共通のルールみたいなのがありまして、
@Guest 03:50
それがはい、えっと、それを取り入れてるっていう形ですね。で、それもtsとかdsとかビューとかリアクトっていうくくりで、あの選択できるような形になってるんで、
@Guest 04:00
えっと、ニュースだと、ビーとかリアクトって別々にあったりするんですけど、そこら辺も結構柔軟に対応できて、結構容易に
@Guest 04:09
利用できるものでもあるんで、新規プロジェクトでも使いやすいものっていうので、そこも使ってたりします。
@Guest 04:16
あ、メジャー結構基本的には、共通の水晶のパッケージを、まあ、ニュースでも使うようにしているっていう。
@Guest 04:23
そうですね、最近でも入れたんで、最近結構最近では
@Guest 04:29
元々はニュースのなんていうんですか。独自のルールでやってきてたんですけど、あそこやっぱあのか。その後に会社全体として共通のルールができたんで、そこに乗っ取ろうっていう形で、最近取り組んでいる。
@Guest 04:44
もしかしたら、この後教えてくれるかもしれないですけど、結構あれですか。後から適用するのは、大変だったりしましたか。
@Guest 04:50
そうですね、1番大変なのは多分そこですね、今回のてるんだ理由でもあるんで、
@Guest 04:56
あ、はいはい
@Guest 04:57
はい、やっぱり後から追加するっていうのが1番大変で、むしろ新規で入れるときは楽なんですけど、必ず入れるってことは、やっぱ徹底した方がいいかと思います。うん、うん、
@Guest 05:07
うん、うん、うん。確かに。確かにルールが変わると、ドラスティックな変更にそうなっちゃいますからね。
@Guest 05:12
推奨のルールは、あのかなりえっと、いろんな議論があって、しっかりとしたルールは決まってるので、
@Guest 05:20
なんかそれをもうそのまま使って、自分たちで1個1個のルールを面でしなくていいっていうのはすごい。えっと、楽だし、結構信頼できるので、
@Guest 05:29
その推奨ルールは使えるっていうのはすごいいいですね、
@Guest 05:33
確かにかつあれですもんね。あの、共通ルールの方は、あの前にいて、インサイドでも紹介したペイブックの方で、
@Guest 05:41
あの共通ルール以外のことをやる時は、こういう風にやるといいよって、ガイドラインもある程度定められてるんで、なんか、カスタマイズも最悪しやすいっていうのもあるんで、
@Guest 05:52
変ではありそうですね。そうですね、
@Guest 05:54
あとは、ニュースであの固有なのは、マックスワーニングを指定してるっていうのが、ちょっと他のプロジェクトじゃないかなって
@Guest 06:03
あります。この運用の仕方が、あの、ちょっと特殊でミステ。あの先程もあげた通り、あの
@Guest 06:11
元々イントを通してない時期もプロタクト初期にはありまして、プリティア自体も後から入ったみたいな経緯が
@Guest 06:21
で。えっと、今ってesリントとプリティアって別々に設定して、別々にリントかけるっていうのが一般的独立してると思うんですけど。
@Guest 06:31
えっと、イスだとブリティアをかけなきゃいけない箇所もすごい多くて、
@Guest 06:36
で、そこを今はesリントのプラグインとして、プリティアを入れて、
@Guest 06:42
プリティアに。えっと、ワーニングとして、え、e3のワーニングとして設定してるっていう構成になってるんですね。ていうのも、
@Guest 06:50
プリティアがあの、今かけられないんで、プリティア自身になんてすかね。エラーを消すような仕組みがないんで、
@Guest 06:59
イエスリントに乗っかって、ワーニングで指定しているっていう感じになってます。そうすると、マックスワーニングっていうのが、その
@Guest 07:07
ワーニングの数を最大指定できるんで、今、あのニュースのコードに残っているプリティアをかけなきゃいけない箇所を、一旦、その
@Guest 07:17
ワーニングの数に指定することで、これ以上プリティアの数を増やさないような運用をルールにしていて、マックスワーニングを指定してるっていうような
@Guest 07:27
ああ、やってますいい
@Guest 07:29
そうですね、マックスワニング本当は完全一致が嬉しいんですけど、
@Guest 07:35
ま、今以上には悪くならないっていう手で、マックスワーニングを指定していて、イセルはに関しては全て理性にしてるんでま。ワーニングもエラーもない状態で
@Guest 07:44
追加されれば、ま、エアラルで落ちる
@Guest 07:47
ていう感じ。ああ、結構この辺りはあれですね。あとから色々追加していった故の工夫みたいなのが
@Guest 07:54
見て。そうですね、そんな感じで、今運用している形になってます。
@Guest 08:01
あれですよね、あの、既存コードを触って、なんかそのファイルがプリティアかけた場合は、マックスワニングが減るので、
@Guest 08:10
マックスワーニングの数も減らして更新していくみたいな形で悪くはならなくて、どんどん良くなっていく方向にだけなるようにしてるそうです。ですよね、
@Guest 08:19
だから、そこの運用はしっかりしないとま、ちょっと問題があったりもしますが、今より悪くらないならないっていうところが結構
@Guest 08:29
重要なとこかなと思ってます。あとは、推奨ルールのほかに、ちょっとしたルールをはい、入れてたりしますよね。西山さん
@Guest 08:39
あ、そうですね、あの、まだjs環境が残ってる。えっと、行動に対しては、えっと、esイントプラグインインポートっていう
@Guest 08:49
の入れていて、えっとまtsであれば、例えばインポートのえっと、なんかディレクトに移して、インポートパス
@Guest 08:59
直し忘れてたとかって、コンパイルエラーを切ると思うんですけど、レースだと、なんかそういう時とか、スポートされてないやつをインポートしちゃってるとかの時に、
@Guest 09:10
えっと、気づけなかったりするので。えっと、より安全にベースでも、リラクタリングとかできるように。
@Guest 09:15
えっと、インスリントプラグインポートっていうパッケージを追加で入れたりしています。
@Guest 09:21
そうですね、あのジェストps結構今混在してる状況ではあるんで、そういうところのケアもちょくちょく入れてたりする状況ですね。
@Guest 09:30
ああ、そうなんですね、
@Guest 09:33
大体運用についてはこんな感じ感じ
@Guest 09:38
結構あれですねまあ、あの、今の運用ルール自体は一般的なものかなと思うんですけど、元々esリントが入っていなかったところに、まあ入れていくっていうところから入って、プリッチャーも入れてね、リントルも変えてっていうので、
@Guest 09:52
変化にこう追従できるような作りになってるって感じですね。全体として
@Guest 09:59
あれですかね。あの、今回の本題でもあるイエステにセーブルは、このあたりの大きな変更によって生まれていった。
@Guest 10:09
で、はい、
@Guest 10:10
じゃあ、ちょっと次イエスイントセーブルについていよいよ。話を聞いていこうかなと思います。
@Guest 10:18
ではですね、えっと、ちょっとここまでと、今、会社の推奨ルールの方に載せていった話とか、色々聞いていけたかなと思うんですけど、多分その中で結構今回の主眼であるesイントdsブってのが生まれてきたのかなと思うんですけど、
@Guest 10:31
なんか結構聞いてる限りは多そうな変更が多そうなリセーブルも多そうな状態かなと思うんですけど、
@Guest 10:38
なんか、具体的に結構で、ニュースのルールから推奨ルールに変わるにあたって、こういうところのリントの違いがあったみたいなで、リセブにせざるを得なかったっていうのって、どういうところが多かったんですかね。
@Guest 10:50
そうですね、えっと、jsのリントとか、dsのリントみたいなのは、ある程度元々入ってたんですけど、リアクトとかビに関するルールは結構入れてなくて、
@Guest 11:03
そういったところが結構
@Guest 11:05
あの一気に増えたなっていうのがありますね。特に、リアクトとアのコンポーネントはもものすごい数あるんで、あのあ、それに関する。
@Guest 11:14
あの、例えば、リアクトプロップタイプっていうプロップタイプで指定しなきゃいけないみたいなところ
@Guest 11:20
とかは、ものすごい数コンポネットがあったんで、それに付随して一気に増えて、あの1番エリートで引っかけのディセーブルが多い箇所
@Guest 11:29
ではあります。
@Guest 11:31
おお、なるほど、なるほど、
@Guest 11:33
理もそれに付随して結構色々ありますね。
@Guest 11:37
じゃ、結構あれなんですよね、普通のまいわゆる、ただのjsのコードみたいなところ、jtsのコードっていうところだと、まあそこまで
@Guest 11:45
膨大なってわけでもなかったが、まあ、リアクトやビューといった、そのフレームマーク専用のルールっていうところが、かなり問題としては、多く出てきたっていう感じ
@Guest 11:54
ですかね。そうですね、結構そこら辺もルール、僕らニュースでは、あのルール決める時に
@Guest 12:02
結構相談して決めるっていうとこあるんで、あの推奨で、はい、ガチっと決めてくれてるってのはすごい嬉しいですね。
@Guest 12:09
ああ、なるほど、嬉しい反面変かも。
@Guest 12:13
そうですね、ますね、はい、
@Guest 12:17
じゃあこのままちょっとぬるっと2番に行こうと思うんですけど、え、なんか、今、あの
@Guest 12:23
リアクトのプロップタイプとかの話がすごいエラーもあるって話もさらっとしてもらったかなと思うんですけど、なんか具体的に今、リセーブルの数が多い。
@Guest 12:33
リントエラーとかって、リントルールとかって、どういったものがあったりするんですかね。
@Guest 12:39
そうですね、先ほどのリアクトの話とかも
@Guest 12:43
ありますし、あとは、リントかけてない時期もやっぱりあったんで、ボンミスのあ、あのリントエラーみたいのも結構ありますね。あの、オートフィックスで直せるような、
@Guest 12:55
プリフェアコンストとかま、レットで書いちゃってたケースとか、あの、はいはい、テンプレートリテラルで書いてないケース、プリフェアテンプレートとか
@Guest 13:06
そういうのが多いですね。
@Guest 13:09
ああ、なるほど、クレーマーのものが、まあ、1番リアクトのものが多かったとはいえま。結構そういったjs的な部分もま歴史故に残ってる部分もあるって感じ。
@Guest 13:19
そうですね、
@Guest 13:20
ちょっとそれは、推奨環境前の時からも、ずっと残ってるものではあるんで。はい、あの、結構触らないコードはずっと残り続けるんだなっていうのも、
@Guest 13:31
やっぱ直していきたいって気持ちは強いです
@Guest 13:36
ただ、あれですかね、オートフィックができるものも多いんで、結構一気にフィックスはしちゃったって感じなんですかね。今は
@Guest 13:42
そうですね、そこは結構議論の余地があって、あの、はい、多分オートフィックで変えて大丈夫だと思うんですけど、
@Guest 13:52
一応安全に倒してて、変えてないケースもありますかね。あ
@Guest 13:56
あ、はいはいはいはい、なるほど、なるほど、そこはすごいそれはあれですか。あの、
@Guest 14:02
もしかして、これからコードフリーズの後とかにキウェイでまとめて、リグレーションしてもらうとか、予定してたりするんですかね。
@Guest 14:10
そうですね、難しい
@Guest 14:16
一応、過去に1回かなり大量にオートフィックスしたことがあったんですけど、
@Guest 14:24
その時は、イエリント側のオートフィックのバグを踏んで、あ、あ、えっと、バグるっていうのが実。はい、1件だけなんですけど、あったんで、
@Guest 14:33
なんで結構オートフィックほぼほぼ大丈夫だろうと思いつつもちょっとえっと怖いっていうのがあります。はいはいはいはい、なるほど、なるほど、
@Guest 14:43
なんで割と触らないコードはずっとそのまま
@Guest 14:47
じゃあ、触る時に治るっていう
@Guest 14:50
感じなんですね。なるほど、なま確かに安全に倒すならそうなっていきますし、ニュースほどの規模になってくると、やっぱり
@Guest 14:58
何か問題があったときの影響も多いんで、なんかすごい1番いい安だな選択なしますね。
@Guest 15:05
ちなみに、この辺りの特に多いルールって、具体的に数字で言うと、どれぐらいのエラー量があるんですかね。
@Guest 15:13
そうですね、1番多い先ほど上げたプロックタイプとかは、991。
@Guest 15:23
なるほどね。逆に
@Guest 15:24
言うと、あのディセイブルするのも大変なんですよね。実は
@Guest 15:29
ああ、はいはいはい、
@Guest 15:31
あの1箇所1箇所追加していくの大変で。で、他の
@Guest 15:35
あの僕ちょっとぐちょにやっちゃってたんですけど、他のメンバーがなんか自動でそのディセイブルの箇所を
@Guest 15:44
コメントしてくれるみたいなのがあって、ちょっと名前は忘れちゃったんですけど、
@Guest 15:50
それを入れると、そのディセーブルの箇所と、あと、これを修正する人は、このディセーブルを直してください。みたいなコメントも一緒に入れて、
@Guest 16:00
イセーブルを入れてくれるみたいなツール、cliのコマンドがツールがありました。おお、
@Guest 16:07
なるほど、あ、ちょっとそれもしよかったら、後で調べて教えてもらってもいいですか。ショートにののけておこうと、はい、
@Guest 16:14
わかりました。
@Guest 16:17
なんで、皆さんはぜひぜひそのとからアクセスして、なんかそういうのに困っていたら、強いただければと思います。いや、でも、それにしても991件は多いですね。
@Guest 16:26
悲しそうですね、なんでこんなお多いんですかね、
@Guest 16:32
ちなみに、2位になると由来なんですか。
@Guest 16:35
2はでも、248で、プリファーコンストなんで、コンストに変えるみたいな感じです。
@Guest 16:43
じゃ、結構だんだんこうあれですね、1個のリアクトのプロックタイプスがすごい多いだけで、あとはまあ
@Guest 16:51
多いけど、ぐらいの量には収まっていって、
@Guest 16:54
簡単そうですね。そうですね、
@Guest 16:56
この辺はままだ言うて、そんな直すの大変じゃない箇所ではあるんで。
@Guest 17:01
そうですね。そうですね、愚直にできそうなところではあるんでは。
@Guest 17:08
あとはプリフはテンプレート、リテプレート、リティアルルとかあるんですけど、ここまではあの、結構ぐちょきに合わせるものなんですけど。うん、その次に多い
@Guest 17:17
リアクトのノーストリングレフズがちょっと1番厄介。ああ、思ってます。
@Guest 17:23
確かに、トムストリングスは、結構直すの大変なルールなと手間取りそうですね。
@Guest 17:29
そうなんですよね、これって、あのコンポーネントのあの親の方のコンポーネントが、このストリングレーフして、この方を使ってると、
@Guest 17:39
影響範囲がすごい大きいんですよね。ここを修正する時、はいはいはいはい、それでちょっと直せないケースがすごいあって、
@Guest 17:47
これ直したくて。しかも、リアクトの非水晶なんで、他のなんていうんですかね。プリファーとかじゃなくて、もうほんとに直すべきものかな。そうね、
@Guest 17:56
結構悩みのところの問題で、確かに
@Guest 18:01
確かに治したいルールとなんか病で治せるし、別に直さなくてもいいみたいな。ルールはちもあるんで、治したいとかは直していきたいですよね。そうですね、
@Guest 18:13
それで言うと、あの特に結構数で言うと多いやつだけど、あの、そんなにこう本質的じゃないエラーもあるのかなと思っていて、
@Guest 18:23
その中で言うと数は多くはない、もしくはそこそこの量だけど、特に直したい。イエスリンとビセブとかって、なんかこの中でどういうものになってくるんですかね。
@Guest 18:33
今のノーストリングレフスもそうだと思うんですけど、
@Guest 18:37
個人的にはあのeqeqeq
@Guest 18:41
あ、あのイコーイコールみ、2つを3つにしてくれってやつですよね。
@Guest 18:45
そうですね、これ、要は今まで暗黙的な型変換を使ってるような。あの企画になってたと思うんですけど、
@Guest 18:55
なんか、その辺りはちゃんとeqeqでかっちりとしたいな。
@Guest 19:03
ただ、ここって何も考えずにイコール1個足しちゃうと、振る舞いが変わっちゃうことあるので。
@Guest 19:09
いや、そうなんですよね、これ結構なすの怖いですよね、正直
@Guest 19:14
そうですね、直すのかわいいですけど、直し
@Guest 19:19
そうなおなすの怖いけど、直したいめっちゃありますや、特にいきいきいきで、なんかこう
@Guest 19:27
なんでしょう。あの、アンディファインドとかと比較されてたりする時の比付き、ちょっとありますよね。
@Guest 19:34
なんか、トゥルーフォールスで表現できるものがいいんですけど、こう曖昧なデータとかだと、ちょっと怖いなっていうのは確かにありますね。
@Guest 19:44
なんか、他に特に直したいのありますか。井上さんとか
@Guest 19:48
そうですね、エクスプリスペニーは、あの、結構嫌だなっていう縁があるのがちょっとなんて言うんですかね。蔓延するじゃないですか、1か所あるとみ、これははいはいはいちゃうっていうのがあるんで、
@Guest 20:01
あの、ほんとはもうディセイブしないでほしいっていうのがすごいあるんですけど。
@Guest 20:08
うん、そうですね、
@Guest 20:11
こことかは確かに今残っちゃってるんで、ここ残ってんならいいんじゃね。みたいなノリで多分入っちゃってると思うんですけど、
@Guest 20:19
確かに確かになくなってほしいですね、ただ、ちょっとテストとかでと、テストかとあの、モック化するじゃないですか。はい、そういうケースで無理やりモックにするときに
@Guest 20:31
か、なんとかしなきゃいけないとかいうケースはちょっと議論の余地があって、
@Guest 20:36
ああ、確かに
@Guest 20:38
直せないかもしれないし。っていうのはあるんですけど、できるだけなくしていきたいなっていう気持ちは強いです。
@Guest 20:46
今エは6件あるんですねそうですね、6件だったらなんか倒せないそう
@Guest 20:54
6件なら、全然頑張ったらいけそうな気はしますね。
@Guest 20:59
いや、この辺は倒していけるといいですね。なんか、こうめんどくさいけど、てか、ややこしいけど、数は多くないところは、
@Guest 21:07
できるだけ倒して、割れ窓を減らしていきたいところではありますね。そうですね、
@Guest 21:12
そうですね、
@Guest 21:14
あの、逆に結構数も多いけど、そもそもこのルールいらないんじゃないかな、と思うようなものとかはあったりします。
@Guest 21:21
そうですね、あの、そんなにあのなんですかね、いらないんじゃないかとまでは言わないんですけど、特にあの不便だなって思うのが、
@Guest 21:30
あのタイプスクリプトの関数の型をつけるやつですかね。
@Guest 21:36
ああ、はいはいはい、あの推論じゃなくて、明示的にか
@Guest 21:40
まそうです。そうですね、それってどどどう思いますか。皆さん、あの、僕は結構個人のプロジェクトとかだったら、
@Guest 21:49
ま早さ重視で抜いちゃったりするんですけど、LINEコープの水晶のルールには、確かあった気がしてて、
@Guest 21:57
あむずいですね。なんか、推論が
@Guest 22:02
ちゃんと働くところは推論してほしいんですけど、なんかこう
@Guest 22:06
推論機に寄せたい気持ちは、まあ、それなりにありつつも全部が推論になっていたら、結局こう安全性が担保されきらないんで、あの、
@Guest 22:15
一定のLINEをちゃんと
@Guest 22:18
こう方をメージ的に書いているのであれば、省略してもいいみたいな感じなんで。ただ、その一定のラインの担保っていうのがま。組織的に仕事を
@Guest 22:26
するときには、目線合わせが難しいと思うので、なんか、会社の推奨ルールとして置くのであれば、運んでいいのかなっていう感じがしますよね。
@Guest 22:37
なるほどです
@Guest 22:39
まあ、なんかそのプロジェクトごとの最良でオフにするとかは全然ありかなと思うルールではありますね。一方で、
@Guest 22:48
それこそ個人開発とかだったら、自分の中の基準があると思うんで、なんか別にオフにしてもいいかなと思ったりします。
@Guest 22:57
西山さんどうですか。
@Guest 22:59
そうですね、なんかあの、もちろんなんか、関数の入力と出力の方を明治的に書いとく方が
@Guest 23:08
いいんだろうなっていう気持ちもあり、つつ、たまにめんどくさい時はあるんで
@Guest 23:14
わかりますね。あとは、まあ明治的に書いた時に、
@Guest 23:19
この関数のその帰りの方微妙じゃねってなることあると思う。ああ、
@Guest 23:27
この方で返さない方がいいよねっていう、あのユニオンタイプにしない方がいいよね。みたいなあるかもしれんで、なんかそういう意味では書いて、
@Guest 23:35
その時にほんとにこの関数のインターフェースはこれでいいのかっていうのを考える機会にはなるのかなとはあ
@Guest 23:41
ああ。確かにそういう見方もますね。いや、なんか難しいルールであることがわかりましたね、
@Guest 23:49
一概にこう決めるのが難しい
@Guest 23:52
そうですね、
@Guest 23:54
なんか、そのその他で言うとあったりします
@Guest 23:57
とは、ビューのマルチワード、コンポーネントネームズっていうプールが、
@Guest 24:03
ああ
@Guest 24:04
はいはい、ありましてありますか。これも結構元々コードに関しては直しづらいというか、
@Guest 24:13
はい、あのは、はい、名前変えるものになっちゃうんで、コンポンメント名変えなきゃいけなくなるんで、そこまでして直す価値はあるのかってところは、結構
@Guest 24:23
新規に関しては、まあ、ちょっと制限あるかな。程度なんですけど、元々のコードに関しては、これは直さなくてもいいかな、みたいにはなっちゃいそうなルールですね。
@Guest 24:33
ああ、確かに新規は守りたいですけど、既存は悩ましいです。
@Guest 24:38
なかでも、あの明らかにhtmlタグと名前がかぶってるやつはなしたいですけどね、あのボタンド、そういうファイルがそうですね。
@Guest 24:49
ただ、そういうものを除けば、確かにこうわざわざ直すもなってなるようなルールでもある気はしますね。
@Guest 24:58
石山さん的にはどうですか。
@Guest 25:00
そうですね、ガイドラインにはこういうのも書いてあったもん。そうですね、
@Guest 25:09
やっぱりそのeエリントで、その人間の努力じゃなくて、ちゃんと機械的に教えてくれるっていうところで言うと、
@Guest 25:18
ま、ガイドラインに書いてあることを皆守ろうっていうことだと思うので、まあってもいいのかなっていうな、
@Guest 25:25
ま、ただ既存はやっぱめんどくさいですか。
@Guest 25:28
そうですね、既存のやつのそのちょっと大変。
@Guest 25:31
確かに、この辺は新規でやる時だけとかま、これ以上このルールで警告されるのが増えなくなればいい系な気はします。
@Guest 25:41
増えると良くないが、まあ、今の分は許容してもいいようなものでもあるけど、ありがとうございます。いや、結構あれですね数から見るのも面白いですし、
@Guest 25:51
直したいものから見るのも面白いですし、疑問があるから、ものから見るのも面白いですね。結構、現場の都合がんとルールから見えてくるみたいなの
@Guest 26:01
あるかもしれないですね。
@Guest 26:05
ちょっとなんか、次の町に行こうかなと思うんですけど、
@Guest 26:09
結構ですね。ここまで見て、まあ、プロップタイプスのリアのエラーが991件あったりとか、かなり膨大なエラーがあるものもあれば、結構疑問のつくもの、あるいは、えっと、5つや6つぐらいのエラーしかないけれども、どうしても直しておきたいeqqeqみたいな
@Guest 26:24
ルールについて、結構話してきたかなと思うんですけど、
@Guest 26:27
この辺てまいったリセーブルにはすると思うんですけど、将来的には直したいっていうものがほとんどかなと思っていて、なんか減らすための活動とかしていたりするんですかね。
@Guest 26:38
そうですね、あの、こういうのってやっぱりみんなの意識がなんていうんですかね。違うところっていうか、
@Guest 26:46
いろんな考えを持ってコードを書いてるま、チームメンバーが多いことによって
@Guest 26:51
ま。色んなところで、こういう細かいミスだったり、ま。こういう書き方の問題だったりっていうのが発生してると思うんで。
@Guest 26:57
えっと、みんなで共通認識を合わせるために、勉強会みたいなのをちょっとしたりも
@Guest 27:05
でま。勉強会の内容としては、あの今先ほど上げたやつで、イエスリントディセーブで起きてる箇所をまカウントして、
@Guest 27:14
えっと、王位順とか直したい順にリストアップして、それをちょっと問題形式にして、え、みんなに解いてもらって、
@Guest 27:23
えっと、今後なんて言うんですかね。そういうディセーブルに当たった時に、すぐにあの迷わず対処できるような形で
@Guest 27:30
え直していただきたいっていうところで、勉強会を開いたりしてました。
@Guest 27:36
なるほど、まあ面白いですね、それ、車に変えるのし方になってないかどうか。
@Guest 27:42
そうですね、結構実践的なクイズになっててま、そもそも間違ってる箇所をクイズにしたっていう感じなんで、
@Guest 27:48
あのはいは、そのままニュースのコードみたいなのを、みんなにあのあの年収問題として出して解いてもらうみたいなでま
@Guest 27:58
といった後は、みんなでどういう風に直したかっていうのを認識合わせて、で、実はあの、その勉強会の中でも
@Guest 28:06
と解きにくいというか、解けないというか、これどうするの。っていうのをちょっとおり混ぜてりして、正解がないっていう感じなんですけど、
@Guest 28:15
ああ、そういうのも合わせて、みんなで議論で巻き込んで話し合ったりもしました。
@Guest 28:20
意図的に、議論の余地が残るような題材を中心にやってい
@Guest 28:25
そうですね。ですか、
@Guest 28:28
ああ、いいですね、
@Guest 28:29
オートフィックスとか、簡単な問題になっちゃうんですけど、あの、ロジックから変えなきゃいけないリントのエラとかは、
@Guest 28:36
こうしたらいいんじゃないかとか。しかも、正解も1つじゃない場合もあるんで。そうですね。なんか、ビジネスロジックも踏まえて
@Guest 28:45
考えたりもしますね。例えば、なんかエラー握り潰してるところがあって、ほんとに握りつぶし、
@Guest 28:52
あのなんてすかね。そこで、リントエラーかは起きてるみたいなケースとかは、
@Guest 28:57
あの、そもそも握り潰していいんだっけみたいな、そういう議論からうん、うん、起きたりもしますね。
@Guest 29:04
確かにそこは握り潰してのする系は結構こうミスすると影響も大きいですし、
@Guest 29:13
怖いとこでもありますもん。
@Guest 29:15
そうですね、
@Guest 29:17
ちなみに、なんか直し方をなんかそこで勉強するみたいなのが、この機関の趣旨だと思うんですけど、なんか、実際オートフィックスで直せないリンとなって、
@Guest 29:26
大体テストコード書いてもあ、
@Guest 29:29
直しなってるかとか、ほんとにちゃんと今の挙動が担保されているか確認しつつやると思うんですけど、なんか、そこも今後セットで
@Guest 29:37
やってみたりとかする予定あったりしますかね。
@Guest 29:41
そうですね、それも結構
@Guest 29:44
すごい重要だなって、そもそもテストもテストじゃないですね。あの、クイズのクイズを出したか感じなんですけど、そのクイズもあ、あのテストを実は裏で書いといて、
@Guest 29:54
テストを解かせて、実そのテストを簡単なように作って、実はテスト動かないように、そのまま直しちゃうと動かないみたいなのを
@Guest 30:03
作ったり。だから。まあ、そうですね、あんまりメージ的にテストを絶対書いてから、
@Guest 30:11
dcブルをなし直してください。とまでは言ってないですけど、やっぱテストを書いて、
@Guest 30:16
えっと、元の挙動と問題なくテストが通って、さらにリセーブを直して通るみたいなのが、やっぱ1番理想ですよね、
@Guest 30:24
確かにそれが理想ですねですね、やっぱりなんかリントルール直すときって、デグれするのが1番怖いんで、
@Guest 30:32
やっぱりテストセットにはしたいところではありますよね。
@Guest 30:35
そうですね、ただ、やっぱちょっとイエリンとディセイブ消すのは、ボランティア的なところもあるんで、
@Guest 30:44
絶対テストとまではちょっと言えてない感じではあります。
@Guest 30:48
まあ、でもそのあたりはちょっと仕方ないところではあり、
@Guest 30:52
なんかこれ実際やってみての書簡とか。結構今、井上さん観点は聞けたかなと思うんですけど、えっと、今回主催、多分井上さん主催だと思うんですけど、
@Guest 31:01
あの西山さんからしたらどうでした。やってみて、
@Guest 31:04
はいはい、そうですね、僕、自己性が自己性受けたんですけど、そうですね。まんまと井上君の罠にはまって、
@Guest 31:14
僕が直したやつはテストはかけて、えっと、要は、えっと、エラー。えっと、リットの
@Guest 31:23
エラーを直した結果、振る舞いが変わってしまう直し方をしてました。で、他の人が解いた時も結構何人か、
@Guest 31:32
そもそもこれ挙動変わっちゃうよねっていう直し方をしてたりしたので、結構やっぱりえっと、オートフィックで直せないようなものは。えっと、
@Guest 31:42
なんていうか、何も考えずにリセーブルちゃえ。ならないように直しちゃうと、振る舞いが変わっちゃうので、慎重に。それこそ、アテストとかキリとか
@Guest 31:51
必ず必要だなっていうのは思いましたね。あとは、やっぱり後から
@Guest 31:58
ミントルール入れるのはま、ニュースだとちょっとしょうがない部分はあると思うんですけど、大変なので。
@Guest 32:04
ま。新規プロジェクト作る時は、もうリントルールとかは、最初にかっちりとしていた方がいいかなっていうね、
@Guest 32:10
しもいました、間違いないですね、
@Guest 32:15
確かに、オフィックで直せないっていう言葉は、直せないなりの理由があるってこと。なんで、無職にワが出ないようにするだけだと、確かにてくれるリスって
@Guest 32:24
なりますよね。そうですね、
@Guest 32:27
あ、でもいいですね、なんか、こうやってちょっとずつ勉強会で解消していくみたいなのもすごいいいですね。
@Guest 32:33
そうですね、あとは、あの、そのルールってなんで設定されてるんだろうっていうのが疑問になるのもいくつかあったので。
@Guest 32:42
ま、そういうま、えっと、まそれぞれドキュメンタリーは書いてあると思うんですけど、そういうのを見て、なんでえっと、こういうリントルールがあるんだろうっていうのをみんなで話し合ったりとかしたん。
@Guest 32:52
そういうところもよかった
@Guest 32:53
いいですね。なんか、勉強会にのきっかけで、ただルールに順守するってだけじゃなくて、その裏のい糸まで、お互いに知る機会があれってのは
@Guest 33:01
すごい良さそうですね。そうですね、
@Guest 33:07
ありがとうございます、結構いいですね、なんか、こうやって計画的にリセーブルを外していくっていうのは、
@Guest 33:14
いい取り組みですね。
@Guest 33:19
結構ここまで色々聞いてきましたけれども、あの、最後になんか結構今色々改善進めてるっていうとこだとは思うんですけど、なんか、これからこういうことやっていきたいなと思ってることとかってあったりしたら、
@Guest 33:31
きたいなと思うんですけど、まず、井上さんからお願いしてもいいですか。はい、
@Guest 33:36
えっと、話の結構冒頭にあったんですけど、マックワーニングの今運用してて、その数が
@Guest 33:44
あの最大値なんで減っていくと、その数があのなんてすかね。
@Guest 33:51
減った分だけ、さらに、プラスで上乗せできちゃうっていう問題があるんですね。ああ、警告が例えば3個あって、
@Guest 33:58
1個減ったから2個になった時に、そのマックスワーニングの数を2に指定しておかないと、3のままだと、プラス1個分よ。許容されちゃう
@Guest 34:07
っていう問題があって、で、そこを。まあ、今はちょっと何もしてないんで、あの、なんていうんですかね。
@Guest 34:15
気づいた人が、マックスワニングを今変えていくっていう運用になっちゃってるんで、たまにデビューで見ると、あれ。これインポート使ってないのに、イポット残ってないみたいなケースがあったりして、
@Guest 34:27
ま。そこだけちょっとリントがうまく動いていないケースみたいなのがあったりしましたね。だから、ちょっとそこはなんか対策を打ちたいなと思ってたりします。
@Guest 34:38
確かに、そもそも、マックスワーリングを自分たちで管理していること自体がこうよくないんじゃないか、みたいな話もなってくる気はします。自動的にそうですね、
@Guest 34:48
変わってくれると
@Guest 34:49
そうですね、完全一致とかもできたら嬉しいんですけど、まだちょっとeseというそういう機能はなさそうだったんで、
@Guest 34:59
なんか他にまマックスの数をどっかで指定して、そのなんていうんですかね。リートの
@Guest 35:09
ワーニングの数を自分たちにとって、そこで落とさす落とすとか、そういうのをちょっとした方がいいかもしれない。
@Guest 35:18
西山さんはあったりします。
@Guest 35:21
そうですね、えっとま、今回のはあの会社公式推奨ルールを
@Guest 35:28
入れてっていうところだったんですけど、えっと、ま。それ以外にニュース特有のルール、
@Guest 35:36
えっとま、プラスのプラス、アルファの部分ですね。とかが
@Guest 35:40
あるので、なんかその辺りはあの自分たちでカスタムのルール作って入れていきたいなのがあります。いいですね、
@Guest 35:50
例えば、あのnewsタブとかだと、えっと、ま、nestbの独自ebビューのえっと、
@Guest 35:57
使用上エタグを使わないっていうルールが実はありまして。はいはい
@Guest 36:02
なので、ただ、うっかりエタグを使ってしまうことがあるので、その辺りをあり、ルールとして追加して、リンクコンポネート使いましょう。みたいなのにしたいと
@Guest 36:12
ありますね。確かに、そのドメインごとの独自のルも追加していけるといいですね。
@Guest 36:18
そうですね、そうですね、結構なんか改善こうしたいっていう時に、これリントで解決できるんじゃね。みたいなのが、ちょくちょく上がるんですよね。
@Guest 36:27
はい、そういうなんて言うんすかね。リと
@Guest 36:30
を追加する元々あるリントのルールを追加するのは簡単だと思うんですけど、自分たちでルール作るってなるのがちょっと高くて、
@Guest 36:38
それを簡単に入れられるような気候みたいなのが欲しいなっていう感じです。
@Guest 36:44
確かに、イエスイントのプラグインとか、ビントルールがこうと思って、結構at触らないといけなくて、結果こう
@Guest 36:52
開発メンバーが気軽に触れるものではないっていうのは、結構よくある気がするんで、それは確かに
@Guest 36:58
なんか難しい。ハードルではありそうですけど、なんか逆に言うと、リントルールになってないルールってこう、主観的なところが大いに出てくるんで、できれば、リントルールに寄せたいっていうのはありますよね。
@Guest 37:12
なんか、LINE証券とかは、独自のイントルールつか作ってるみたいなんで、その辺も参考にできるといいそうですね。アリスです
@Guest 37:21
あれかな、確か、リアクトのあの、jsexの連打の時に、アンドアンドを使うと、値によっては1とかだったら、1がレンダリングされるみたいな問題があるんで、アンドアンド使わないようなルールとかを自分たちで開発して
@Guest 37:33
使ってる感じですね。ちなみに、マックスワーニングスについての、なんかこれ、ほんとにジャストアイデアと、なんか
@Guest 37:40
こういうのってどうなんですか。っていうぐらいなんですけど、多分これってなんか意図的に
@Guest 37:45
いや、これこれを制定する意図としては、今のコードよりえワーニングが多いコードが
@Guest 37:51
アップストリームに取り込まれないっていうのが目的かなと思うんですけど、なんか例えばさ、サークル試合のワークフローを1個設定して、プルリクが出ている時だけ、プロリクの
@Guest 38:01
周り先のブランチをチェックアウトしてきて、そっちでリント走らせて、その数を先に取得して、で、今のヘッドの
@Guest 38:09
いい。えっと、今のプロリックのベースとなる方の、えっと、お送りたい取り組みたいコードの方でも、1回リンと比較して、その
@Guest 38:17
ワ数同士で比較するとかだったら、自動的に今のコードより良くなっている、もしくは、同じっていうところに抑えられたり
@Guest 38:27
しないんですかね。ちょっとめんどくさいかもですけど、
@Guest 38:38
フィーチャーからデブリフルリク送っていてまデブの方もチェックアウトしてきて、えーで、デプス1でチェックアウトしてきて、最新のヘッドだけ取り込んで、
@Guest 38:47
あのチェックアウトの速度も最小化えさい。1番早くした上でこう両方でリントかけるとかで解決したりしないのかな
@Guest 38:57
と思ったりしました。
@Guest 38:59
そうですね、できる気が
@Guest 39:01
すごい良さそうな、はい、
@Guest 39:04
そういうのとかなんかできそうだな。
@Guest 39:05
ちょっと困りましたね、
@Guest 39:06
すいません、これ、ジャストアイデアです。
@Guest 39:08
なるほどです、ありがとうございます。
@Guest 39:10
まいいか、いやいいやいや、もうこれ採用しちゃおういいや、カットしなくていいやすいません。
@Guest 39:17
いや、でも、なんか色々できる余地がありそうで、めっちゃいいですね。
@Guest 39:22
今後ちょっともしまたえ、色々リントルールカスタムで作ってみたとかあったら、
@Guest 39:28
あの、この中でも紹介していきたいんで、ぜひぜひお金お話させてもらえればと思います。はい
@Guest 39:38
というわけで、今回はですね。井上さんと山さんのLINEnewsの開発2名にえ、LINEnewsにおける、eesretdisableとの付き合い方について話していきました。
@Guest 39:49
えー、ラインのフロントエンド組織UITでは、このようなフロントエンドに関するえ、議論や営情共有などを日々行っております。
@Guest 39:57
UIT INSIDEで、過去に紹介したエピソードの中では、社内勉強会や社内での意見交換から生まれたものも多数ありますので、今後もえ外部に向けて情報を発信していければと思っております。
@Guest 40:09
また、UITインサイトについてのご意見やご感想があれば、ハッシュタグシャープ、UIT、アンダースコアインサイトにて
@Guest 40:17
えついていただきます。とえ、スタッフの方で拾がさせていただきますので、ぜひぜひお気軽にピートしていただければと思います。
@Guest 40:25
そして、最後になりますが、え、ライン株式会社ではえ、新卒中とともにえ、メンバーを大募集しております。
@Guest 40:32
小のと、サカ部の方にあります求人のリンクからご連絡いただきますと、今だとえズムの方でえ、リモートでのカジュアル面談も可能となっておりますので、え、お気軽にご連絡いただければと思います。
@Guest 40:45
というわけで、今週はLINEnewsにおける。えー、essblの話でした、ありがとうございました、
@Guest 40:51
ありがとうございました。
