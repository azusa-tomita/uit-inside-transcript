@Guest 00:00
こんにちは
@Guest 00:02
え。今週もUIT INSIDEをやっていきましょう。はい、はい、まず初めにこのポトキャストについて説明いたします。
@Guest 00:10
このポットキャストは、ユーザーインターフェースとテクノロジーを愛するエンジニアたちが、毎週最新のフロントイングの動向について語るためのポットキャストです。
@Guest 00:20
最新のev標準の動向や開発、フレームワークの変遷、
@Guest 00:24
またまたuyやuxに関することまでえ、最新のトレンドをキャッチアップすることを目的としています。
@Guest 00:30
はい、
@Guest 00:31
このポトキャストについて、ご意見やご感想もお待ちしております。
@Guest 00:36
ハッシュタグシャープ、UIT、インサイアンダースコアインサイドシャープUIT、アンダースコアインサイドでついていただくと、
@Guest 00:43
今後のコンテンツ作成の参考にさせていただきます。で、今回はUIT所属のジェーサーである玉田と、
@Guest 00:52
あと、ポテトodは、谷さんとあと、いくたさんの3人でお送りしたいと思いますそれではよろしくお願いしますお願いします。
@Guest 01:03
でえ、今回の話題なんですけれども、はい、2週前にビス勉強会について紹介して、まあ、一応連載
@Guest 01:12
みたいな感じでやっていこうっていうことを言ったので、その第2回みたいな感じで、今回はやっていきたいと思います。一応、
@Guest 01:22
もう1回繰り返し説明になるんですけれども、キサーテックミーティングの企画として、ユスの
@Guest 01:30
内容について勉強していこうっていうえことをやっています。でま、それのこう出張版として、UITeサイズでも、その
@Guest 01:39
振り返りをやっていこうという趣旨でえ続けております。で、今回がその2回目ということですね。はい、
@Guest 01:46
でえ、今回の内容なんですけれども、えー。ビュースの変更点のうち
@Guest 01:53
えグローバルAPIの変更について、今回はえー特集していこうというものになっております。はい、
@Guest 02:00
で、もう1回振り返ますと、ビュー3のグローバルエピAPIが変更
@Guest 02:08
になるというえーものがあります。でえ、これは何かというと、まあ、ビュードット、ネクストティックとか、ビュー
@Guest 02:16
ドットブザーバブルみたいな。ビビのえートトップレベルのエアから直接入ってるえ、iがなくなって、ネームの
@Guest 02:27
エクスポーツから利用するっていう形になるというものですね。はい、
@Guest 02:32
ま、これがなぜこういう変更があったかっていうことを
@Guest 02:38
見ていきたいんですけど、も、サマリを見ると、えーと、ツリーシェーキングをえしするために、え、このAPIが変更になったという
@Guest 02:48
えいきさつがあります。なので、まずその追試金
@Guest 02:54
という、そんな名前が何を指しているのかっていうことをちょっと説明いただきたいんですけれども、じゃあ、ポトフォーディーさんちょっと説明をお願いしてもいいですか。
@Guest 03:04
そうですね、3シーキングっていうのは、まえと、いわゆるjsのバンドルファイル。え、最近だとまbjsとかリアクトjに限らず、spaとか作る時って、
@Guest 03:13
そのえ、jpスクリプトのライブラリの中身とかをたくさん読み込んで、1つのアプリケーション作ると思うんですけど、まあ、そのバンドルサイズのえ、合計値を減らすみたいな技術とあります。
@Guest 03:24
要はですね、これ、あのツリーシーキングっていうのは、まあその木を揺するって感じですけど、まあ、木を揺すると葉っぱが落ちてくるま、それによってえ、刑事全体の葉っぱが減るっていうのと同じように、え、不要なものを防いでいくような
@Guest 03:35
えものをえ、実際の木の枝に木の木に例えてえ3シエキングと呼んでます。
@Guest 03:41
具体的に何を行っているかって言うとですね。ま、今回え後ほどネームエクスーツの説明があるかなと思いますけど。えー、ジャバスクリプトのですね、インポートエクスポートのえ、処理をですね
@Guest 03:52
ウェブパックだとかのえーま、バンドルツールっていう方法でですね。性的に解析をした上でえ、読み込まれてないもの
@Guest 03:59
っていうのを、javascriptの成果物から省くっていうのをえやるための技術となっております。ま、これによってですね、最終的なファイルサイズが削減されることによって、そのクライアントま、例えばデバイス、え、スマホだとかpcだとか
@Guest 04:12
ていうのが実際にダウンロードするjsのえ、量っていうのがえ、少なくなることによって、まあ、例えばページが高速化したりだとか、実際のjs実行が早くなったりとかっていうメリットがあるような
@Guest 04:21
技術のことをツリシェイキングと呼ばれております。
@Guest 04:25
はい、そうですね、ありがとうございます。
@Guest 04:27
ただ、なんかこの辺いさんがそもそも、ツシーキングがjsより前のところから文化から来てるみたいな話をこの間してたんで、私全然その辺知らないんですけど、元々結構昔からあるやつなんですかね。
@Guest 04:40
ま、ツリーシキングの元々のアイデアでいうのは、あの、1990年代のディスプっていう言語
@Guest 04:48
で、あのまあ使ってないでま、デッドコードですね。たどり着きようのないコードがあの含まれてるのを
@Guest 04:55
払い落とすっていうところから始まって、そのあとgoogleがダートとかの技術で取り入れ始めてから、え、
@Guest 05:04
フロントエンド界隈で流行り始めたまバンドルとか、spaとかその辺りから流星が始まったので、その辺りから盛んに使われるようになった記号ですね。はいは、い
@Guest 05:15
ま元々そうですね。バンドルっていう概念が邪魔する人に
@Guest 05:19
なかったけれども、そういうバンドルっていうプロセスが増えるっていうことは、ま、そこでも性的解析するチャンスがまあそう生まれた
@Guest 05:29
わけします。確かに、その時タイミングでこう。また、性的の解析をして、歳数を減らすっていうことがそうですね。
@Guest 05:37
今までは、スクリプトタグを連続して、読み込む時に全部読み込まないといけないっていうのがあったんですけど、インポート、エクスポート、名刺的に宣言できるようになったので、使ってるか、使ってないかの判断もつくようになったっていうことですね。なるほど、はいはいはい、
@Guest 05:52
えっとはいえ、まあツシはま、そういう感じで、使ってないコードのま振り落としっていうところが、まあコンセプトなってるんですけど、も、
@Guest 06:01
はい、じゃあ、でま、その
@Guest 06:04
ツリーシーキングの。まあ、結果みたいなのを実は。ウェブバックでは見ることができまして。プラグインでバンドル、アナライザーというものがあります。
@Guest 06:15
でえ、これを使うことで、その
@Guest 06:18
出力されたjsの中で、どのライブラリがどれぐらいのサイズを占めているかっていうことを、可視化することができます。はい、でま、これを
@Guest 06:28
ぜひ皆さんもし使ってなかったら、1度使ってみてほしいんですけども、これを見るとすごい結構興味深いですよね
@Guest 06:36
例えば、まこのライブありがすごい大きいなっていうことが分かれば、
@Guest 06:41
サイズを減らす。そこから、そこをま起点として、そのどどのサイズ、どのライブラリに対して対処すべきかっていうことが分かるっていうのは、すごい高速化
@Guest 06:51
の上でも有効なところですよね。ま、特に最近だとjcがびっかくなりがちなので、ま、そういうところから、こういう見ていきたいっていうのはありますよね。はい、
@Guest 07:03
実際見てみます
@Guest 07:04
今見れます
@Guest 07:06
じゃあ、あなくそになっちゃいますけど、ポッドキャストのやつでも見てみますか。おなくそも、結局、
@Guest 07:12
bcのビルトと同じものを経営するとか、パックのビルドをやるんで、試しにビルドしてみたいと思います。これは、多分スクショを出しても怒られないと思う
@Guest 07:22
でやりましょう。いや、雑雑なんで怖いですね多分、多分モーメントがでかいと予想します。
@Guest 07:40
モーメントメントって、あれ、減らせないんですかね、ありがとうございます。
@Guest 07:46
あ、はいはい、
@Guest 07:47
東京だけ読ませたりとか。
@Guest 07:49
あと、フロントエンドしか使わないなら、djイアとか使っても
@Guest 07:55
そうですね。
@Guest 07:56
えっとね、そんなことはなかった、そんなことはなくて、djsに書き換えていて、えい
@Guest 08:03
えいが偉い偉い偉いとは偉いんですけど、問題があってあれですね。アイコン本ト自で読み込んでるんで、アイコン本トのバンドルがあ
@Guest 08:14
あ、そっか。jsにアイコンホントが
@Guest 08:20
あとで話題になると思うんですけど、あれですね。ちょっとポッドキャストのとこに入っちゃいますけど、あの、
@Guest 08:27
ビーフェザーアイコンっていうのを使ってるんですけど、ミウェザーアイコンは片手がなくて、あの、あれなんですよ。一時的な対策として、リアやしちゃってるんですよね、
@Guest 08:44
無理やり倒すかしかなくて、今リクアイアしちゃってるんで、今ョノトに多分書かれてると思いますけど、すごいデフェザーアイコンリストっていうのが、めちゃめちゃ重い
@Guest 08:53
バンドルファイブが、バンダライズができてます。
@Guest 08:58
すごいや
@Guest 08:59
みたいな、はいはいで、やばいんですね。ってgジックで60キロバイト
@Guest 09:06
ボールドなんもしてなかったら、500キロバイトぐらいあります。
@Guest 09:10
それはダメですもういい
@Guest 09:14
まあ、ジジップと60な60キロバイトなんか全然
@Guest 09:17
結構あ、あれですね、へり減りますね。そうですね、
@Guest 09:21
ジジップできそうな行動が多いということなきはしますけど、という感じですね。
@Guest 09:27
冬のところ、このスクショ多分映るんですよね。
@Guest 09:30
そうです、冬のところ見てもらうと、ビューディストってやつが結構大きいんですけど、うん、これがグローバルAPIがどうやっても省けなく、あ
@Guest 09:39
たくっついた。はいはいはいはい、
@Guest 09:41
12点xkで、どうしても小さくできなかった部分ですね。うん、
@Guest 09:47
確かにこうやって見ると、割とビランタイムが
@Guest 09:52
そうですね。スタサイズ221キロバイトですね、うんうん、結構大きいですね、ジジップで22キロバイトあるんで、
@Guest 10:02
これがそもそも軽くなる上にツシェキング入るって感じで。
@Guest 10:07
そうすね、素晴らしい。
@Guest 10:10
さっき、あのえ、セザーのえことについて話していたと思うんですけども、じゃあ、ちょっとリクワイヤードでインポートするのがダメな理由っていうところをもうちょっと詳しく説明いただきたいんですけど、
@Guest 10:23
来ますね。
@Guest 10:24
あ、私でいいはいはい、あ、そうですね、まあ、皆さんも多分ご存じだと思うんですけど、ま、一応おさい的に話すと、
@Guest 10:32
そもそもjavascriptま、ノードジェの環境かで、えー、モジュールをインポとする。えー時って、コモンジェイスモジュールとしてまそのリクワイアをしたり、え。
@Guest 10:44
あと、モジュールエクスポーツを使うようなエクスポート方法、あと、エスポーツドットウルみたいな
@Guest 10:50
エクスポート方法と、あと、普通のインポート構文、エクスポート構文を使うやつがあると思うんですけど、
@Guest 10:56
えっとで、インポートエクスポートコブを使う時だけ、ツリーシェーキングがいて、えー、リアアのエイコブを使う時は、え、ツリシェーキが効かないということが起こります。
@Guest 11:06
で、これがなんでかっていうのをちょっと説明さしてもらうとですね。え、そもそも
@Guest 11:11
えコモンジェイス、えー、コンジェースのモジュールっていうのは、え、モジュールエクスポーツの内容をある程度動的に書き換えることができるっていう特徴があります。つまりはですね、実行してみないと、何がエクスポートされてるのかよくわからないから。
@Guest 11:25
ビルトの段階では、どういうふうに動くかっていうのがわからないっていう状態になってしまいます。と、
@Guest 11:30
これだったら、勝手にあのぱっと一旦か性的解析した状態で、これスポートされてないだろうっていうので、消してしまうと、実効ジエラーになってしまう動かないとか、まあ、変数がないとかっていう問題が起きてしまうんで
@Guest 11:44
え。コモンジェースの場合は、そのリアはえーリアを使う場合は、次政権が効かないっていう問題になってしまいます。で対してインポート、エクスポート公文ていうのはですねえ、ビルトの時点でどういう風に動くかってのがもう分かっているんで、
@Guest 11:57
ビルトだとか、一旦性的解析するベルで分かっているので、え、使わないやつを削除しても、全く問題がないっていうえ、形となります。今回の場合ですね
@Guest 12:07
ビーフェザーアイコンっていうのは、多分100個か200個ぐらいアイコンが
@Guest 12:11
入ってるんで、本来なら、全体のうちの多分180個とか、それぐらいの量のアイコンをツリシェイティングできるんですけど、
@Guest 12:18
えー、タイプスクリプトを今使っている都合上、えインポート構文を使う場合は、ちゃんと片定義がある、もしくは、自分でちゃんと片定義が書かれている場合
@Guest 12:27
にしかちゃんと動かないんで、え。それの片手を全部書くのがしんどいんで、サボってリアにしてたら、エバンドルが追跡が行われなかったみたいなものですね。
@Guest 12:39
片手ファイルがあると1番なんですけど、ビューフェスアイコンスの場合は、オリジナルのフェズアイコンを
@Guest 12:45
読み込んで、その自動生成でjイスファイルを作ってるのは、ではいはいはい、そこに追従するのが結構片手として、しんどいみたいななしで、自分たちで書いていないみたいな
@Guest 12:54
状態となっております。
@Guest 12:56
そうですね、リクワイヤードをしてしまうと、とりあえず全部バンドルしないといけないっていう制約がそこで生まれてしまうんです。
@Guest 13:03
なんで、一旦読み込んでから動かせるしかないみたいな状態です。
@Guest 13:12
あんまり繋がってないかもしれないですけど、あの、インポートエクスポートの話が出たと思うんですよ。で、まそのビュー3でもそので、ビュー3でネームのエポーツに変わる
@Guest 13:25
ですけども、やっぱりなんていうんですかね。そのデフォルトエクスポートから、ネウンドエクスポートにシフトする。流れみたいなっていうのが
@Guest 13:34
あるんですかね、どっちなんでしょう、そういや、なんか僕個人的にはなんかどっちでもいいみたいな感じに。はいはいはい、なりがちなんですけれども
@Guest 13:43
どうですか。そういう、なんか、自分でこうか。コード書いていくときは、こういう時は、フォトエクスポートで、こういう時はネモエクスポートみたいなはいいますか。
@Guest 13:56
モジュール、もうほんとにそのファイル、そのスクリプトとモジュールっていう区分けの時の意味のモジュールじゃなくて、その
@Guest 14:03
エクスポートするのが、なんか、クラスとか、シングルトのオブジェクト。はいはいは
@Guest 14:09
そのまま渡してあげるし、もしくは関数を複数xポーズしてるutetファイルみたいなやつだったら、
@Guest 14:15
ファンクショナルに使いたいやつだけ使ってねっていうので、ネームのエクスポートすることが多いですね。あ
@Guest 14:21
ああ、わかりやすい。確かに、そのファンクション
@Guest 14:25
って言うと、すごいなんて言うんですかね。そのみ、ニータブルかどうかわからないけど、まあ見かけ上そういう感じがするから、そういう感じ。
@Guest 14:34
ネームのエクスポーツは、何ミュータブルなものみたいな感じの感覚っていうのは僕はわかりますね
@Guest 14:42
確かにそれ良さそうな
@Guest 14:44
気がします。うん、うん、うん。
@Guest 14:49
私はそれが強制されている場合を除き、強制されている場合っていうのは、
@Guest 14:56
ビーコンポーネントはエクスポート、ディフォルトだよね。とかはい、まあ、あと、そのそのライブラリの都合とかでえ。動く場合を除いて、基本的に全部ネームエクスポートにするかつ、インポとする側は、必ずリネームをしない
@Guest 15:08
ていうえ、コンセプトをとっています。ま、た、だ、ライブラリ合はどうしてもえ許容するようにしていて、例えばえと
@Guest 15:18
あれですね。私あんまりあのなんなんとかかんとかリゾルバーとかみたいな。なんか、そういう名前をあのショートハンドにするために、アズリルバーみたいにするのがすごい好きじゃなくて、ああま。その理由はいくつかあるんですけど、そもそもあの
@Guest 15:32
あれですね。私の場合、えーリネームのしやリファクターのしやすさみたいなのを1番に基本行動を書きたい派で、
@Guest 15:39
ネームドエクスポートをしているのも、名前が統一されてることによって、リネームに強いっていうところと、タイプスクリプトのインポート方法が統一される
@Guest 15:49
いうところと、あとvsコードタイプスクリプト環境において、名前を書いた場合に、それがそのまま
@Guest 15:54
あのエキスポインポートした上で呼び出す。保管が動くっていうのって、はいはい、
@Guest 15:59
なんでええタ的にも絶対に間違わないようになっているし、リネームした時にそのあの間違いに絶対に気づけるし、
@Guest 16:07
えっていう意味で。基本的にネームドクスポートと、ネームドでの一部のインポート。あ、あの
@Guest 16:13
azastとかもで、アスターズみたいなもん。できるだけ使わない形のインポートを推奨しています。ただ、例外は結構あって、例えばあのexpres
@Guest 16:24
周りの方で、あの、
@Guest 16:26
それはリクエストみたいな方でエクスポートされてて、これをそのまままインポートすると、めちゃめちゃ強合するんで、そういう時は、あの、あず、エクスプレスリクエストとかにするんですけど、ま、そういった場合を除いて、
@Guest 16:39
基本的にあずを使わないみたいなところを心がけているって感じ。そうですね。私、これは
@Guest 16:47
ちょっと無理がある
@Guest 16:50
っていうのはそうですね。確かにうんうんああそっかまあでも
@Guest 16:55
わたしやすさとうん、esコードビリティーみたいなとか、あの、なんていうか、性的性解析できるビリティーみたいなの、
@Guest 17:02
ウエスコードウィリティがいいですね。
@Guest 17:12
ムスコード会が開かれてしまう、
@Guest 17:16
立ったりします。
@Guest 17:18
あ、でも確かにそういうファクタリングしやすさっていうのは
@Guest 17:22
あれ。なんかこう書き捨てだと全然そんなのどうでもいいみたいななりがちですけど、大事ですね。うん、
@Guest 17:30
私がビューコンポイントの名前をパスカルケースにする理由を話したのと、完全に同じ理由ですけど、これは、後からガッテリゲームしたい時に
@Guest 17:38
抜け、盛りが起こらないようにする。特にま、jsのプロジェクトの場合は、あの分からない場合があるので、まdsだと、ある程度
@Guest 17:46
返事できるけど、っていうのもありますね。というような感じでした。
@Guest 17:51
いや、もうなんかめちゃくちゃ考えてますね、僕、割と気分
@Guest 17:56
気分
@Guest 17:58
書いちゃってる
@Guest 18:00
気分もそうですけど、結構僕ファイルを分けがちで、はいはい、全部もうなんか複数エクスポート
@Guest 18:09
なんか、エクスポートの数が増えてくると、もう僕、自然になんかファイルを分ける癖みたいなのが、あ、あ、はいはいついてしまって、
@Guest 18:17
それこそあの、なんていうんですか。そのディレクト、あの、インデックスドットジェースって、その
@Guest 18:22
わざわざインデックスって、あの、そのインポートの時に指定しなくても、はいはいはいすか、あれを活動しがちで、
@Guest 18:30
ああ、なるほどなるほど、
@Guest 18:31
なんかこうふく、あの、すごい複雑になってきたらだい。大体、その同じ名前のデクトリを作って、はいはいで、そん中にインデックストレスれるみたいなやつをやっちゃったり、これはいいのか悪いのかとか。
@Guest 18:46
エクスポートはエクスポート、アスタレスクフロムでパス名かけるやつが、はいはいはい、アベルのプラグインであるはずなので、
@Guest 18:55
ビのコアファイルとかは、なんかのディレクトロニックと、カズインデックスファイルがあって、エクスドットジェイスか。あ、はい、その並列で
@Guest 19:04
名前がついてるものがあって、そのインデックスジェースで、そのディレクトリー内の全てのやつをエクスポドし直するの。あ、
@Guest 19:12
はいはいはいはいはいはい、
@Guest 19:14
そうすると、ディレクトリ回数が減ると思います。多分、全部ディレクトリー切って、インデックスだと、なんかディレクトリ開いて、ファイルが1個しかないと。ちょ、残念ですよね。
@Guest 19:25
あの、そうですね、僕そうですね、確かにあの自分で書く時はまあ適当ですけど、ライブやり。もし、ライブやりとして提供公開するっていう場合だと、ちゃんと
@Guest 19:37
はいはい
@Guest 19:37
で。まあ、エスポートしたいっていう気持ちがある一方、あの、さっきそうおっしゃってた。そのデレクトで分ける。
@Guest 19:46
下はデフォルトスポーツでトップレベルでネームタクスポーツみたいな。そういうふたに2通りで提供するのが、個人的には親切なんじゃないかなっていうん、はったりしますね。
@Guest 19:59
結構そうですね、
@Guest 20:01
検索しづらいすさが定義元にジャンプすると、インデックスジェースに飛ばされ、インデクスジェースにアスタリスクしか書いてないということで、
@Guest 20:12
ありがちな
@Guest 20:15
まチームで統一できてればいいんじゃないですかね。
@Guest 20:21
また、あら争いが生まれてしまう
@Guest 20:26
そうですね、なんか、あんまりそう。ツリーシーキングっていう目線で言うと、ま、確かにやす。もう。多分、ウェブパックだと全部
@Guest 20:35
そこまで区別していたら、ツリーシーキングしてくれる、
@Guest 20:40
そしてくれます。
@Guest 20:41
そのオブジェクトでエクスポートをするっていう形じゃなければ、基本的に
@Guest 20:47
プロジェクトもしてくれるんじゃない。あ、そっか、多分最近か
@Guest 20:52
インのバージョンで、はいはい、インポートしたけど、使ってないよね。ってやつを区別してくれるようになって、
@Guest 20:59
弾いてくれるはずです。で、ビクは
@Guest 21:03
そのあで、ウェブファックのコンフィグのデボルトがそれになってるはずなので、基本的に何もしなくても、そのを受けられてるはずです。
@Guest 21:12
ええ、いや、なんか確かにそのツーシェーキングっていうか、そのデットコードを削除する、
@Guest 21:19
マジックがどれぐらい賢いのかっていうのは、ある程度把握した方がいいのかも。確かにしれない
@Guest 21:27
意外となんか、自分でそのあのあのすごい頑張って。あの、最適化したけど、実は勝手に最適化してくれるみたいな
@Guest 21:37
ことがあるかもあるかもしれないんですよね。
@Guest 21:43
アユズドインポーツだったかな、なんか、
@Guest 21:49
プロバイデッドエクスポーツと、ユーズドエクスポーツってやつがレフォルトで有効になってて、インポートしてるけど、使ってないねってやつを弾いてくれる。
@Guest 22:00
なので、アスタリスクで読み込んでも、実際使ってなかったら弾いてくれるはずです。
@Guest 22:05
賢い、すごいやっぱすごいですね、
@Guest 22:10
ossは強いですね、やっぱ世界中の人が作ってるから
@Guest 22:16
はいで、インポートエクスポートさえ使ってれば、基本的に明治的に名前をま読み込む、読み込まない、関わらず、ツリーシーキングしてくれるってことですね。ま、
@Guest 22:27
2次的名前でインポートするのは、多分リーダビリティとか、そのコード書いてる人側の都合で、名前ちゃんと
@Guest 22:35
明治的に書いた方が、他の人が分かりやすいよねっていう都合で選べるようになってるはずです。はい、
@Guest 22:41
そうそう、他の人が使うことをちゃんと考えないといけない、
@Guest 22:45
全部アスタリスクされると読めないっていう。
@Guest 22:50
なんでも。ツリシー権というよりは、コラボレーションのレイヤーで、その選べるっていう感じに環境が整ってるはずです。
@Guest 23:01
いや、それはなんなんてか心に刺さりますね。
@Guest 23:07
開発者体験はかなり考えてくれてると思
@Guest 23:13
というわけで、今週はまあ、インポートとエクスポートの話みたいな感じになって、え。
@Guest 23:24
グローバルエチェンジの話から、リアイアインポテクスポートのは、沿線まで
@Guest 23:31
割と広い話をえー、お送りしていきました。えーと、はい、linUITsでは、
@Guest 23:37
このようなチャバスクリフトやフロントエンドに関する話題について、日々議論が行われています。
@Guest 23:43
社内ゲットハブの異臭をベースに毎週最新の情報共有え、金曜日の勉強会で、えーと、ナレッジを持ち寄って、共有する機会が行われています。
@Guest 23:53
はいで、今回話した話題については、小納トにもリンクを貼っておきますので、え、ご興味ありましたら、ぜひアクセスしてください。
@Guest 24:02
また、このゆポットキャストについて、ご意見やご感想もお待ちしております。ハッシュタグシャープ、UIT、アンダースコアインサイド
@Guest 24:11
シャープUIT、アンダースコアインサイドでついていただけると、今後のコンテンツ作成の参考にさせていただきます。はい
@Guest 24:19
ということで、今週はえービュースのえ、pi変更からインポテクスポートの話について、え、3人で話していきました、ありがとうございました、
@Guest 24:28
ありがとうございました。
