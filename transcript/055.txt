@Guest 00:00
こんにちは、
@Guest 00:01
こんにちはこんにちは
@Guest 00:03
今週もテンサイドやっていきましょう。え、まず、初めにこのポットキャストについて説明させてください。
@Guest 00:10
このポッドキャストは、ユーザーインターフェースと、テクノロジーを愛する開発者のためのポッドキャストです。
@Guest 00:17
最新の指標準の動向や、開発フレームーの変遷は、たまたuriやuxに関する言葉で、
@Guest 00:24
え、日々フロンテの内容をキャッチアップすることを目的としております。ハッシュタグはシャープUIT、アンダースコアインサイド、
@Guest 00:33
え、エピソードに対するご意見やご感想などありました。ら、え、お気軽にえー、ツイートしていただければと思います。本日のゲストは、
@Guest 00:42
え、lineポイントクラブを開発している。えきょうさんと、けいしさんのお2人に
@Guest 00:49
タイプスクリプトへかのえ、lineポイントクラブのリニアについてお話を伺いできればと思います。え、お2人よろしくお願いいたします
@Guest 00:58
よろしくお願いしま
@Guest 00:59
お願いします。
@Guest 01:06
それではですね、早速ゲストの紹介から入っていきたいと思うんですけど、え、まずはきよさんお願いできますでしょうか。
@Guest 01:13
line株式会社、フロントエンド開発、センターUIT1室、フロントエンド開発3チームに所属している京商陽と申します。
@Guest 01:22
現在、担当しているプロジェクトは、えーと、lineポイントクラブと、えー、linelivecmsプラットフォームのフロントエンド開発です。
@Guest 01:30
いや、ちょっと紹介説明ちょっと早口になっちゃいましたが、えっと、皆さんよろしくお願いいたします
@Guest 01:35
はい、よろしくお願いいたしますお願いします。それでは続いてですねあもんさんお願いできますでしょうか。
@Guest 01:42
はい、えっと、lineグロス、テクノロジー、株式会社とUITチームに所属してる。えっと、ケシアモンと申します。
@Guest 01:49
えと、きょうさんと同じく、lineポイントクラブの方のフロントの開発を担当してますよろしくお願いします
@Guest 01:55
はい、よろしくお願いいたします。
@Guest 02:00
それでは、早速お話をお伺いしたいと思うんですけど、えっと、今日ですね。まず、初めに今回リニューアルしたlineポイントクラブについて、簡単にご紹介いただけますでしょうか。
@Guest 02:10
もちろん、ご存知でない方も、えっと、結構まあいらっしゃるとは思うので。えっと、まず、lineポイントクラブというサービスについて。えっと、まあ、簡単に説明は進めていこうと思います。
@Guest 02:21
えっと、lineポイントクラブは、2013年にlineフリーコインという名前でリリースされたまちょうどline創成期に作られた、ファミリーサービスの1つですね。
@Guest 02:31
で、その後に、えーと、2016年の4月頃ですね。えっと、lineポイントという名前でリニューアルしています。で、
@Guest 02:38
えっと、あとは今年えっと、2020年5月に、えっと、lineポイントクラブという名前で、また新たにぎニューアルされております。
@Guest 02:45
ええ
@Guest 02:46
えっと、まあ、lineポイントクラブの画面を見てない、見たことのない方も結構いらっしゃると思うんでま、画面見たい方は、えっと、お手元のlineで、
@Guest 02:54
えっと、グローバルナビの右の方にあるウォレットと呼ばれるタブをクリックして、
@Guest 02:59
えっと、lineポイントクラブっていう項目をクリックしていただけると、実際の画面見れると思うので、ぜひご確認ください。
@Guest 03:05
でま、lineポイントって、どういうサービスを提供してるかっていうと、ま、簡単に言うと、line版のポイントサービス
@Guest 03:12
サービスです。フォンタとか、えっと、tポイントとかで、えっと、ポイントサービス用のサイトあると思うんですが、あれとほぼ同じような役割のものと思っていただければと思います。
@Guest 03:21
提供してるサービスとしては、えーと、キャンペーンに参加して、lineポイントがゲットできる機能、
@Guest 03:27
あとは、えっと、自分が所持しているlineポイントを使って、様々な商品が購入できる機能、
@Guest 03:33
あとは、そのポイントの利用頻度に応じて、お得な得点が手に入るランク機能と、えっと、3つのえっと、機能を提供しております。
@Guest 03:41
ちょうどつい最近なんですが、えっと、2020年の7月13日に、えっと、大型リファクターをやって、えーと、リリースしています。なので、えっと、今回お話する話ってのは、この大型リファクターの話に
@Guest 03:54
おおということは、サービス自体のリニューアルが終わって、すぐにえー、リファクターもしていたってことで、結構忙しいスケジュールだったんじゃないですかね。
@Guest 04:03
そうですね、結構ドタバタしながらやってた感じですね。
@Guest 04:08
てことは、サービスリニューアルに追中しながらえ、リファクタも進めないといけなかったっていう状況ってことですかね。
@Guest 04:14
はい、その通りですね。なので、えっと、この5月の対応と並行しながら、今回のディファクターを行っておりま。
@Guest 04:21
いや、それはかなり大変な作業だったと思いますけど、ちょっと詳しく、これから話を聞いていければなと思います。
@Guest 04:32
それでは、いよいよ本題のえ、実際のリファクターについてえ、概要からお話しいただいてもよろしいでしょうか。
@Guest 04:39
えっと、じゃあ、ちょっと今回のえっと、ディファクターについてお話ししていきたいと思います。で、今回のこの7月にやったリファクターなんですが、
@Guest 04:47
えっとま、社内で通称ディフ対応と呼ばれている。えーと、リファクターを行っています。
@Guest 04:54
なるほど、岐阜太陽ですね、
@Guest 04:55
はい、リフ対応ですねはいまこのリフ対応一体どういう内容かっていうと、lineってwebビューで作られてるサービスたくさんあると思うんですが、
@Guest 05:04
そのサービスを構築するために、コルドバベースの社内フレームワークを使って、えーと、作っていたんですよね。今まで
@Guest 05:11
ま、それで運用されてるサービスも今も結構多かったりはするんですが、
@Guest 05:14
えっと、ちょうど2018年の6月頃に、えっと、lineフロントエンドフレイワープ、通称ディフというものがえとリリースされています。
@Guest 05:23
えっと、lineでミニアップを作るための、えっと、フレームワークですね。で、今年からちょうどま社内でもディフス買っていこうという取り組みがちょっと出てきまして
@Guest 05:32
ま。それで、えっと、いろんなサービスが。えっと、古い。えーと、コルドバーベースの社内フレイバーから、えっと、ディフに移行するってこと。
@Guest 05:39
今実施しているような状況です。なので、えと、今回のリファクターのメインテーマとしては、えー、コルドバベースの社内フレームワークをリフにバイブレーションする。作業っていうのが、えっと、今回のリファクターの大きな目的となって
@Guest 05:51
ます。
@Guest 05:51
なるほど、それに合わせて、コードベースもがっつり手を入れようってのが、今回のリファクターのえ、kだったわけですね。
@Guest 05:58
あ、当たりですね、はい、
@Guest 06:01
確かになかなか需要家から承認を得ずらい
@Guest 06:04
ま。こういったリファクターっていうのを、えま、プラットフォームの移行に合わせてやっていくっていうのは、プロダクトの寿命とかえ、伸ばす意味でも、結構いいタイミングだった感じですかね。
@Guest 06:14
そうですね、あれ、ちょうどえっとま、今回ちょっとタイプスクリップとのバイグレーションの話とかさせてもらうんですが、
@Guest 06:21
えっと、タイプスクルトのマイクレーションやりたくて、しょうがなかったんですけど、タイミングがなかなかなくて、まあ、このタイミングだと思って、えっと、今回対応させてもらっております。
@Guest 06:29
はい、なるほど、ちょうどタイプスクリプトがしかしたい欲求があるところにま舞い込んできたので、うまくがつんとできたみたいなところですね。
@Guest 06:38
今、そうすると、タイプスクリプトかっていう話がありましたけど、えっと、現状はえっと、どんなスタックで、えっと、どういう風な形に移行しようと思ったかっていうところも教えてもらってもいいですかね。
@Guest 06:50
あ、はい、えっと、ちょうどlineポイントクラブのま、今回リファクターで色々変わってはきたんですが、
@Guest 06:56
えっと、今までつかそのリファクター前に使っていたフレームワークですね。えっと、ま、大きく3つがあって、
@Guest 07:02
まずホルドバベースの社内フレームワークま、これはさっきえっと、紹介したものですね。あとは、アプリケーション自体は、えっと、ビュージェースの2.0を使って、えっと、構築しています。
@Guest 07:13
あとは、えっと、驚きなのが、えっと、ジェイクエリーが入っております。
@Guest 07:18
えっと、それはbgsと共存する形でjklが入ってるんですか。
@Guest 07:22
あ、えっとま共存というよりは、えっと、ビーjsで作って、アプリとは別にjcedだけで作られてるアプリがあるっていう、そういう状況でした。ま
@Guest 07:30
あ、あ、なるほどなるほどは、いまそれぞれページごとに違うとか。はい、そういう感じですね。
@Guest 07:35
あたりですはいはいはいで、えっと、まあ、2013年スタートってことをさっきお話させてもらったと思うんですが、まあ、
@Guest 07:42
相当できる方もいらっしゃいらっしゃると思うんですが。えっと、ま、フロントエンド側の行動、結構数年前にの技術で作られたものなんで。えっと、ぱっと見たとき
@Guest 07:52
なんだこれ古いなってなるような。えーと、コードでした。今まではいで、
@Guest 07:57
えっと、今回まデフ対応とともに、えーま、開発環境のモダン化っていうのをえ、結構注力して行ったような形
@Guest 08:04
開発環境のモダン化っていうと、えっと、どういったことを中心に行っていたんですかね。
@Guest 08:09
えっと、今回のえっと、リニューアルに含めた内容としては、まあ、さっきのリフ対応っていうのはもちろん入っているんですが、それよりも、えーと、タイプスクルトの対応っていうものをえ、結構じゅ重要視して対応しております。
@Guest 08:22
あ、えっと、これ、lineポイントでの社ラプロジェクトで入った。えっと、ux系の支度なんですが、
@Guest 08:28
えっと、体感速度向上試作って呼ばれてる。スケルトンスクリーンの実装と、画面繊維持にアニメーションで遷移する。えっと、インタラクションの実装ですね。
@Guest 08:37
ま、それが元々入ってたんですけど、ま、ちょっとlineポイント独自で作りすぎて、ごちゃごちゃしちゃってたっていうのがあったんで。
@Guest 08:45
えと、社内で公開してるnpmで、えっと、公開できるように、チャラnpmパッケージ化っていうのを行っております。
@Guest 08:51
あと、ほっとした内容なんですけど、えっと、まあ、ローカルの確認環境のリプレースっていうのを行っています。ま、これ何かっていうと、
@Guest 09:00
古い案件のえっとまjs動作を確認するために、普通であれば、ノードサーバー使って、えーと、ローカルで
@Guest 09:08
アプリケーション起動するような形が多いと思うんですが、実はえっと、lineポイントphpでそれやっていて、
@Guest 09:16
ああ、でもまあ結構古いやつだと、それこそブラウザーシンクとかもあんまり発達しなかった頃は、phpでやってる人も結構多くいいましたし、結構そういった名残りうちの車内だとよくありますよね。
@Guest 09:27
そうなんですよ、で、それをちょっとリプレイする時期ちょっとえなくて、えっと、対応できてなかったんで、
@Guest 09:33
えっと、今回phpにまェスのスクリプト読み込んで、えっと、実際に起動してspaをえっと、検証するって方法じゃなく、て、まちゃんと
@Guest 09:42
今よくあるようなノードサーバーで起動するように、えっと、対応を行っています。そこのもフルーリプレイしてますね。はい、
@Guest 09:49
なるほど、そう考えるとかなりアプリケーションコードから基盤まで手を入れてるんで、変更数もめちゃめちゃ多かった感じですかね。
@Guest 09:58
当たりですね、もう相当ま、ファイル、ヘコストも多かったんで、もう相当がっつり、今回は変え変えていきましたね。はい、
@Guest 10:05
ちなみに、もし行ってもいいならなんですけど、実際どれぐらいのファイル数の変更とか、行数の変更があったかとかって教えてもらったりとかできますかね。
@Guest 10:14
はい、えっと、まあそれやっぱ気になるところですよね。で、えっと、一応これえっと、公開しちゃいます。情報はい
@Guest 10:24
えっと、まあ、実際にどのぐらいの規模間だったかというと、えっと、まず今回のリファクターなんですが、作業期間自体はえっと4か月でした。
@Guest 10:32
えと、大体ゴールデンウィーク挟んだので、日数はちょっと4ヶ月よりもちょっと少なめで、プラステスト期間でプラス1ヶ月、大体5ヶ月ぐらいの感覚で。で、作業自体はえっと、さっきま紹介
@Guest 10:44
まされた2人ですね。えっと、ジブンターモンさんの方での2名体制で、えっと、作業を行っております。
@Guest 10:49
えっと、対応タスク数なんですが、えーと、タスク立ち上げた時点で、えっと、120件ほどありまし。
@Guest 10:55
おお、なるほど、結構立ち上げた時点ってことは、かなり積もりに積もってる状態からっすよね。そう
@Guest 11:01
そうですね、もう、ほんとになんかこの今回のディファクターやる上でどんぐらい。えっと、作業必要なんだろうって洗い出したら、結局120件超えるという状況になっちゃいましたね。
@Guest 11:12
で、えっとま、実際にえっと、この作業をする上で作ったプルリクエストの数なんですが、えーと、250件ありました。
@Guest 11:20
ま、それで、えっと、変更ファイル数に関しては、70にファイルほどえっと変更しております
@Guest 11:26
で、変更行数は4万7000件超えるぐらいのボリュームでしたね。ま、なので、えっと、ちょっと他の方の作業と比較してないんで、ま多いのか少ないのか、自分判断しきれないんですけど、ま、個人見立てだと、ちょっと大きめのデファクターだったなと思っております。はい、
@Guest 11:41
いや、でも実際そうっすね。結構新規のプロジェクトとかって作ると、まあ、フレームワークのコードとか。
@Guest 11:48
まあ、なんかヤンロックとか、パッケージソンとか、いろんなファイルが作られると思っていて、作った段階で2万とか3万行いことって結構あるかなと思うんですけど、
@Guest 11:57
今回に関しては、リニューアルっていう風な形となるので、ま、その辺りが全然ないって考えると
@Guest 12:04
なんでしょう。ちょっと言い方あれかもしれないですけど、そのかさまみたいなのができないんで、かなり多い。ボリュームの
@Guest 12:10
うん
@Guest 12:11
こコードのアップデートになるんじゃないかなと私思いますけど、どうなんでしょうかね。
@Guest 12:18
ああ、やっぱはたさんのでもその認識なんですね。なるほど、あ、ちょっと良かったです。はい、
@Guest 12:24
いや、私もかなり物量が多めで、大変だなっていう印象を受けますね。やっぱり
@Guest 12:31
そうっすねで、えっと、ま、今回ま物量多めだったんで、どんだけハードなことやってるんだろうと思われる方多いのかもしれないんですけど、
@Guest 12:40
実はあんまりそんなことなくて、現場の方もえっと、ま、今回えっと、今までって。えっと、lineポイントクラブって、自分1人体制で、えっと、フロントへと対応してたんですが、
@Guest 12:50
えっと、今回からちょうどえっと、あんさんに入ってもらって、複数に対して、まあやっとチームとして動けるようになった感じですね。はい
@Guest 12:57
で、まあそれに伴って、えっと、なるべくまストレスなしで。えっと、作業ができるように。えっと、計画結構細かく組み上げたんですね。今回
@Guest 13:06
とま、こういうやり方やれば、えっと、こういう順番でやっていけば、えっと、ストレスを感じるようなサイトエフェクトに合わずに済むだろうみたいな順番をちゃんと決めてから、
@Guest 13:15
好きなもの選んでくださいって形式にしたんですよ。
@Guest 13:17
なんで好きなことを好きなだけやって、まあ気が付いたま。ほんとに4か月たって気が付いた時に、あ、俺らめちゃくちゃコード直したじゃん、うえいみたいなノリになってたんで、
@Guest 13:27
意外に現場の方はわわあとやってた感じなんすよね。
@Guest 13:31
おお、なんかそれはかなりいいっすねえ、どうすか。あもんさん実際にノリノリでやってきたりしましたかね。
@Guest 13:39
そうですね、なんか気づいたら結構あ、結構直してるじゃんみたいな感じで達成感ありましたね。
@Guest 13:47
ああ、なるほど、結構リファクターっていうと、古いコードと向き合わないといけなくて、辛い、辛いところもある。作業かなと思うんですけど、なかなかノリノリでやってたっていうのは結構いい感じですよね。
@Guest 14:01
では、少しこっからは。えっと、テクニカルのことについてちょっと聞いていきたいなと思うんですけど、
@Guest 14:07
えっと、実際えっと、今回タイプスクリプト以降っていう1番おっきなえ作業やったかなと思うんですけど、なんかどうやってやっていたとか。まあ、どんなふうに工夫していったみたいなのをえっと聞きたいかなと思っています。
@Guest 14:18
まず、初めにですねえっと、タイプスクリプト以降、どうやってやっていったかみたいなのを、簡単に説明してもらってもいいですかね。
@Guest 14:25
はい、じゃあ、ちょっとえっと、今回対応したタイプスクリプトについて、ちょっと説明していきたいと思います。
@Guest 14:31
で、
@Guest 14:32
正直な話。今回のリファクターで、何が1番楽しかったっていうと、まタイプカト対応とテストコードの整備でしたね。正直話
@Guest 14:41
で、えっと、ま
@Guest 14:42
このリファクタ前の行動っていうのが、ちょうど。えっと、2016年末頃に、えっと、ディファクタして作成したものだったりするんで
@Guest 14:51
ま。ビューの2.0使ってるにしても、結構古い。えーと、行動だったりしたんですよね。
@Guest 14:57
で、あとはえっとまなので、タイプスクリプトでの実質はなし、あとは、テストコードの方もあまり時間なくて、全然整備できてなかったんで
@Guest 15:06
ま、それがすごいちょっと悪い状況でしたね。はいまなので、えっと、今回タイプスクリプトとテストコードっていう意味で、えっと、色々対応していった感じです。でと
@Guest 15:15
とはいえ、えっと、まさっきもお話した通り、結構これボリュームあるんですよ。今回のえっと、lineポイントのバイグレちゃって。
@Guest 15:22
で、
@Guest 15:22
大型案件で一丁一席で、えっと、マイクレーションができる規模感では正直なかったので、
@Guest 15:28
今回はえっと、中長期でタイプスクリプト化を進めるためのえっと、まず実装基盤ですねタイプスクリットをすぐに入れられるっていう実装基盤を整備して
@Guest 15:38
でプラス。えっと、まあ簡単にえっと、ts化ができる。ユキ関連のコードのts化っていうのを、えっと、
@Guest 15:45
進めていった感じに、このラジオ聞いてる方で、えっと、まあ中長期うんだ量多いんで納得だっていう方と、あれ、なぜ中長期でやるのみたいな。えっと、疑問を持ってる方って多分絶対別れるとは思うんですよね。
@Guest 15:57
で、そういった意味でちょっと説明していくと、えっと、まゼロからタイプスクリプトで実装するのと、イマスクリプトをタイプ、スクリトにバイブレーションすること。これだいぶ勝って実は違うんすよね。はい、
@Guest 16:11
マイグレーションだとと、ゼベースだとまあ、そもそもぶち当たると、導入障壁の数がつまり課題の数ですね。が、全然違うっていうのがあります。
@Guest 16:21
ま、実際に今回の対応で、えと、どういった問題があったかというと、まず、えっと、2016年度なんで、ウェブパックが2.0で、バベルがめちゃ古いやつという
@Guest 16:31
問題がありました。その状態だと、タイプスト入れられませんってことで、まず、このウェブパックやバベルのアップデートっていうのにやりました。
@Guest 16:40
あとは、えっと、さっきジェイクエリーって話もあった通りと、ジェイクエリーは何でビルドしてるかっていうと、グラウンドでビルドしておりました。なんで、グラント依存のアプリケーションで、tsを入れるために、じゃあ、グランドからどう引きは。そうか、
@Guest 16:51
そういった課題が出てきたりしますね。あとは、えっと、古い設計のものなんで。
@Guest 16:56
えっと、まあ、よくあるやつなんですけど、どんな方でも返却してしまう古い理由っていう結構ありましたね。今回、
@Guest 17:03
あれをどういうふうに作り直すかとか。あまあそもそも、えっと、ェイスファイルの数としては、500ファイル超えていたんで、このlineポイント。
@Guest 17:11
えっと、ギファクタマからはい。なので、その500ファイルどうやって作業するの。みたいなところももちろんありましたし、
@Guest 17:18
あとは、えっと、今の処理をちゃんと維持しつ、ついかに影響できないように、タイプスクリプトをえっと、導入できるかっていうのも、えっと、1個の課題としてはありました。
@Guest 17:26
なので、ちょっとおま、すごいあうたら大きめな話なんですけど、ま、そういった課題がえっと、あって、なおかつそれをファイル単位で
@Guest 17:34
見ていくと、めちゃくちゃ細かいタスクがたくさん積み上がるような形になっちゃうんで。なので、えっと、
@Guest 17:42
なんだろう。ほんとに。マイグレーションは、ゼロベースと買って、違うなっていうのを、今回はほんとに強く思いましたね。はい、ここからはま完全にちょっとこれ持論になっちゃうんですけど、
@Guest 17:51
えっと、タイプスクリプトって、結局えっと、いろんなユーザーたちがに使ってもらいたいっていう普及させたいっていうま、大きな位置が、この実際にコトリビュートしてる方々に、
@Guest 18:01
えの思いとしてあったと思うんですよ。で、それの傾向があって、今えっと、タイプスクリプトは中長期で、徐々にマイグレーションできるように
@Guest 18:10
進化したと、私個人としては考えています。まあ、他の言語だとあまりないですよね。その
@Guest 18:16
javaスクリットから、えっと、タイプスクールに移行するのが非常に簡単で、徐々にできるっていうのが、えっと、特徴してないとは思っているので、うん、うん、
@Guest 18:23
あんまないと思いますね。
@Guest 18:25
なので、えっと、まあ、他の言語のマイグレーションキャラと、もちろん簡単なんで、一気にやっちゃいなよって、やっぱなっちゃったりはもちろんするんすよ。もちろんするんすけど、
@Guest 18:35
結局、マイグレーションは、マイグレーションでま言語レベルのマイグレーションっていう扱いのものになるんで。
@Guest 18:41
まあ、えっと、業務タスクの種類としては、もうほんとにパールのアプリケーションをジャバにマイグレーションするのと、
@Guest 18:47
イマスクリップとタイプ、スクリトにバイグレッションすると、えっと、カテゴリーとしては全く一緒なんですけど、うん、うん、はい、うん、
@Guest 18:54
まあそれがあるんで。まただ、えっと、パールからジャパンにマイグレーションする場合ってま。それのために人員一気に増やして、集中開発して、短期に終わらせるみたいな。やっぱ、やり方をやると思うんですけど、
@Guest 19:05
逆にブスクの場合って、中長期のマイグレーションできる強みがあるんで、
@Guest 19:09
もうその今回はその強みを生かして、えっと、中長期計画ということで、えっと、立てさせてもらいました。ま、一応そういう流れで中長期
@Guest 19:18
いや、でも、きょうさんの持論はすごい。今のタイプスクリプトの、
@Guest 19:22
そのツールキットの特性に合っていると言いますか。結構昔とかって、タイプスクリプトを使う人だけが使ってる頃って、やっぱりま厳密さを求める。あまりあんまり
@Guest 19:33
そのま移行の場合だったら、緩くていいんじゃないか。みたいな話とかってあんまりなかったかなと思うんですけど、やっぱりそれはえっと、ユーザーベースもそうですし、まあ、その多分えっと、言語としての進化みたいなところも
@Guest 19:44
含めてまどんどんjsと共存しやすいようなふうに作られているのがま、文化としてもそうですしま。技術としても、そうなってるっていうのは、すごい特徴かなと思いまして。
@Guest 19:55
なんか、ほんとにタイプスクリプトぐらいじゃないかなって思ってるんですよね。この中、長期でバイグレーションできるように、こう並行して進められるものっていうのはま、それがあるんで。うん、
@Guest 20:04
やっぱそこの強みっていうのは、やっぱタイプスクルの1個の。えっと、ほんとに魅力であるかなと
@Guest 20:09
はい
@Guest 20:10
え、えっと、ま、こういう形で。えっと、まあ、中長期のえーと、対応ということで、えっと、今回進めさせてもらってます。
@Guest 20:17
で、
@Guest 20:18
えっと、ま、そもそもタイプスクリプトどういう目的で、あなたたちは導入してるの。っていう思ってる方もいらっしゃると思うので、ちょっとそちらのお話させてもらおうかなと
@Guest 20:26
おります。えっと、ま、フロントエンドエンジニアって、ま、たくさんいらっしゃると思うんですけど、まあ、色々な方ま、考え方持ってる方いらっしゃって。
@Guest 20:34
まあ、もちろんタイプスクープとは恩恵が強いので、積極的に入れていきましょう。という意見の方もいれば、えっと、
@Guest 20:40
理屈では、頭ではちゃんとそのメリットっていうのを理解できてるけども、心のどこかで迷いや不安を拭えないまま頑張ってる人。それと、戦ってる人ってのも、まあ、もちろんいるとは思っています。はいで、
@Guest 20:51
私自身もま、正直今回えっと、タイプスクリプトやろうぜって超言い始めてんのが、2019年の末頃から、
@Guest 20:59
あ、2020年頃からね、2019年の前半ぐらいはまだ結構迷ったんすよね。実は自分の方も
@Guest 21:06
あ、ほんとに大丈夫なのか、うん、いけるのかみたいな形ではい
@Guest 21:09
で。まあ、そんな中。えっと、2020年になって、今はもうじゃんじゃんts化やっちゃいましょう。ってことで、えっと、声あげてやってたりはするので、
@Guest 21:16
えっと、まあ、そういうふうに心変化があった人間が一体どういう目的で、タイプスクールトを導入してるかっていうのをちょっとちゃんと話していこうかなと思っております。
@Guest 21:25
はい、今回のタイプスproの導入目的なんですが、まあ、いろんな恩恵があるんで、えっと、いろんなメリットがあるだろうっていうのはもちろんあると思うんですけど、今回
@Guest 21:34
1個に絞ってます。えっと、私たちとしては、はい、えっと、ま。大きなスローガンとしては、新しいメンバーが古い技術を勉強するよりも、
@Guest 21:43
モダンな技術で、えっと、即戦力になる環境を整備すること、それを第一の目標としています。ま、これちょうどあのんさんのから教えてもらった言葉なんですけどね。
@Guest 21:53
はい、もう完全にあ、で、ただこの言葉にめちゃくちゃあれ、共感したんすよ。自分
@Guest 22:00
でこれをえっとまどんどんどんどん。えっと、考えをやっていくとま、色んなちょっと答えが出てくるんですけど、
@Guest 22:08
まず、えっと、このモダンな技術で即戦力となる環境を作って、新しい人を迎え入れましょう。っていうのは、
@Guest 22:14
新しいメンバーを迎えるための運用体制と、コード整備を行っていきましょう。ってことになります。
@Guest 22:20
で、それって何を指すのかっていうとま、チームビルビンビングだったり、もうチームメンバーのメンタルケアができる環境をちゃんと作っていきましょう。っていうことに、えっと、繋がると思いま
@Guest 22:31
で。えっと、私自身が結構そのメンタルケアってものにを頑張ろうと思っている
@Guest 22:37
ような人間なんで、すごい共感して、じゃあ、もうこれをほんとに1番の目標と抱えて、えっと、タイプスクスの導入をやっていこうっていうことで、えっと、決め
@Guest 22:44
で。えっと、チームメンバーのメンタルケアまチームのメンバーたちがちゃんとえーと、開発ができるような環境を整えるのに、1番適していたのが、もうほんとにタイプスクリプトタイプ、スクリプトの特徴としては。えっと、ソースコードはもちろん変わるんですが、それ以上に。
@Guest 22:58
えっと、チームのえっと、仕事の仕方、ワークフローがのにも影響を与えると、私自身はすごい思っています。まあ、まずえっと、今回のlineポイントの例で言うと、
@Guest 23:08
えっと、まあ、レビューの質が一気に上がりましたね。タイプ作ると、今までって結構ラフな感じで。えっと、コード確認して、オケーオッケーみたいな形になってたんですけど、
@Guest 23:18
タイプスクリップを入れることによって、
@Guest 23:20
えっと、この方でちゃんと返却するっていうのを意識した上でのえっと、形になるので、まあ、そもそもまずえっと、それを意識した上での設計、今までの古いちょっとダメな
@Guest 23:30
jsの設計を直すとか。えっと、そこらへんも。えっと、影響が入っていた実際で、
@Guest 23:36
それをやる上で、じゃあここは。えっと、今こういう仕様があるから、えっと、こういう風にやっていきましょう。とか、ここはえっと、タイプスプロの方として、えっと、正しくないと
@Guest 23:44
でえ、もっとちょっと厳格やっていきましょうか。そういった議論がすごいできたんで、えっと、デビューの質自体は上がってきまし。
@Guest 23:52
ああ、ほうほうほうということはあれなんですかね。ま、そもそもタイプスクリプトいこに移行することによってま。自然とえ、高品質に対する意識がより高くなるみたいなモチベーションもあったっていうところですかね。
@Guest 24:04
あ、そうですね、もう完全にそれを期待してのタイプスクリプト以降でしたね。今回はあとよくタイプスクリプトの特徴で出てくるのが、作用コストの削減って話が
@Guest 24:14
まよく出てくると思うんすよ。
@Guest 24:16
えっとで、自分の中の考え方としては、作業コストの作品って、結局えーと、環境を綺麗に整備して、メンタルケアができた付加価値の1つに過ぎないと、えっと、自分は考えているんで
@Guest 24:28
ま、チームをちゃんと変えたって部分がえっとなし得た時に、この作業コストの削減っていうのは、えっと、やっと表面上に現れると。なので、えっとま、今回はえっと、まあ、長期計画ってこともあるんで。えっと、作業コストの削減自体は
@Guest 24:41
調子がして、そんなに高いkpiとしては、えっと、持ってないです。作業コストは、もう最悪削減できなくてもいいなって、
@Guest 24:48
もう作業コストの削減というよりは、えーと、メンタルケアもそっちの方を重要していこうで、そのメンタルケアを上げることに、作業作業コストの削減というのは確実にできる。であ
@Guest 24:58
ていう考えのもとえっと、この目的っていうのは立てていますね。
@Guest 25:02
いや、そう言い切れるのはめちゃめちゃ正直かっこいいっすよね。
@Guest 25:07
あも、すいません、なんかもうなんか自分き取りよりみたいな感じもあるんですけど、ありがとうございます。はい、で、えっと、
@Guest 25:15
今ちょっと作業コストの削減って話したと思うんですけど、ま、削減は一応目標としては立ててないもののま、
@Guest 25:22
コストの削減はできると思ってます。一旦、自分の方で作業コストの削減によるえっと、投資コストの回収どのぐらいできるんであろうっていうのを一応計算出してたりします。
@Guest 25:32
えっと、lineポイントのlineポイントクラブに関しては、目標値として2年6か月ぐらいあれば、えーと、その
@Guest 25:39
投資したコスト分を回収できるであろうというちょっと目安を今立てています。で、えっと、まあそれの目安立てる上ですごい重要なのが、作業人数と作業頻度が
@Guest 25:49
作業人数と作業頻度が多ければ多いほど。えっと、短期で、えっと、投資コストの回収ができます。ただし、
@Guest 25:56
えっと、作業人数が1人で作業頻度もそんなにないとかであると、えっと、多分、投資コストの回収5年とか、6年とか普通にかかっちゃったりはするんで。
@Guest 26:06
なので、もしかして、導入しを検討してる方で、もう1人でやってるっていう方に関しては、
@Guest 26:13
えっと、そうですね、投資コストの回収ちょっと難しいかもしれないんですけど、
@Guest 26:17
ま、今後人を増やす計画があるんであれば、その増えた人たちのメンタルケアには確実に繋がるんで、ま。タイプスクリートの導入は超おすすめします。
@Guest 26:28
作業コストの削減が、まあ、実際まま一応こういう計算出してて、叶わなかったとしても、
@Guest 26:34
えっと、結局精神上のストレスの軽減に繋がるのであれば、まあよしと自分はしているんで、
@Guest 26:39
ま、
@Guest 26:39
簡単に言うと、そのストレスの軽減が稼働コストで変えるんですよ。稼働コストの年によって実現できるっていうのは、正直言って、めちゃくちゃ熱い話。自分としては、
@Guest 26:49
で、えっと、自分としては、今の仲間と未来の仲間を救うために、ハイプスクリプトを入れようっていうのを言っていってるので、まあ一応まあそ。
@Guest 26:59
今からちょっとタイプスクリと今悩んでるけど、入れようって思ってる方は、もうほんとに仲間と未来、もうほんとに今の仲間未来入ってくる仲間を救うために、タイプストを入れるっていうのを
@Guest 27:08
心に持つと、すごいえーと、導入しやすくなると思います。はい、
@Guest 27:14
いやなんかただ大体こういったts以降とか、リファクタリング系ってま。どうしてもビジネス側との都合とかもあるんで。まあ、理屈で何か説明したりとか、コストを返すっていう話になりがちかなと思うんですけど、
@Guest 27:26
まそこを。えっと、メンタルケア特にえっと、全体のメンタルケアとか生産性
@Guest 27:33
ま、それによる。えっと、パフォーマンスがしっかり出るようになるみたいなところを、えっと、考慮してやれるってのは、結構あんまり組織としてもないと思いますし、やっぱりそのチームとしても、そういった文化ってあんまりないと思うんで、そこはすごい。
@Guest 27:46
なんか、今の仲間と未来の仲間を救うために、えっと、やるんだっていう風に思い切れるってのは、やっぱりその今の開発チームの良さとか、
@Guest 27:56
ま、そのリーダーのリーダーシップのえっと、強さみたいなのが現れてる故なのかなと思って、すごい
@Guest 28:03
いい開発風景だなと私は感じましたね
@Guest 28:08
まあ、ちょっと変わり者なんでってのもありますけどね。はい、
@Guest 28:12
いや、でも、この話を聞いて、やっぱりそこはすごいきさんの強みですごいところだなと改めて思いましたね
@Guest 28:21
え、ここまでですね、実際にタイプスフト以降を始めるにあたって、
@Guest 28:25
まあ、どういった。えっと、マインドでもって臨んでいくかとか。えっと、どういう風に進めたかっていう話を聞いていったかなと思うんですけど、ちょっとここからは技術的な内容というか、
@Guest 28:34
え、タイプスクリプト以降にあたって、実際どういった形で取り組んでいったかとか、ま、どういった風に手を付けていったかっていうところを。えっと、ここからはアモンさんにえっと、聞いていきたいと思っているんですけど、
@Guest 28:46
まず、どういうふうに進めていったかとか、えー、紹介していっていただけますでしょうか。
@Guest 28:51
今回ちょっとds対応したタイプ、スクリップ対応した上で、ま、結構えっと、いろんなことをやってきたかなと思うんですけど、と
@Guest 29:00
ま、メインにちょっと考えていたのはま、結構今回って、その先ほども話してたように、まリフの対応だったりとかま色んなことが並行して進んでいるので、あまりこの構造そのものをなんかガラッと変えるようなことをあまりしたくなかったっていう
@Guest 29:14
ところがありました。なので、あとー、ジャバスクリプトとま並行して書けるとかっていうようなところとか。ま、今までのバベルのトランスパイルドはそのまま使いたいとか、
@Guest 29:23
なんか、あまりこう。大きくガチャっと変えないようなことをちょっとポイントとしていくつか、ちょっと紹介していきたいと思います。
@Guest 29:31
はいと、まず一個目なんですけど、えと、タッとテエコンフィグの設定で、ま、アロージェスっていうオプションがあると思うんですけど、ま、こちらを有効にして
@Guest 29:41
いました。でま、これをやんないと、そもそも、あの、thevskpトのビルドが通らないみたいな話もあるんですけど、ま、これがちょっとまず
@Guest 29:48
大前提にあるような形となります。で、次になんですけど
@Guest 29:54
とターゲットの方をまes2019ま、今回はes2019にしたんですけど、えっと、
@Guest 30:00
まその先程言ったような。まバベルで、今、トランスパイルes5にトランスパイルをしているような状況で、えっと、タイプスクリプトの方でも、多分ターゲットイs2015とかes5とかにすると、
@Guest 30:13
まあ、そのそのコードにトランスパイルをしてくれるんですけど、もし何かバグが入った時に、これは何が原因なのかっていうのがちょっと
@Guest 30:21
切り分けがしづらいかなと。もしかしたら、そのタイプスクリプトのトランスパイルによる。なんか、変なコードが入って、それが悪さをしているのかもしれない、みたいなところをま、
@Guest 30:30
疑うようなことがあるかもしれないので、ま、今回はちょっと
@Guest 30:33
それをなるべくそういうなんか、要素をなるべく排除したかったっていうこともありましてま、一旦es2019のままバベルに
@Guest 30:40
通して、イエスをタランスパイルをしてもらうような形にしてます。えっと、次ですけど、えっと、ビーのデコレーターみたいなものって、結構今
@Guest 30:50
なんか書いてる方も結構多いかなと思うんですけど。えっと、そういったものはちょっと今回は採用しないようにしました。
@Guest 30:57
えっと、これはですねと、ビーの3ビュー3でま。こういうデコレーターとかっていうな、使用がま。なんかrfcとしてはあったんですけど、それがまあ採用されない。
@Guest 31:08
入らないってことになったので、ちょっとここで。もし入れたとしても、またなんかそれを戻さなきゃいけなくなるかもしれないとかま、そういうことをちょっと考えて、今回は見送りにしました。
@Guest 31:18
はい、で、4つ目なんですけど、
@Guest 31:21
えっと、まタイプスクリプトを導入した時にまちょっとなんだろう。型のチェックも一緒に走ってしまうので、やっぱりここビルド時間が伸びちゃうみたいなところが、やっぱりちょっと
@Guest 31:31
ビルドしてみて、やっぱり長いなみたいなことをちょっときょうさんとも話してて、そこでちょっとなんとかしましょう。ということで
@Guest 31:37
と、今回はフォーク、テエチェッカー、ウェブパック、プラグインって、まあ、よく使われるものだと思うんですけど、
@Guest 31:43
ま型のチェックとま、実際のトランスファイルをま別のプロセスで並行して、走らせることで、ちょっと早くしましょう。みたいなものを今回は入れてます。
@Guest 31:52
で、ま5点目なんですけど、ま、今回テストでまカルマが入ってはいるま入ってるだけの状態だったんですけど、ま、こちらをジェストの使った構成に
@Guest 32:03
書いていますと、多分、ビューだとジェストを使うのが一般的なん
@Guest 32:07
そうっすね。えっと、ビーローダーがえっと、元々えっと、実装が使用だったえみたいな時代にですね。えっと、ビージェストがえっと、比較的。えっと、実際の実装に近いっていう内容でえ使われていたりした
@Guest 32:20
という認識ですね。
@Guest 32:22
なんで、ここもえっと、さっき言った。まあ、他の人が入った時になんだこれってならないように、ま、一般的な光線に近づけようっていう。まあ、意味もありまして、ここはジストに移行しています。
@Guest 32:32
で、テストがまほぼ書かれていなかったので、ま、ここの移行コストはまあほぼなしっていうことで、まあ、とりあえずぽんと入れることにしました。はい
@Guest 32:40
で、6点目え6点目は、
@Guest 32:44
えっと、トゥトゥーの方を。えっと、今回自分たちで定義して。えっと、そうですね。ま、どうしてもタイプスクリプトに書き換える時に、
@Guest 32:53
どのモズというか、ここを直したらこっちの方チェックがダメになって、これを直したら、さらにあっちがみたいなことが結構怒りがちかなと思うんですけど、
@Guest 33:02
まずはちょっとそのファイルだけの変更にとどめておきたいみたいなこととかも結構ありますし、そのためにちょっと1回エにで
@Guest 33:10
ちょっとなんとかしておこうみたいな、ちょっとお茶を濁しておこうみたいなことはあるんですけど、ま、ただ絵にって書くだけだとちょっとなんでしょう。この後、また忘れた頃に見たら、
@Guest 33:19
なんだこのコードはみたいな風になってしまうかなと思うので、ここも。また、あのトゥードのtでジェネリックスでま。本当は何をしたかったかみたいなところを
@Guest 33:28
書いてで、一旦ちょっとまちょっと置いときましょう。みたいなことをやるようにしてます。
@Guest 33:34
で、最後ここれは7点目なんですけど、これはえっと、花谷さんに教えてもらったところなんですけど、結構ビューのsfcでtsを導入すると、
@Guest 33:44
なんかどうしてもちゃんとしてるはずなのに、ビルドが通らない方がおかしいみたいな時がありましてま。こういう時は、コンピューテットにいちゃんと帰りを書くと、
@Guest 33:54
あのタイプチェックがうまくいくよみたいなことを教えてもらって、これが結構いろんな面で助かりました。
@Guest 34:03
あ、いえいえ、こちらこそえお役に立てたなら良かったかなと思います。
@Guest 34:08
なんか、今ここまでえっと、7つえ紹介してもらったかなと思うんですけど、ちょっと私の方でts以降で、すごい気になっているところがあって、ちょっと1個質問したいなと思うんですけど。
@Guest 34:20
えっと、ジェイクエリーの部分があるっていうのを、ちょっと冒頭にきさんがおっしゃってたかなと思うんですけど、ジェイクエの部分って、移行にあたってどうなったのかとか、あと、tsの
@Guest 34:31
え部分とかもあるかなと思うんですけど、今どうなってるかっていうのをちょっと教えてもらってもいいですかね。
@Guest 34:37
はい、えっと、そうですね、えっと、まだちょっとジェークエリーを使っているコードがまき、少し残っているところもあるんですけど、
@Guest 34:44
ま、具体的にちょっと言いますと、例えばなんだろう。えっと、
@Guest 34:48
ジックリのプロキシっていうま、関数ディスを正しく、ちょっと引きます。ために使うようなものだったりとかっていうのは、ま、ファンクションのあのバインドっていうのを使ったりとか、
@Guest 34:58
後は、オブジェクトをまマージするために使ってるxテンドって言われるものはま、普通にオブジェクトは、サインに置き換えができるみたいな
@Guest 35:07
行動が結構あったので、ま、その辺はもう普通にdjceというか、ま、普通のjavascriptに置き換えるような形でやってます。
@Guest 35:14
多分、えっと、エセの方は厳密に言うと、オブジェクトはサに変えられないんじゃないか。みたいな話も多分あると思うんですけど。ま、ポイントで使ってる使い使ってる使い方的にはま、大丈夫だったっていうところで、今回は1個押しちゃったような
@Guest 35:27
感じですね。結構なんでしょう。その2013年に出した時みたいなリリース当時だと、結構ブラザのサポートの状況とか、まあ、フロントエンドのツール回りとか
@Guest 35:37
でま、結構ェクエリ使ってるよね。みたいな部分は結構多いかなと思うんですけど、まあ、結構今のじゃバスクリプトで普通に置き換えられるよね。みたいな行動も多いし、
@Guest 35:47
なんかテストコードだ書きつつ、まあ、実際の動作3つで1個ずつ。まあ、ちょっとはがしていくような形で、今回は
@Guest 35:54
ジェックエリアをちょっと脱ジェイクエリという形で進めていきました。
@Guest 35:58
なるほど、なるほど、結構ここであのジェスト入れたのが聞いてそうな感じがしますね。
@Guest 36:05
そうですね、結構このエクステンドとか、オブジェクトアサイン周りは結構これで結構助かったかなと思います。
@Guest 36:14
いや、結構いいっすね。なんか、そういう風に新しく入れた仕組みがうまくワしてるっていうのは、かなりいいことだなと思いますね。
@Guest 36:23
ちょっとこれもう1点聞きたいんですけど、えっと、ちょっともしかしたら、えー、社外の人だと、えー、経験ない人もいるかなと思うんで。
@Guest 36:31
ですけど、えっと、今回。えっと、そのコルドバの駅版からリフエの移行を行ったって話があったかなと思うんですけど、リフって私、ちょっと最後に触ったのが昨年なんで、ちょっと
@Guest 36:42
分からないところもあるんですけど、当時はcdnから読み込んでえ、動かす方法しかなくて、えっと、タイプて、えっと、片定義とかも
@Guest 36:50
なくて、結構自前でプロジェクト内で書いてたりとかしてたんですけど、その辺りって、今ってなんか改善されていたりとかま、なんかこういう風にやりましたよ。みたいなのって、
@Guest 36:59
えっと、あったりするんですかね、ちょっとそこも教えてもらってもいいですかね。
@Guest 37:04
はい、えっと、こちらはですね。えっと、ま、最初のまおっしゃる通り、えとcdnで配布されている
@Guest 37:10
ものなので、ま、片定義が当然ないっていう状態から始まったんですけど、ま、こちら。あの、最初はもうプロジェクトの方、lineポイントクラブのプロジェクトの方で、
@Guest 37:19
ま自前で
@Guest 37:21
ごりごりと片定義を変えて対応していたんですけどと7月にですね。えっと、リフのnpmパッケージがリリースされまして、
@Guest 37:30
で、こちらをえ使って、あ、えっと、ポイントクラブの方では、片定義のみとして使うようにしてます。
@Guest 37:37
と、というのも、えっと、npmのパッケージが今、エクスペリメンタルですよ。っていうことになってるので、ちょっとこのプロダクトに入れるのは、ちょっと怖かったっていうところも
@Guest 37:46
ありましたので、ちょっと。あの、今回は片手木だけではありますけど、と使うようにしました。
@Guest 37:53
うん、うん、うん、うん、なるほどなるほど、sdk自体はじゃあそのステーブルな
@Guest 37:58
え。安定しているものを使いつつも、片定義のまあ、自慢での定義は防いでえ、いい感じでコーディングしていくってのができたって感じですかね。
@Guest 38:07
そうですね、はい、なので、えっと、結構ここま公式の片手を使っているっていう安心感が結構大きいかなと。
@Guest 38:16
なので。えっと、リフのsdkのnpmパッケージ版が出てますので、皆様是非ご利用いただければなと思います。
@Guest 38:24
なんか、ちょっと全然意図せず、宣伝みたいになっちゃいましたけど、いや、情報ありがとうございます。もし、今えリフで開発してる人とかがいたら、
@Guest 38:32
えっと、よかったら、パッケージ版も使ってみてもらえればと思います。
@Guest 38:38
あ、そういえば、ちょっと宣伝的な話っていうところで、えっと、1点思い出したんですけど、
@Guest 38:44
今回え、amさんに話してもらったタイプスクリプトのコーディングの工夫みたいなところ
@Guest 38:48
で、えっと、以前イベントか何かで話されていたかなと思うんですけど、ちょっと多分、詳細のえっと、行動での取り組みとかっていうのを、スライドベースで見たいとかって人もいるかなと思いますので、ちょっと紹介してもらってもいいですかね。
@Guest 39:04
わかりました、
@Guest 39:05
えっと、以前ですねと改めて考える。フロント、エンドライブラリー、アンギラ、ビューリアクト、ジェイクエリーなどなど。みたいなところのえと、共有のlt会っていうところで、
@Guest 39:14
ま、今話したような。大規模回収の裏で、dipスクリプトとテスト導入を進めた話というタイトルで、今回はあとお話させていただきました。
@Guest 39:23
なんか、今話したような内容とかが、あのま、ちゃんとスライドにまとまって公開されているので、ぜひチェックしてもらえればなと思います。あとは、
@Guest 39:31
えとラインのエンジニアブログの方でもと今回タイプスクリプトの何も使わない方がいい理由みたいなところをまつりて、ツリーシーキングの観点で紹介します。ということで、
@Guest 39:41
こちらの方も記事を書いていますので、よかったらチェックしてみてください。
@Guest 39:47
え、ショートの方にですねえ、スライドの埋め込みというrl貼っておこうかなと思いますので。えー、もしよければ、ショートの方ご覧になっていただければと思います。
@Guest 39:57
えっと、最後にですね
@Guest 39:59
え、ここまでで、えっと、2年半のえっと、プロジェクトの中のえっと、第1フェイズが終わって、これからどんどんえ。tsとしてのコードベースを変えていけるようになったっていうところかなと思うんですけど、も
@Guest 40:11
え、その第1段階を終えてて、え、終えてえ、現状の手応えとか、え、今感じてることとか、え、これからに向けて思っていることがあれば、ちょっと聞いていきたいなと思うんですけど。
@Guest 40:22
ええ、よければ、まずきょさんからえ、お話をお伺いできますでしょうか。
@Guest 40:28
はい、えっと、そうっすね、
@Guest 40:32
えっと、手ごまず手応えっていう話なんですが、手応えはえっと、間違いなくありました。えっと、
@Guest 40:40
そもそもこれ中長期計画ってことで立ててるん。
@Guest 40:43
え、えっと、実際に目標としている自分が目標してるビジョンに、えっと、チームがえっと、変わるところまでをほんとに
@Guest 40:52
ただ2年経ったり、3年ぐらいで見てる。
@Guest 40:54
ええ、
@Guest 40:56
今えっと、第1段階が終わった段階でゴールに向かって、どのぐらい。えーと、
@Guest 41:01
なんだろ。歩みが進んだかって見た場合に、当初の想定よりも全然進んでるような感じなんですよね。えっと、この感じで、多分えっと、2年半コスト回収なんで、
@Guest 41:12
一応今えーと、対応コストとしては、えっと
@Guest 41:17
半年を一応見てたりはします。で、ただえっと、別の開発があるんで、ま、そっちに偽装とられて、結局多分えっと、期間としては1年ぐらいかかるんじゃないかなっていう見込みで、
@Guest 41:27
えっと、今計画はしてるんですけど、
@Guest 41:30
そうですね。で、今回の初回のタイミングで、既にえっとま、ちょっとアンさんに調べてもらったら、tsタイを15パーセントほどもできてるっていう
@Guest 41:40
あ、話はもらってるんで、あとは、えっと、それに対してどういう順番でえっと、まだ提出ができてないものを対応していくかで、そのおっきな課題となるのが
@Guest 41:49
えっと、まあ、さっきお話出てたデコレーターの件と、あと、ビューxのタイプとかの件ですね。
@Guest 41:55
あれを今考えてる最中っていうのが、えっと、今のステータスにはなりますね。はい、
@Guest 42:00
いや、それはそれでなかなかやりがいがあって楽しそう。
@Guest 42:03
そうですね、ちょっと笑い出ちゃうぐらい楽しみです。
@Guest 42:09
まなので、えっと、そうですね、ま、ちょっとやっぱ歩みはちょっとゆっくりはなっちゃうんですが、えっと、確実に。えっと、タイプスクリート化を進めていって、
@Guest 42:18
ほんとにもうみんながストレスを感じない、そういったチームを作っていければなとは、今思ってるところです。はい、
@Guest 42:25
いや、特にえ、デコレーターとおどうするかとか、えっと、bleどうするかみたいな話はま、これからb3がえっと、出ていくにあたって、また新曲とかも結構出てくるかなと思うので、
@Guest 42:36
ちょっとえ。もしよかったらですけど、えっと、このtsか対を始めたものが、えっと、次のえ、半年とかでどうなったかっていうのはえ。また、よくよかったら、フォトキャストでえ、聞いていければなと思いますので。
@Guest 42:49
ええ、ぜひぜひその時は出演、またお願いできればなと思います。え、今日はほんとにありがとうございました。
@Guest 42:58
というわけでえ、本日はですね
@Guest 43:01
え、lineポイントクラブにおけるタイプ、スクリプト以降を含む。え、巨大ファクタリングのえー、全望について、
@Guest 43:09
きょうさんとアモンさんのお2人についに話していただきました。
@Guest 43:13
え、ラインのフロントエンド開発組織UITでは、このようなフロントエンドに関するえ、議論やえ、学びえ、ラレッチの共有などを日々行っております。
@Guest 43:24
え、今外に出ているもので言うとですねえ、ビューススタディやえ、ゴールデンウィークの自由研究などはえ、社内的に始まった企画を外にアウト
@Guest 43:33
としたものなので。え、もし、これからもえ内部で学びが生まれたら、このホットキャスやミートアップなどで、え、どんどん発信していきたいと思っております。
@Guest 43:42
え、またですね、このポッドキャストを通じて、え、ラインのフロントエンド組織に興味を持っていただいた方は、え、正のと家にあります。え、採用のえーリンクがえございます
@Guest 43:52
こちらからですねえ、アクセスいただければですねえ、カジュアル面談からでも受け付けておりますので、え、もし軽く話したいです。みたいなのがあれば、えっと、ぜひぜひご連絡いただければと思います。
@Guest 44:03
え、例えば、きょうさんのにえきさんの実際のえ、熱い思いについて聞きたいとか。え、あのさんが今回
@Guest 44:10
たテクニックについて聞きたいとか。え、詳しい話があれば、えっと、ぜひぜひえ、お気軽にえー、採用サイトからえ、ご連絡いただければと思います。
@Guest 44:19
というわけでですねえ、今回はえきょうさんとあのんさんとともにえ、lineポイントクラブのえータイプスクプト以降についてえ、話をえ、聞いていきました。え、お、2人ともありがとうございました。
