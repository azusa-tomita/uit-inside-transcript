@Guest 00:00
こんにちは
@Guest 00:01
こんにちは
@Guest 00:03
え。今週もUIT INSIDEをやっていきましょう。UIT INSIDEは、ユーザーインターフェースと、テクノロジーを愛する開発者のためのポットキャストです。
@Guest 00:13
最新のウェブ標準は、もちろん開発、フレームワークの変遷やuyxに関することまで
@Guest 00:19
様々なフロントエンドの情報をキャッチアップできる、ポットキャストとしてお送りしております。twitterのハッシュタグは
@Guest 00:27
シャープUIT、アンダースコアインサイドエピソードのご意見やご感想、リクエストをお気軽にツイートください。
@Guest 00:35
パーソナリティーは、私、えー、スプリングレーニングと、えっと、同じみえーポテト4dをえ、ゲストに迎えて、
@Guest 00:43
デューススタディレンダー、ファンクションについてお送りしたいと思います。それではえ、よろしくお願いします
@Guest 00:50
よろしくお願いします。
@Guest 00:53
今回はえービュー3、勉強会、ビュースリスタディの4回目のレンダーファンクション会をお送りしたいと思います。
@Guest 01:01
で、えっと、今回はですねえっと、デスの変更点の1つとして、えっと、レンダーファンクションのaiの変更点が挙げられました。
@Guest 01:10
では、えっと、ここでちょっとおさらいをしておきたいのですが。でも、ポテトフォディーさんえ、紹介してもよいでしょう。
@Guest 01:17
はいま、今回レンダーファンクションに関しての変更ということで、えっと、私、potato4dーが話させていただきます。
@Guest 01:24
まず、このビースにおけるレンダーファンクションの仕様変更というところですけども、響いてくる点は、今までのファンクション、コンポーネントを作る部分、そして
@Guest 01:34
今までえとクリエイトエレメントを利用していたと、レンダーファンクションの部分、ま、いわゆるjx書くような部分ですねというところが変更点となります。
@Guest 01:43
えっと、まずおっきな変更として、そのレンダファンクションのところ、プレートエレメントの方から話していければと思います。
@Guest 01:50
まずこれですけど、今までえっと、bjsでえっと、まあ、例えばtsxを使ったり、ま。ちょっと特別な処理を行う時に、え、ビルテンプレート、
@Guest 01:59
ドット、ビーファイルのビーテンプレートではなくてですね
@Guest 02:02
レンダーファンクション、コンポーネントのオブジェクト内にレンダーという関数を用意して、そこでプレイトレメントをリターンするっていう形で、えっと、書くことが度々あったかなと思います。まあ、これはjsxってる人だった
@Guest 02:14
とか、ま、一部のまライブラインとか使ってるとよくあるかなと思いますけど。え、やったことがある人もそこそこいるんではないでしょうか。
@Guest 02:21
で、ここなんですけど、まあ、あんまり意識することも多くはなかったかなと思いますが。えっと、レンダーにおけるクリエイトエレメントですね。とよは、これは
@Guest 02:31
引数を用意して、パストのvノードを出力する関数なんですけど、そのクリエイトエレメントというのが、今までえっと、レンダー関数の第1引き数にいました。
@Guest 02:43
何かしら、レンダーのファンクションを作るという時は、え、必ずえレンダーにクリエイトエレメントが依存されるんで、まあ、何か仮想ドムを1個出したいっていうだけで、
@Guest 02:53
え。レンダーを用意した上で、そこの引数得である関数っていうのを別のまそのレンダー関数に渡して、数として得られたクリエイティメントをベースに。まあ、なんかファンクラーなコンポネントを作るとか、
@Guest 03:05
あるいはファンクショナルのフラグを立て立てる。また、なんか、jxとかを書く時も、引き数に明示的にhみたいなのを指定して、やらないと動かないみたいな状況があったかなと思います。ただ、今回のu3からこの点が改善されました
@Guest 03:19
で、どのように改善されたかというとですね。
@Guest 03:22
bjのえっと、ビーのパッケージですね。インポートえ、よくビーフロムビーってやる。あの、ビーのパッケージの方に、ネームエクスポートとして、h関数がえ帰ってきました。
@Guest 03:31
ま、このh関数はですねクレイト、リエレメントのエリアと言いますか。ま、慣習的に使われているレンダーのことを指すんですけど、クリエイトエレメントの種類自体がえ、h関数として切り出されて、ネームドエクスポートの対象となったというような変更となります。
@Guest 03:46
これによってですね、いくつかできることだとか、柔軟に書けるようになった設定があります。
@Guest 03:51
ま、これまではですねえ、今言及したように、レンダーに関するような概念を作りたいのであれば、わざわざレンダー関数を用意して、レンダー関数に飛んで生きている引数をベースに
@Guest 04:02
引数として取られている。え、クリエイトエレメントh関数を他の関数に渡してま、何かしらファンクショナルな処理を行うだとかま、色々なえ用途にレンダーに関する用途に使っていたんですけど、もえ、そういったものを依存なしにえ作れるようになりました。
@Guest 04:15
まあ、これまでわざわざbjsのテンプレート4分にちょっといびな形で、ファンクショナルトゥルーとして
@Guest 04:21
作っていた。まあ、レンダー関数とかが、まあ、ほんとにシンプルなアロファンクションのえ戻りにhを入れるだけみたいな。すごい簡単な作りで連打するものを作れるようになっております。と、
@Guest 04:33
これに対するメリットっていうのは、まいくつかあるんですけど、まあ、単純にこんな感じでレンダー関数として読み取るところができるってのが1番かなと思います。
@Guest 04:42
まあ、あまりですねえ、普段はえ、バベルプラグインとかまbcaiな環境であれば、ま、bcaのプラグインとして、バベル関連の設定とかを入れる
@Guest 04:51
ことから、あんまりh関数自体を見ることはないかなと思いますけども。まえ、jsxの裏で動いてるのが1関数ですので、
@Guest 04:58
まあ、何かjxを書くときとかも、前と比べて壁数にを取らなくてもよくなったんで、書きやすくなったっていうのをイメージしていただければいいかなと思います。せっかくですので、え、シノートの方にでも、え、サンプルコードでも渡せればいいんじゃないかなと
@Guest 05:12
思っております。
@Guest 05:14
はい、ありがとうございますはい、よくわかりましたえっと、そうですね、レンダーファンクション自体はま、結構。
@Guest 05:22
あと、中急車以上という感じではあるんですけど、もまそのビューのテンプレート以外のもう1つのその
@Guest 05:30
えっと、コンポーネントの。まあ、成人方法。それが今までだと、そのクリエイトエレベントファンクションを受け取って、それを使う必要があるっていうのが、まあ、トップレベルのAPIとして、今回切り出されたっていう
@Guest 05:42
ところがまよりこうファンクショナルに書けるようになったっていう。すごいま書きやすさの上ではすごいいい。変更点ですね。
@Guest 05:51
そうですね、結構これまでって、要は全部が全部ゲジスのコンポーネントにした上で、ファンクショナルっていう例外的に作らないといけなかったのがま、描画関数は、描画関数っていう単体の存在にスタンドローンになったっていうのが、結構
@Guest 06:05
アーキテクチャ的な意味でも、妥当性が増えたんじゃないかなとは思いますね。
@Guest 06:09
そうですよね、うん、なかなか割とこうビュースという、すごいメジャーな変更点だからこそまできるアーキテクチャ的な変更点っていうところですよね。
@Guest 06:19
そうですね、
@Guest 06:21
レンダーファンクシンの紹介は、まあ、さっきこなった通りなんですけども、このレンダーンクションの特徴を使って、えと、ポテトォーディーさんがえ、何かと実験をされたということですので、ちょっとその内容について、今回紹介してもらいましょうか。
@Guest 06:35
はい、オッケーです。えっと、今回ですけど、
@Guest 06:38
何をしたかっていうのはじめに話すと、タイプスクリプトのコンパイラーtscですねtscを使って、バベルの依存なしで、b3のtsxを連打できないかっていうのを試しました。
@Guest 06:51
これまで、えっと、試したことがある方はえ、ご存じかもしれないんですけど、bjsのjs
@Guest 06:57
環境において、まあまともにjxとしてbjsを動作させるには、公式が出しているbjのmp出しているバベルのプラグインとバベルプラグイン、
@Guest 07:07
トランスホームビtsxみたいなプラグインがあるんですけど、えっと、それがないと処理できませんでした。と
@Guest 07:13
で、これもしかしたら、えっと、これもちょっとまだ試してないんで、ビデオ2でも、ちょっと特別なことをやったらいけるかもしれないんですけど、これまではそれを使わないとえ、レンダーファンクションの第1
@Guest 07:24
すとして、その連打があったっていうところから、まあ、その暗黙的な依存とかがあったんで、全部が全部そ
@Guest 07:30
えjsxを変換しようと思ったら、どの道そのh関数がどこから来てるかっていうところをたらないといけない。都合上、bjsのレンダーにないと動かせないみたいな状況がありました。
@Guest 07:40
ま、これをうまいことやるために、まそのatベースの変更として、バベルレイヤーでま、レンダーファンクションからh関数を吊り出して、それを使ってま。他の変換も運ル関連をやって、最終的にjxとしてバリットなものを作る
@Guest 07:54
みたいな処理が今まであったんですけど、
@Guest 07:56
今回hカスが外に出されているので、まあ、どこでインポートされてようようと、実はtscだけでコンパイルできるんじゃないかえ、コンパイルし、動かすことができるんじゃないかと思いました。
@Guest 08:06
ま、普通に考えて、tsxのって、えっと、えっと、コンパイルしても、リアクトドックリエイトエレメントになるんじゃないかっていう風に思う方が多いかなと思いますが。
@Guest 08:15
こちらなんですけど、タイプスクリプトには、本来のえっと、ステージ系のjsの使用追収の他に特別にjsxについての
@Guest 08:23
設定がなされていますと、要は、タイクスクリプトがjsxを認識して、それを変換するという機能がその割っています。これは、コンパイルオクションのえ、jsxというものと、jsxファクトリーというものによって実現できます。
@Guest 08:37
えっと、jsxっていうのはですね、プリスアブとかリアクトで設定されてるのを見たことがある方もいらっしゃるかなと思いますけど、今回の規模は、このjsxファクトリーっていうものになります。
@Guest 08:47
このjxファクトリーというものはですね。コンパイルした際に、そのtsxがそれぞれのtscがtsxのえ、それぞれのvノードっていうのを何の関数で処理するかっていうところの
@Guest 08:59
命名をするためのファクトリー関数を設定するっていうオプションとなります。と、つまりは、ここはデフォルトでリアクトとクリエイトエレメントになっていますが、
@Guest 09:08
hと指定することによって、え、任意のまhと指定したりだとかまえば、レンダーでも、フレートエレメントでもいいんですけど、何かしらの名称
@Guest 09:15
を設定することによって、右の関数にすることができます。今回はですね、これを使ってhを指定することによって、
@Guest 09:23
レンダーファンクションっていうところをうまく動作させる。え、tscだけで、bjsのレンダーファンクションをえ、操作できるんじゃないかと思って、実験しました。で
@Guest 09:32
やってみた結果、え、一応ちょっとしたブリッジが必要ではあったんですけど、動作するっていうところまで行けまして、まただのカウンターだけ
@Guest 09:41
なんですけど、うまく実装するとこまでできました。
@Guest 09:43
ちょっとですね、多分、このポッドキャストが公開される頃には、ブログか。まあ、なんかキットハブページスかなんかでホストしてると思うんで、そのサンプルっていうのを、ちょっとノートの方に書いていければと思います。こんな感じで、ディファインコンポーネントして、普通のレンダー関数が書かれていて、
@Guest 09:58
ちゃんと動作し、ああ、はいはいはい
@Guest 10:00
でやってることはこれパーセル環境でえ、jxファクトリーってのをhにして、ここはリアクトのままで大丈夫です。基本的には、リアクトと
@Guest 10:09
ビューデスがほぼほぼ一緒のエピアになってるんで、リアクトのままえーカスだけ1にしてやるっていうような感じで、今く動いてるみたいなのが
@Guest 10:18
こんな感じですね。
@Guest 10:19
まさには、今のところで、バベルは全く使わずに。
@Guest 10:23
そうですね。いている
@Guest 10:27
そうっすね、バンドラー自体はどの道パーセルとか必要なんですけど、
@Guest 10:31
まあ、バベル環境ま、最近だとヒエしかだけでバベルなしの環境の人も結構いると思うんで、
@Guest 10:37
ま、そういった人でも、バベル環境なしでも動かせるってのはちょっと魅力かな。
@Guest 10:42
確かにうん、動いてますね。
@Guest 10:46
というのが、はい、これ実験してた
@Guest 10:48
感じ、ござありがとうございます。
@Guest 10:51
そうですね、結構全く、もう何の変更も加えずにというわけではなく、ちょっとそのなんてすかね。h関数のそのhiの違いを吸収するみたいな感じですかね。今回必要だったのは
@Guest 11:03
そうですね、そうですね、ちょうど今とお見せしてる部分、ちょっとここと。こちらも人に書きますけど、今回、延期関数に少し変更を加えてみますと、それが何かっていうと、
@Guest 11:13
bgsのh関数ってのは、ほぼほぼリアクトと似たようなとタイル。え
@Guest 11:18
で、記述はできるんですけど、えっと、チルドレンの操作方法がちょっと変わってまして、えっと、bfsってのは第1引数にえ、そのタグメとかコンポーネントっていうのを設定する。第2引数にプロップスとか
@Guest 11:32
ま、そういったオプションを指定するで、第3引き数以降え、無限にまあ3456とえいくつでもタ分引き数が用意されていて、えっと、そこによってチルドレンを表現するっていう感じになって
@Guest 11:44
なんですけど、あれですね。あの、引数で点々々を用意する感じのスタイルで、ビージの変調数で実現されてるんですけど、
@Guest 11:51
えっと、リアクトの場合はそうではなくて、え、第3引き数に配列、えっと、vノードの配列として、
@Guest 11:58
チルドレンを受け取るっていうようなしになっています。とはいはい、どうしてもえっと、この仕様のせいで、えっと、何が起こるかというと、普通にとチルドレンを2つ以上用意すると、1個目しか描画されないっていうような描
@Guest 12:10
問題が、リアクトスタイルのままだとちょっと怒ってまして。はいはい、
@Guest 12:14
まあ1個1個あるんで、1個の場合はちゃんと動くんですけど、2個以上の場合、例えば今だとカウンターっていうh2かな。h2があって、下にそのボタンがあると思うんですけど、カウンターっていう文字しか表示されないみたいな
@Guest 12:26
問題が一勝しました。と
@Guest 12:28
ということで、と、ちょっとこのままだと、リアクトスタイルだと動かないなっていうところで、今回は可変。長引き数の部分を配列化して、チルドレンとして流し込むっていうような
@Guest 12:37
実装を試しにやってみてま。これは、一旦上手くいったっていうようなところで無事。えー、レンダーファンクションをね、tscだけでうまく動作させるっていうところができたみたいなところですね。
@Guest 12:48
まあ、普通に考えてあれですね。h関数を次で使うことって、ほぼほぼ100パーセントなくて、jsxのための機能だとは思うか。まあ、実際の利用ケース的には、こういう風な変換をすると、現状普通にtscだけで使えるんじゃないかなと
@Guest 13:02
思います。
@Guest 13:03
あとはあれですね、あの、結構細かいところですけど、ダ引数も
@Guest 13:09
あのさっき見たところ、その流通とビスで結構変わってた。
@Guest 13:14
そうっすね、そうっすね、するっていう
@Guest 13:15
ところとかあったりして、これは割とその逆とのえっと、一関数によった
@Guest 13:23
プロップスが直接指定できるようになったっていうそうっすねこうとかも変わってるので、結構ブリッジとはいえ、
@Guest 13:31
ほぼ第3指数の以降の変化っていう感じですね。
@Guest 13:36
そうですね、なんか、あの、レンダーファンクションの時、ちょっと話しそびれたんですけど、ビュー3になったらですね。そのh関数の受け取り方っていうのが変わっていて、まあ、単純に分割、代入的にこうまとめて、引数はいろんなデータを渡せるようになっていて、
@Guest 13:50
ま。これまでとは、えっと、ちょっと違うシンタックスっていう風になってるんで、まあ、これも
@Guest 13:55
えリアクトとほぼほぼコンパチブルになってくれたっていうようなところかなと思います。ま、これによってですね、
@Guest 14:01
まあ、何のキスを渡しても、ちゃんと子供に直下がってくれるんで。まあえ、多分特別なえ。トランスフォーマーなどもなしにこうできてるってのも、ここに通うところかなと思います。
@Guest 14:12
そうですね、あと、あの結構人昔にすごいバズった。ハイパーアップっていうプレーマークとかが、はいはい、なんかすごいビュー3のえっと、1ファンクションにも似てるなっていう。
@Guest 14:24
あ、そうですね、えっと、確かにえっと、あ、ちょっとこの話をすると、私、ちょっと昔ファイバーップでアプリケーションを書いてた時期があって、お。
@Guest 14:32
あの、その時にこのテクニックを使って、えっと、tsxでハイパーなるハイはいはいっていうのがあって、あの、その時にあ、
@Guest 14:40
ファイトアップでどうやってjsx処理してるんだろうとかま、tsx処理してるんだろうってのが、結構その時に業務でもあの既に構築されていたところ、環境だったんで、気になってやっていたら、
@Guest 14:50
ジェセックスファクトリーってのが実はあるっていうのを知って、その知識がちょっと私も生かされてるところではあります。
@Guest 14:56
なんでえ、そうですね、ハイパーアップもえっと、h関数をネームドエポートをしていて、それを使ってティとして処理したりとかができるっていうような作りになってま。
@Guest 15:05
じゃああれですね、その仮想ド部を構築するっていう関数としての概念として、一関数っていうのは、だいぶいろんな
@Guest 15:14
ところのいろんなフレームワークでも、根底で使われるところがあってま。それがほんとに細かな違いがまそれぞれあるっていう、
@Guest 15:23
うん、うん、そんな認識です。私だから、ハイパーアップは、基本的にh関数のシンタックスは、リアクトと完全に同じにしてて、第三引数に採決があってまチルトレインが
@Guest 15:32
指定されているっていう完全にヤトと同じ持ち方をしてるんで、そのままtscだけで処理ができるって感じですね。この辺りは結構
@Guest 15:40
まみんなリアクトまれておけば、コンパシブルに使えるみたいな意味で結構広まってるかなとは思いますね。感じですかね、そうですね、ちなみにちょっとこれ余談ですけど、h関数ってどっから来たんでしょうね。
@Guest 15:50
h関数は、これが祖先なのかどうかはちょっとわからないんですけれども、
@Guest 15:55
一応、これがリアクトのドキュメントでは紹介されていた本当なのかな。これ、諸説あると思うんですけど、
@Guest 16:03
リアクト的にはこれが祖先という扱いなんですね。いや、
@Guest 16:07
違いましたリアクトじゃなくて、プリプリアクトの話ですね。プリアクトあ、プリアクトのえっと、ドキュメントではまこうこれが紹介されていたお
@Guest 16:16
おお、なるほど、結構興味深いっすね。ちょっとまたどっかで調べてみても面白そう。
@Guest 16:22
そうですね、ま、こういうま概念自体はもう結構前からあってま。それの実装がばリアクトであったり、プリアットであったりっていうという、
@Guest 16:32
そんな、なんか私は勝手にあのhtmlスペシャルチャーズを略してるだけだと思ってたんですけど。
@Guest 16:43
だと、勝手に思い込んでいたが、そうではないんです。え、安全にレンダリングするみたいな意味だと勝手に思った。
@Guest 16:49
なるほど、はいはい、なんかエって意味しなんです。なんか、元ネタが
@Guest 16:57
あれ、なんかありそうですよね。うん、レンダーでいいじゃんとか、クリエイトエルメントでいいじゃんじゃないんで、ちょっと気になりますよ。あ、と、いうのでした
@Guest 17:08
はいま、ちょっとそれはまたどっかで調べましょう。
@Guest 17:14
ま、そんな感じで、えっと、そのhカンスレンダーファンクションのなんていうんですかね。ま、ある意味共通化みたいなところの道筋みたいなのが見えて、これはひょっとすると、理でもリアトでも使える
@Guest 17:27
ま、ユニバーサルなコンポーネントみたいなのの、共通貨の道筋みたいなのは、このブリッジライブラリーみたいなのを使うことでできるんじゃないかなっては思ったんですけど、
@Guest 17:40
その辺りとかどう思いますかね。
@Guest 17:43
そうですね、えっと、シンタックスリアクトに寄せると割とい、
@Guest 17:48
あの、現実的に見えてくるんじゃないかなとか思ってまして。多分、連打を使った場合に
@Guest 17:56
どうなんでしょう。とま、bgsって結構いろんな機能があると思ってましてや、その特徴的な、
@Guest 18:02
そのbgsにしかない機能とかいっぱいあると思って、また、え、イベントの渡し方1つとっても、そのエミットとかではなくて、例えば、全部オンクリックのプロップスに統一しまうとか。
@Guest 18:12
ま、そういった形でリアクトにあるようなシンタは、リアクトのシンタックスの範囲で
@Guest 18:17
記述する。まあ、くまでもリアとコンポーネントとして書いて、それをbgsのコンポーネントとしても、コンパイルするっていうことを
@Guest 18:24
やってみると、ユニバーサルな行動っていうのは、もしかしたらできそうだなっても、ちょっと思ったりしますね。
@Guest 18:31
ああ、なるほど、はいはいはい、ちょ
@Guest 18:33
っとした信託スの違いをどう吸収するかっていう問題は私はありますけど、まそこさえこ乗り越えたり。例えばそのブリッジライブラとかを誰かが作ってしまえれば、
@Guest 18:42
まあ、バベルみたいな変換をかまさなくても、ま、単純にライブラリーとして、
@Guest 18:46
ブリッジをうまくできるんじゃないかな、とか、最近思ったりはします。まあですしまそうなってくれると
@Guest 18:53
とりあえずデータサポートとしてま。bjsもリアクトと同じシンダとかtsxだったらいけるよっていうような提案の仕方もできると思うので、まあ、例えば
@Guest 19:03
bjsの対応が結構。えっと、なかなかされずにみんな困っていたりして、あのストーリーブックとか、ああいうアプリケーション開発の支援ツールみたいなはいいが、
@Guest 19:12
とりあえずデータとして、まあ、リアクトモードのままbj動かしたり、一部は対応できるよみたいなことができるようになっていくと、まあ、需要調査とかの意味でも結構便利になってくるんじゃないかな、とかは
@Guest 19:25
ちょっと思ってますね。あ、その辺りに行きたいかなと。あ、例えばなんでしょう。
@Guest 19:31
アプリケーション内で、ま、busをピーピアでペンデンシズに入れておいて、そのツール側からそのアプリケーション本体を読み込んできて、ま。そのbjsをイジェ
@Guest 19:42
として、そのh関数の内容を書き換えて、ウル関連みたいなこととかをやると、まあ色々できるようになったりするんじゃないかなとか思ってますね。
@Guest 19:51
こともできるんですね、また、
@Guest 19:53
とかもできるかなとか思ってますね。
@Guest 19:56
ま、他も。まあ、やっぱりえっと、ユニバーサルな行動っていうと、まそのウェブコンポリンズライブ的には使うとかが多い。はいなとは思いますし。
@Guest 20:04
あと、じさっきのジェースファクトリーの話もステンシルとか。あの、アイオニックチーム、ステンシルとかも結構同じ考えで作ってるみたいなんでま、そういった
@Guest 20:14
え方法とかもあったりするかなと思うので、まあ、これからはあれかもしれないですね。あのま、bjsがこういう方向に家事切ったっていうような
@Guest 20:24
最低を受けて、他もリアともちゃパチブルになれば。まあ、jsxはリアトの文法っていうよりも、あくまでもその共通文法で、まその
@Guest 20:33
デファクトスタンダード的な意味での主要的な共通なものではないけれども、実際の現実的な
@Guest 20:39
共通のしようと思ってま。そこの上に、各フレーマークの機能が足されるみたいな認識に変わっていくかなとかはちょっと思ったりしてますね。
@Guest 20:48
確かにそうですよね、結構あのさっきのそのストーリーブックの例とか、すごい良さそうだなと思ったんですけども、結構なんて言うんですかね。その
@Guest 20:59
側だけが必要みたいな、こんライブやりって結構ありそうだなと思っていて、
@Guest 21:06
多分、その例えばその薬と専用の機能であったり、流線用の機能であったりっていうラガリだとなかなか。
@Guest 21:15
まあ、そういう両方に適用できるコンポーネントを今すぐ作るっていうのは難しいとは思うんですけど、も
@Guest 21:24
ま、例えば、そういうストーリーブックのみたいなコンポーネントであったり、
@Guest 21:29
あとはなんですかね。例えば、cssフレーマークのコンポネントみたいな。そうですね、そういう結構
@Guest 21:37
ライブ的には特にそういうそれこそ今だとウェブポンポンレンズとかも全然使うこともできますので、なんかそういう割と
@Guest 21:46
か軽めというか、まあそこあまり依存しないライブやリから割と適応されてい、
@Guest 21:53
行ってほしいなっていう気持ちはありますよね。
@Guest 21:57
そうっすね、ま、基本はまずuy系だと、とりあえずcscでコンパイルしてしまうみたいなところに載せてしまえば
@Guest 22:05
ま、ストーリーブックとかは、頑張ってbugsとかに追従してくれてますけど、やっぱそういうのが難しいような技術とかもあると思いますし、まあ、そのosのリソースも無限ではもちろんないので、その
@Guest 22:16
あれも誰かが頑張ってメインテしてるから、動いているものであって、まあ、そこのリソースのをbjs
@Guest 22:23
のためにどれだけ使うか、みたいな話とかも出てくるかなと思うんでま、そういった時に梱包ね。えっと、フレマークをたいた
@Guest 22:30
コンポネントの取り扱い方法があるってのは、すごい素晴らしいことかなと思います。
@Guest 22:35
うん、や、なるほど、結構じゃあ、もうこのせっかく開発されたものが
@Guest 22:43
あるわけですし、結構割とそういうライブありを公開してくれることに期待してます。
@Guest 22:52
なんか、お願いみたいになってしま
@Guest 22:55
そらが出てくると、うん、
@Guest 22:57
割とちゃん。とりあえず、
@Guest 22:59
はい、そうですね、シャンスな気はするんで、ま
@Guest 23:01
とはいえ、ま。いろんな人がこういうことをやり出すと、すごい便利だと思うんで、試しにこのトキャストを出した後に。でも、一旦ユニバーサルなコンポーネント書いてみるってのは、やってみても面白いかなと。
@Guest 23:13
そうですね、はい、もう僕もちょっとやってみたくなりました、
@Guest 23:17
私も書いてみます
@Guest 23:21
というわけでえ、今回はえ、リュース、スタディエンダー、ファンクションについてお送りしました。
@Guest 23:28
私たちUITのメンバーが所属するline株式会社では、このようなフロントエンドに関する議論を日々行っております。
@Guest 23:36
えービー勉強会のように、えっと、社内勉強会から始まった企画なども。えっと、色々とありますので。えっと、今後ともえUIT INSIDEでそいそのようなえっと、企画を発信していきたいなと思っております。
@Guest 23:50
また、このポットキャストを通じて、
@Guest 23:53
ラインに興味を持っていただきましたら、カジュアル面談からでも構いませんので、ぜひページのえ、下のリンクからご連絡をお待ちしております。
@Guest 24:03
えっと、それではまた次回お会いしましょう。ゲストはpotato4dーさんでした、ありがとうございました
@Guest 24:09
はい、ありがとうございました。
