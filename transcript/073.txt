@Guest 00:03
こんにちは、UITのビビルと申します。ユーザーインターフェースと、テクノロジーを愛する開発者のためのウィークリーポット、キャストUIT INSIDE。
@Guest 00:13
今週も始めていきたいと思います。今回は、ゲストに昨年、12月18日に行われました。
@Guest 00:20
UITミートアップボリューム11フロントエンド、紅白lt合戦に参加いただいた。ハメさん、タノピーさん、
@Guest 00:27
磯村さん、じゅんさん、うょさん、花倉さんをお呼びしてフロントエンド、紅白lt合戦アフターショーをテーマに話していきます。
@Guest 00:36
皆様、本日はよろしくお願いします
@Guest 00:39
よろしくお願いします
@Guest 00:41
よろしくお願いします。
@Guest 00:49
早速ですが、
@Guest 00:50
皆さんの自己紹介をお願いしたいと思います。発表順で、まずははさみさんからお願いします。
@Guest 00:56
あ、はい
@Guest 01:12
わかりました、よろしくお願いします
@Guest 01:14
はい、よろしくお願いしますでは、続いてたかのルピーさんお願いいたします
@Guest 01:19
はいえータのピーです。普段はクラスドゥーというところで、uiデザイナー券、フロントエンド、えー、開発者をしています。
@Guest 01:28
紅白合戦では、シェースのテーマでヘッドレス。えー、uiについての発表を行いました。
@Guest 01:37
今日はよろしくお願いいたします、
@Guest 01:40
よろしくお願いいたしますでは、続いていむさんお願いします。
@Guest 01:44
はいえ、LINEgros、テクノロジー株式会社の磯村と申します。
@Guest 01:51
普段は、えのユイティチームのフロントエンジンにはやってます。で、
@Guest 01:56
UITの紅白lt合戦ではss枠で選ばれたのはネクストjsでしたというので、まあ、ネクストjを使
@Guest 02:06
たあ、ssrによるogpの生成などについて話させていただきました、よろしくお願いします
@Guest 02:12
よろしくお願いします。じゃ、続いてじゅんさんお願いします。
@Guest 02:15
あ、はい、googleのソフトウェア、エンジニアです。じゅんです。
@Guest 02:23
発表内容はssg枠で自作のssgを作るという内容で発表させていただきました。
@Guest 02:32
はい、よろしくお願いします
@Guest 02:34
よろしくお願いしますでは、続いてひょうさんお願いします
@Guest 02:39
はいう京です。LINEのフィナンシャル開発センターというところで、フロントエンドエンジニアをやっております。
@Guest 02:46
紅白lt合戦では、ルーターライブラリーというテーマで、旗安全なルーティングを実現する。自宅のルーターライブラリーロについてお話しいたしました。
@Guest 02:55
今日はよろしくお願いします
@Guest 02:58
よろしくお願いしますでは、最後にはくらさんよろしくお願いします。
@Guest 03:02
はい、ピクシブ株式会社のブルードハムチームで、フロントエンドエンジニアをやっています。花倉と申します。
@Guest 03:12
UITensid紅白のやつは、ルーターライブラリーの会で、アットflutという新しい自作ルーターライブラリーでバチバチしていた人間ですよろしくお願いしますはい、
@Guest 03:25
よろしくお願いいたしますそして、本日司会を務めます私、ビビると申します改めまして、皆様、本日はよろしくお願いいたします。
@Guest 03:37
早速ですが、発表内容の深堀に入っていきたいと思います。
@Guest 03:42
ldの発表の内容については、youtubeライブの方で、アーカイブ主張ができますので、是非、先にそちらをご覧いただければと思います。
@Guest 03:50
今回え、ぜひltで話しきれなかったなと思って、いらっしゃることや、
@Guest 03:55
発表者の方に聞けなかったことあると思いますので、参加者の皆さんも、ぜひお気軽に発表者の方に聞いていただければなと思っております。
@Guest 04:04
まず、最初にえはさに発表内容について、軽くご説明をお願いしたいと思いますが、よろしいでしょうか。はい
@Guest 04:12
はい、そと言っても、まあ、あの、ほんとにゃらuiの紹介っていうところなので。
@Guest 04:19
そうですね、うんまそうです。あの、去年振り返ってみると、やっぱりテールウィンドcssがもうすごい
@Guest 04:27
ま盛り上がりつつで
@Guest 04:29
こ。今回、そのシーンインジェースもま、どちらとも、そのテイルウインドcssに関連するプロダクトっていうところで、ま。私は着ラyを選んで、それについて紹介したんですけども、
@Guest 04:42
なんかそうですね。深堀り
@Guest 04:45
そうですね、twitterの方のタイムラインの方で、いくつか質問があったんですけれども、あ、はい、ブレークポイントの単位系がemっていう風にえャuiの方になっているよって表されていましたが、
@Guest 04:59
それ使われてみて、どういう風にお感じになられてるのかなっていうのを伺ってみたいんですけれども、
@Guest 05:04
そうですよね。け
@Guest 05:06
ememあの、多分ま伝統的な方法だとま、ピクセル単位だと思うし。そうですね、あの、そうですね、デバイスによらないっていう意味で言うと、ピクセルの方がまあ確かに
@Guest 05:18
良いかもと思う。一方でem単位使うのも確かに一理あると思っていて、というのも、
@Guest 05:27
あのまemだと、そのコンテンツに対する比率っていう形で指定できるので、まあ
@Guest 05:34
そこもいいかなと思ってますね。ま、例えばそうですね、結構長い文章とかだと、結構その横幅が
@Guest 05:41
ある一定のememってか、その何文字分の横幅を持ってると読みやすいみたいな。そういうところとかもあって、
@Guest 05:51
あの、うん、まあ一応一旦なんですけれども。
@Guest 05:55
そうですね。なるほど、
@Guest 05:58
なんかそうちゃえem単位の方があのあれですよね、デバイス比依存な印象はありますね。
@Guest 06:07
なるほど、複数のデバイスを使うサイト等では、まemの方が有利であるので、茶も有利なのではないかということですね。
@Guest 06:15
なんかあるほど、あとはあれですかね。そのフォントサイズがまあ
@Guest 06:21
特集だったりとかするとま。ピクセル単位とかだと、その本当の大きさとかに依存しないので、ま。例えば、そのユーザーサイドで、ほんとのサイズを大きくしてるみたいな状況とかだと、そのユーザーのその
@Guest 06:33
デバイス環境で大きくしてるところだが、だと、なんか、そのあまりそのほんとのその横幅の
@Guest 06:41
た大きさに対して、そのコンテンツの設計がおっきすぎたり、ちっさすぎたり、みたいなことがあるのかなっていうところ
@Guest 06:51
とかですかね。うん、難しいなんかあれですね、文章主体だと、emの方が向いてそうな雰囲気はありますね。
@Guest 07:00
なるほど、発表者の皆さんのdm単位系とか使われてたりされますか。
@Guest 07:09
いや、家体系はあんまり使わないですね。今のところなんか割とうちは画像コンテンツが多いので。
@Guest 07:18
まあ、なんかうん、あんまりテキストのなんかな。一業何文字見せたいとかっていう単位で選ぶことがあんまりなくて、という経緯で、ピクセル派ですね。
@Guest 07:31
なるほどですね、
@Guest 07:32
確かに
@Guest 07:33
目的によって使う単位系変わりそうですもんね、確かにそうですよね、他の皆さんはいかがですか。
@Guest 07:41
ま、僕もemはないですけど、remでかいことは
@Guest 07:47
多いですかね。まあ、そのアクセシビリティーみたいな話の時に、先ほども
@Guest 07:52
話ありました。けれども、ブラウザー側の設定で、文字おっきくした時に、大きく見えてほしいというところがあるので、まできる限り、
@Guest 08:02
rmレムで指定するみたいなのを心がけてはいますが。なるほど、レイクポイントはま、ピックセルやることが多いですかね。
@Guest 08:12
なるほど、ありがとうございます他にもう1件。twitterの方から来ているので、紹介させていただきたいと思うんです。けれども、
@Guest 08:22
twitterの方で、着ラuiでは、スタイル要素ごとにプリティアが解除してしまって、行動の見通しが悪くなるのでは。っていう懸念が
@Guest 08:31
投稿されていましたが、それについてはさみさんいかがお考えでしょうか。
@Guest 08:36
あれ、あれですよね、あの、そのテインのcssだと、そのクラス名に全部入れられるので、一応ですもんだ
@Guest 08:43
そうですね、おそらくそういう意図だと思います
@Guest 08:46
ど、どうなんですかね、好みの問題そ、逆にあの横浜あんまり取りたくない派なんで、確かに確かに下に並んでほしいかもしれない
@Guest 08:57
どうですかね。あんまり、横浜とる派と取らない派みたいなところ
@Guest 09:03
ですかね。テイルウィントに慣れている方だと、横長はになりつつあるみたいな感じなんでしょうかね。皆さんいかがですか
@Guest 09:15
すよね、確かにそうね、
@Guest 09:18
うん、どっちに慣れてるかで結構かい印象が違うというか、そういうのありそうだなと思いますね。
@Guest 09:26
なるほど、ま使っていけばなれるんじゃないか、という感じでもあるということですかね。
@Guest 09:30
それはそうですね、なんか、具体的なデメリットになる話ではないと思うので、まあ、慣れとか好みの問題なのかなとは思いますね。
@Guest 09:41
なるほど、ありがとうございますぜひ1回挑戦していただければ、という感じですかね。他に、皆さんから
@Guest 09:50
ご質問や、なんかご意見とかありますでしょうか。特になければ
@Guest 09:57
ではさんさんありがとうございました、あ、ありがとうございます。続いてたのピーさんのヘッドレス、uyデザインシステムについての発表に
@Guest 10:07
ついてえたかのりぴさん軽くlt内容について、ご説明いただいてもよろしいでしょうか。
@Guest 10:13
あ、はい、lt内容はまあ、新しい技術の紹介っているかは、まあ、概念的な話を
@Guest 10:22
していたような気がするんですが、ま、同じく、あのはさみさんと同じくですね。あの、テイルウィンドcs系の話で、
@Guest 10:30
テルインドシーがまだし作っているヘッドレスuiというなんて言うんですかね。
@Guest 10:39
先進的なというか、新しいコンポーネントライバリーがあってま。それのまあ、話が中心だったかなと思います。ま、それは
@Guest 10:48
機能しか持たず、見た目を持たないコンポーネント群を開発して、えー。見た目は、テイルウィンドcss
@Guest 10:57
で補っていくような、なんていうんですかね。ま、設計手法というか、シーのえ、
@Guest 11:06
メンテナンス手法というか、みたいなのをま中心にま。それをちょっと拡張して、自分でデザインシステム作るときも、
@Guest 11:15
そんな感じの設計にしてみたらどうですか。というような感じの発表したと記憶しています。
@Guest 11:25
ありがとうございますはい、皆さんの方からご質問やご意見等ございますか。
@Guest 11:34
結構そうですよね、あの、これあの、私も良さそうだなと思っていて、なんか
@Guest 11:40
あまりその必ずしも、そのディブの要素とuyの要素って一致しないっていうのは確かにそうだなと思ってて、なんかあれですよね。その
@Guest 11:51
インプットも、なんかそのタイプによって、なんか全然形が違うインプットタグのタイプによって、全然違うみたいなとこもありますし、その
@Guest 11:59
あのスライドの中のswitchの例とかもそう。switchって、多分それが1つの意味を持っているので、そういうのは、あのデブとかで
@Guest 12:08
指定してあげるっていうよりは、そういう感じ。でも、1つ概念として持たせるっていうのはいいなっていうところもありましたね。
@Guest 12:17
なんか、感想になってしまった
@Guest 12:19
あ、い、いいと思います
@Guest 12:23
自分個人的には、はい、複数のプロジェクトを持ってるチームとかって、結構あるんじゃないですか。ま、
@Guest 12:33
そうじゃないチームどっちが多いのかわかんないんですけど、自分の場合、まあ前のチームすごい。たくさんプロジェクトを持ってたんですけど、
@Guest 12:43
その中であんまりなんかコンポネントの共有というのがされてなかったですね。同じ機能を複数のプロジェクトで、何回もなんか作るこ
@Guest 12:53
とになることが多くて、で、なんでコンポネントの共有ができないのかというと、なんかちょっとずつ違うんですよね。機能欲しい機能がちょっとずつ違って、
@Guest 13:01
そういう場合ま共有させようとして、なんかオプションを入れるということは、結構多かったんですよ。なんか、こういうオプションを指定すると、
@Guest 13:10
なんかここの部分は消してほしいみたいな。でま、今回の発表で思ったのは、そういうことよりも、完全に愛の依存性ないように、
@Guest 13:19
コンポネントを開発して、で、ui部分だけなんかcssで調整するみたいな。あの、接近方法は、そういう
@Guest 13:28
コンポレートの共有という面で、すごい役立つのかなと思いましたね。
@Guest 13:36
そうですね、昨日とurのデザインが分離してると、色々再利用が聞いていいよなと、私も発表を伺っていて、感じたところでした。
@Guest 13:46
多分、多くのエジアの方はね、その経験あると思うんですよね。あの、なんか、若干見た目が違うパターンが
@Guest 13:54
欲しいみたいなのがあって、どう共有共通化すればいいんだ。みたいな悩みとかあると思うんですけれども、
@Guest 14:01
ま、リアクトは一応よくわかんないんですけど、美容は結構そういう傾向があるんですね。あの、
@Guest 14:08
1つのコンポイントの中で、デザイン要素と機能を両方書くみたいなのは、結構
@Guest 14:15
どっちかというと、そういう書き方することは、自分の場合はお多かったので、それがそういうコンポネント共有
@Guest 14:23
押しづらくしてたんじゃないかなと、ちょっとその発表を見て思いました。
@Guest 14:32
そうですね、やっぱそういうなんか、スタイルの教会とその機能の教会が
@Guest 14:39
結構ま微妙に違っていて、そこで悩むみたいなのは非常に多いかなと
@Guest 14:45
ので、まこの設計手法だと、そこがいい感じに解消されるんじゃないかなと思ったりはしてますね。
@Guest 14:57
ま、あと、なんかここで1番最後の方で書いてて、あんまりあの話せなかったんですけど、そのuttファーストのcssっていうのは、
@Guest 15:06
デザイントークとま直結してるというか、デザイントークをま生成的に表現したもの
@Guest 15:15
だと思うので、なんかデザインシステムをま実装で表現する時に、1番そのみみミニマムな単位をま表現して、それを元に
@Guest 15:25
コンポネント実装していくというのはま、非常になんてシンプルで分かりやすいのかなと思ったりしてるので、ま、ちょっと。
@Guest 15:34
来年、今年か今年まこれでなんかプロダクトを作ってみたいな、という気持ちはありますね。
@Guest 15:42
あの、なんかそうですね、1個あの大変そうだなって思うのは、そのコンポネントを具体的に何を作るかっていうところだけがちょっとあれですよね、
@Guest 15:51
ちょっと気になってますね、あの、switchとか、今だとリリストボックスってありますね。なんか
@Guest 15:58
あると思うんですけど、これ多分なんかアトミックデザインとかも同じ問題を抱えてると思うんですけども、具体的にどれが
@Guest 16:05
そのミーマムなコンポーネントなのかみたいな、
@Guest 16:10
ていうまボタンとかは。まあ、当然ではですけど、なんかあれですね。もっとこう
@Guest 16:17
特殊なコンポーネントとか、今後出てくるのかなっていうのま、期待はしつつ、あの大変そうだなとも思いますね。
@Guest 16:28
確かにそれはそうですね、大変だなと思いつつ、まあ教会をなんて言うんですかね、頑張って
@Guest 16:35
探していくしかないのかな、というのと、うんま、あんまりそのミニマムさんみたいなところにはこだわらなくていいのかなと。個人的には思ってるので、
@Guest 16:44
なんか必要な機能単位で実装して、まあ、なんか切り出せそうなところがあったら、まあ、そのヘッドレスコンポーネントとして、切り出して
@Guest 16:53
行くっていうぐらい。でも、僕はちょうどいいのかなと思っています。そのためのまあ、ヘッドレスコンポーネントというか、ま、スタイルが分離されてるっていうのも
@Guest 17:03
あるので、うんなので、まあ、ほんとに機能的な要件でま考えていけば
@Guest 17:11
いいのかなみたいなのは思ったりしてますね。
@Guest 17:15
あんまり粒度とかにこだわらなくても、
@Guest 17:18
そうですね。なんか、そのスタイルまで含めたコンポーネント設計だと、やっぱりその見た目の教会がと、実装の教会が結構
@Guest 17:29
こう。ぐちゃごちゃになるので、そういうアトミックデザインとかを用いて、すごく厳密にというか、考える必要があるかなと思うんですけど、
@Guest 17:38
ま、その見た目と機能分離してしまえば、ヘッドレスの機能コンポーネントの方は、ほんとにも純粋に機能
@Guest 17:47
としての要件をどうやって満たすかっていうところに注力すればいいと思うので、あんまりそのミニマムかどうかとか、
@Guest 17:55
流動的な問題はそんなに気にしなくてもいいんじゃないかな、と。まま、ちょっと実践が足りないので、ほんとにそうかどうかはわからないんですけど、個人的な
@Guest 18:05
感覚だと、そういう風に思ってるところはありますね。あ
@Guest 18:09
あ、ありがとうございますいや、なんかスッキリしました。あまりそういうそれを聞くと、確かにそうかもって気になりました、
@Guest 18:19
ありがとうございます。他に、お皆様から何か質問やご意見とありましたら、お伺いしたいんですけれどもいかがでしょう。
@Guest 18:30
なさそうですかね。では、かなりピーさんありがとうございます、続きまして、えい村さんの方にですね、
@Guest 18:40
発表いただきました。ネクストジェースについて、軽くlt内容について、ご説明いただいてもよろしいでしょうか。
@Guest 18:47
はい、そうですね、僕のlt内容としましてはま、
@Guest 18:54
簡単に言うと、ネクストjsで何ができるかみたいな話で。で、なんかそのネクストjsといえば、まあssrだったり、ssgみたいな
@Guest 19:04
われる。言われると思うんですけど、実際に動いてるプロダクトま、今回ずっとLINEデベロッパーデっていうので、ま、どういう風に動いてるかみたいなのを
@Guest 19:14
まちょっとネクトjcの基本的な機能を紹介しながら、ちょっと説明したみたいな。ネクトjsを触ったことない人
@Guest 19:22
とかに、ちょっと興味を持ってもらえたらな、みたいな観点でちょっと発表させていただきました。
@Guest 19:29
ありがとうございます。そうですね、twitterの方でもogp大変だよねとかogp頭がみたいな反応が大変多くてですね。
@Guest 19:39
ああ、みんな苦労してるんだなっていうのを伺い、知れたんですけれども
@Guest 19:42
そうですね、なんか、今回結構テーマがssgとかssgだったと思うんですけど、
@Guest 19:51
で、そこでなんかまあ、結構ネクストジェースを選んだ理由とかもなんか色々あって、そのメンバーの技術スタッフとか、その
@Guest 20:01
ま、他にもなんかね。ストジェスのルチングとか色々あったんですけど、ssgとかっていうのを絞った時に、何があるかなっていうのが
@Guest 20:08
た時に、やっぱogpの生成はしたいよね。みたいな話にはなって、やっぱそこで、
@Guest 20:14
やっぱssrとかもできるネクストジースはいいよなっていう風になりました。
@Guest 20:19
そうですね、開発もおそらくあの時間がね限られていたと思いますので、そこでとな選択肢となると、
@Guest 20:27
ネクスジュースっていうのがパッと浮かんだのかなっていう風に推察するんですけれどもそ、
@Guest 20:32
そうですね、もう開発期間が今回だと3か月ぐらいしかなくて、で、その
@Guest 20:41
まあメンバーとかの技術スタッフもまあ、ネクトj僕とか今回ネクトjsがこの今回の開発で初めて触ったみたいな
@Guest 20:49
感じだったんですよ。なので、まあそれだけシンプルなインターフェイスというか、
@Guest 20:55
簡単にそのssrとかも実装できるのはかなり魅力的だったなと思いました。
@Guest 21:01
なるほどですね、エクステース確かこれ
@Guest 21:06
あほん。イベント中でもなんか話したような気がするんですけれども、それで触ってみて、今回あの初めてだったという話ですけど、どうでしたか。
@Guest 21:14
そうですね、僕はちょっと
@Guest 21:18
なんかまず思った以上にか、簡単にキャッチアップができたっていうのと、リアクトはもちろん使えますし、リアクトやったり、タイプスクリップとも使えたりするので、
@Guest 21:28
で、簡単なウェブサイトとか構築するとか、なんか、もう基本のウェブを構築するシステムみたいなのも大体あるので、
@Guest 21:36
まあ、これからもなんか結構使う中では第1の選択肢になってくるのかなとかは思ったりしてます。
@Guest 21:45
なるほど、ありがとうございます。皆さんの方から、何か磯村さんの方に伺いたいことありますでしょうか。
@Guest 21:58
皆さん、ネクストジュース結構触られたりしてますか。
@Guest 22:03
そうですね、うんまんぎょ業務では実はあまり触らない。
@Guest 22:11
あ、そうなんですね、やっぱプライベートなところだけって感じですかね。
@Guest 22:14
ですね、
@Guest 22:16
ああ、なるほど、この皆さんはいかがでしょう。
@Guest 22:21
業務では、あんまり触ったことがないんですよね。
@Guest 22:27
や、まあ、元々ssr自前で書いてるプロダクトとか開発してたんですけど、ああなな。ネクストjcが入ってるプロダクトに
@Guest 22:37
携わったことないんですよね。
@Guest 22:40
なるほど、
@Guest 22:43
私は今ちょっとあ、業務でネクストジェイス使ってますね。おうと言ったら、なんかメインのプロダクトで使ってるわけじゃなくて、
@Guest 22:52
ちょっとlp的なものを作るときに、実はネクストジェースをま、スタティックスポート目当てで使おうとしてまして。
@Guest 23:01
まあ、それやるよりも、共通コンポーネントの管理とか、そういうのが便利だな、という印象を受けてます。
@Guest 23:09
lpを作るっていう、それだけのユースケースでも、まあ、ネクストジース使ってみる価値はあるかな、という風に思いました。
@Guest 23:18
なるほどですね、はなくさんはいかがでしょう
@Guest 23:21
僕はネクストジュースはなんかし個人のウェブサイト作るのに、ちょろっと使った程度で、そんなに使ってはいないんですけど、ぎょう
@Guest 23:32
業務の方で。僕とは別のプロジェクトでネクストjsをつ
@Guest 23:37
買ってるところがあって、結構そこの。エンジニアの方がこうめちゃくちゃこう。アグレッシブに、なんか新しいAPI使いってっていう。なんか
@Guest 23:46
なんか話をしているので、なんかそこら辺と。あと、そのプロダクトでフルールが使われてるので、
@Guest 23:52
なんかそのフルル経由で、なんかこうフルールをどうやってネクストに対応させるか、みたいなところで、結構色々ap調べているという
@Guest 24:00
感じですね。なんか、すごく間接的な関わり方をしています。
@Guest 24:05
なるほど、なかなか難しい問題だなっていうのは感じます。
@Guest 24:12
いや、楽しいですか。いや、すごいですねネクストジェイスほんとになんかこうす。
@Guest 24:19
あのゲットさ、サーバーサイドプロップスとか、ゲットスティックプロップスとか、そこらへんが生えてきてくれたおかげで、
@Guest 24:25
なんかこうめちゃくちゃ性サイト。なんか、それまでは結構ギャツ一択みたいな感じだったんですけど、なんか、急にネクストジースがめちゃくちゃいい選択肢になってきて
@Guest 24:37
はいす。まあ、良いですね、ちょっとギャツビーもャツビで、グラフィキュエルがすごく便利なんでやめ。結構や病み付きになっちゃうんですけど、
@Guest 24:47
はい、そんな感じです。はい
@Guest 24:50
じゅんさんいかがでしょう。
@Guest 24:52
ああ、ネクストジェイスは触ったことないですね。ラクストというま、ビューのなんか似たようなものかなと思うんですけど、ラクストは
@Guest 25:02
あの全色のプロジェクトで使ってました。
@Guest 25:05
うん、うん、
@Guest 25:07
両方使った方いますかね。あの、どどど似てるのかどうかは実はわかんないんですけど、
@Guest 25:14
そんなに似てないかも。
@Guest 25:16
あ、そうですね、なんですね、
@Guest 25:18
そうですよね、なんか構成が一緒とかですか。ページの下にルーティングをしてみたいな
@Guest 25:25
そうです。なんか、ファイル、ベースルーティングとか、そういうコンセプトレベルでは一緒。
@Guest 25:30
うん、ただまあ、うま、そもそもビーと逆と全然違うのでっていう。
@Guest 25:36
そうですね。
@Guest 25:38
ナクストってなんかアプリの状態管理はもうbx一択みたいな感じなんですか。
@Guest 25:46
ですね、基本的にはま、それは絶対使わなきゃということはないと思うんですけど、インテグレーションされてるので、それを使った方が楽です。
@Guest 25:54
あま、そうなるとそうですね、ほんとに。なんかそういうファイルファイル、システムとか、そこら辺以外はもう全部全然違う感じになりますね。
@Guest 26:05
はい、わかります
@Guest 26:07
なるほど、
@Guest 26:09
ありがとうございます。他に、何か磯村さんの方に質問や、ご意見とある方いらっしゃいますか。
@Guest 26:17
あ、1個いいですか。あの、ネクスト以外に、あの、なんかけとしたオプションとかってありますか。
@Guest 26:27
あ、そうですね、今回だとほんとそれこそさっき話にも出たな。クストです。
@Guest 26:35
を使うかみたいな。なんか、リアクトの他のフレームは。それこそギャッツリーとかそういうのは
@Guest 26:41
話には出なくて、やっぱりそのssrができるとかっていうのが、結構上の方の持ってきたので。
@Guest 26:49
で、ナクスト経験者とかは、結構そのチムメンバーにもいたので、ナクストかネクストどっち使うかみたいな。
@Guest 26:57
あ、あとはあれですねspa最初はそのspaで実装するかみたいな検討されていて
@Guest 27:03
ま。それこそ、クリエイトリアクトアップ使うみたいな話もあったんですけど、ま、そういう
@Guest 27:11
結局、そのサイトの性質がやっぱ外向けのイベントサイトっていうのもあって、やっぱsnsでのシェアとかできた方がいいよねっていうので、
@Guest 27:22
と、まあだるそうですね、ネクストジースになりました
@Guest 27:26
やっぱりこうあれですね、大量のなんか動的に大量のさ、サイトがサイトっていうか、あのページができるってなるとこう。ギャツビーは、ちょっとあまりにも性的すぎて
@Guest 27:36
選びづらいっていうところは結構ありますね。
@Guest 27:39
す、なんか、
@Guest 27:41
その時、僕なんかssg自体がちょっと初めて触った感じだったので、なんか、まずギャッツビーとかはなんか
@Guest 27:50
どういうものか検討する。あれも、なんか時間もなくてっていう感じだったんですけど、あ、
@Guest 27:56
なるほど、なるほど、
@Guest 28:01
もうギャスビーだと、ページを増やそうと思ったら、もうデプロイしないといけなくなっちゃう。
@Guest 28:12
今回のサイトは、じゃあ、テプライはそんなに頻繁に行われず、って感じで済んだって感じですよね。
@Guest 28:18
そうですね、結局あのネクトjsはなんか自動であのssgを
@Guest 28:25
あのすたさssrしてないものは、自動でssgにするし、ssgを使うみたいな機能があったりするんですけど、結局今回はほとんど
@Guest 28:35
ssrとかで実装してたので、そんな頻繁にデプロイするみたいなことはあんまりなかったですね、
@Guest 28:43
じゃあ、ネクスト使ってよかったなって思うとこですよね。なるほど、ありがとうございます。じゃあ、いむさんに
@Guest 28:51
発表いただいたのは、こちらで終了ということで、ありがとうございました、
@Guest 28:55
ありがとうございました。
@Guest 28:57
続いてじゅんさんの方に
@Guest 29:00
サティックサイト、ジェネーター自作するお話を発表いただいたんですけれども、じゅんさんにちょっと軽くltの内容について、ご説明いただいてもよろしいでしょうか。
@Guest 29:10
はい、自分の発表はどっちかというと、経験談に近い話ではあるんですけど。
@Guest 29:19
ま、ssgあの、スタティサイト、ジェネレーターっていろんな使い方があると思いますよね。ま、チームとか、個人によってこういうものを作りたいと
@Guest 29:29
いうのがまたあると思います。例えば、ドキュメンテーションのためのサイトとか、
@Guest 29:35
あの、さっきの磯村さんの発表のように、とある会社のプロジェクトのサイトみたいなの作ることもあると思うんですけど、まあ、個人の開発者がなんかssgを使って、何か作ってみたいな
@Guest 29:49
と思った時に、1番早く思い
@Guest 29:53
浮かぶのはブログかなと思ったんですよね。自分の場合もそうだったんですけども、例えば、個人のブログとか、
@Guest 30:00
開発ブローグとか作ってみたいなという気持ちになると思います。
@Guest 30:05
で、ま、ブログを作るとなった時に、ssgもあのいろんなssgがあるんですけど、で
@Guest 30:14
も、既存のssgって結構個人のブログ作るにはほんとにいいのかというま、自分の経験上、
@Guest 30:23
自分も色んなssgを使って、あのブログを作って、なんか今イだなと思って、違うssgを使ってブログを作ったり
@Guest 30:33
したんですけど、その中で結局あ、これはもうあの自作した方がいいなと思うようになりました。で
@Guest 30:42
ま、実際自作してみたらもとっても簡単で、あの発表でのあの行動もそうだったんですけど、あの、パイプラインというデザイ
@Guest 30:51
を使うと、もう
@Guest 30:53
あの行動量150行くらいでも、簡単なほんとにもう簡単なスタティック、サイジ、メレーターが作れたということで、その内容を
@Guest 31:02
共有して、あの、みんなにもちょっとあのスタティクサイト、ジェネレーター作ってみようかな。みたいな気持ちにさせるような、
@Guest 31:11
あの発表を目指しました。
@Guest 31:18
はい、ありがとうございますtwitterの方でも、すごいあの、自作っていうワードが出た瞬間になんかわって盛り上がってた印象がすごく強くて、
@Guest 31:28
自作するっていうのは、やっぱりなんかなかなか勇気がいるというか、なんかまず1歩が踏み出すのに、ちょっと躊躇してしまうかな。印象があるんですけれども、
@Guest 31:37
その辺りなんかじさんの方から、こういう風に考えた方がいいよ、みたいなアドバイスあったら教えていただきたいんですけれども、
@Guest 31:46
自分も3年とかもかけちゃう。作れるかもしれないんですけども、そういうのがあるので、それは作る必要はないし、自分が作んなきゃいけない
@Guest 31:55
のは、自分が必要とする何かが自分が思った通りに動けばいいんですよね。結局
@Guest 32:02
だから、実はもうそれそれはギットハーブに共有する必要もないですし、なんか文章化とかもする必要ないですし、もうほんとに自分が
@Guest 32:10
必要とするものを作って、それが思った通りに動くというのが、
@Guest 32:18
あの第1歩かなと思ってて、ま。そこから始めるということは、あの、皆さんもできるんじゃないかなと思いまして
@Guest 32:28
ま、今回の発表準備したって感じですね、
@Guest 32:32
ありがとうございますなんか、ちょっと勇気が若干湧いてきました
@Guest 32:37
いや、めめちゃくちゃわかりますいやた大事ですよね、そういう小さな、なんかなんかこう
@Guest 32:44
なんだろう。社会に必要とされるかとか、そういうのじゃなくて、なんか俺は気になるから、これはちょっと作ってみるみたいな。
@Guest 32:51
そうですね、
@Guest 32:52
ほんとになんかこう純粋な好奇心で、なんかもうなんでもいいから、とりあえず手動かすみたいなのは、なんか
@Guest 32:58
こうたまにああみたいな文脈で語られることありますけど、やっぱ大事なものですよね、わかります
@Guest 33:06
そうですね、で、結構あの今回の発表でもそうですけど、今回の発表で
@Guest 33:14
使ったソースコードは、もう1つのファイルに入ってるんですよね。で、1個のjavascriptのファイルで、全部で
@Guest 33:22
まコメントとか書かなかったんですね。もちろん、最初は動けばいいので、で、コメント全然書かずに書いたら、150行もちょいくらい
@Guest 33:31
で、昨日は実装できてて、もうそれで実はおもし。なんかこれが発表のためじゃなかったら、自分のブログ。ほんと、自分のブログのためだったら、もうそこで終わりで
@Guest 33:41
いい話であって、またなんかそれ使ってて、こういう機能欲しいなとなったら、それをそのまま追加してみたりで、あ、こういう機能
@Guest 33:51
作るためには、モジュール化した方がいいなみたいなのから、ま、なんかモジュール化したりして、
@Guest 33:57
でま、これはなんか他の人もちょっと見てほしいなとなった段階で公開したりみたいな。だから、もう最初からもう素敵なプロジェクトを作る必要がない、
@Guest 34:08
自分が楽しめばいいというところは、多分自作の第1歩じゃないかなと思います。
@Guest 34:15
あり、ありがとうございます皆さんから、他に何かじゅんさんに伺いたいことありますか。
@Guest 34:25
なんか、その
@Guest 34:27
結構そのsなんか、いろんなライブラリとかを使って、なんかた足りないものがあるな、みたいなことをおっしゃってたと思うんですけど、なんか、実際どういう
@Guest 34:36
ライブラリとかをなんかssgラリとかをちょっと触ってみたりとかしたんですか。
@Guest 34:42
ちょっと名前忘れちゃったんですけど、5のサイト
@Guest 34:49
あ、55のやつ
@Guest 34:52
あ、5のやつですヒ5というやつあるんですよね、あ、はいはいえ、えっとま実はあのこれ発表で
@Guest 35:02
ちょっと時間が足りなくて、スロイスライドも消しちゃったんですけど、
@Guest 35:07
staticサイトジェネレーターって別に。なんかjavascriftで書く必要はま実はないんですよ。もちろん、javascriptは1番あの生産性が出ると、それで
@Guest 35:16
書いた方がいいですし、それで、なんかビとかをき
@Guest 35:22
をベースとした。なんか、ssg作ろうとなると、やはりダブスクリプトでかかなきゃいけないんですけど、自分が今回発表したようなちっちゃいものだと、
@Guest 35:32
まあ、なんでなんでもいいんですよね。実は5でもいいですし、他の言語でも全然いいですし、実はま5が
@Guest 35:42
いいんじゃないかなと思いました。あの5は基本的になんか5チャンネルみたいなのがあって、それを使って、なんか
@Guest 35:50
結構性能がいい。パイプラインを作れると思うので、というの思ったりしましたね。ま、実際自分が試したのは
@Guest 36:00
当時5のスタティックサイト、ジェネレーターでしたね。
@Guest 36:05
ああ、なるほど、そうか、スタティックサイトジにたわそうか、
@Guest 36:10
定数を使い、使わなくてもいいて、ちょっと確かに目からでしたね、確かに言われてみればそうですね。さですね、うん、ありが
@Guest 36:19
最近すごく流行りって話題のあの、esビルドっていうのもgで書かれてるんですよね。確か
@Guest 36:25
ああ、確かに
@Guest 36:28
エヴァさんのなんかそうですね。結構ウィルドツール、あ
@Guest 36:37
はスタティックサイト、ジェネレーターも結局ビルドツールの分類に入るんですけど、ビルドツールがそのビルドスルソース言語でかか。
@Guest 36:47
寝なきゃいけないということはもう全然ないので。むしろ今までなんで
@Guest 36:53
他の言語で書かれてなかったんだろうと思うくらいなんですけど、やはりな。まあ、メテメではやはり
@Guest 37:01
そういうのを使っている人たちがこうプロジェクトに参加してくれるという比率考えると、うちのジャワースクリフトで書いた方がえっといいかもしれないですけど、
@Guest 37:11
ま、昨日だけ考えると、ほんとにssgssrとか他のじゃなくて、もうほんとにssgだけでしたら、もうファイルを読んで、ファイルを
@Guest 37:21
書き出せたら、もうそれで終わりの話なんででま。結果的な話だと、自分
@Guest 37:31
今の今もブログを書いているんでま。技術ブログじゃなくてま、個人のブログなんですけど、
@Guest 37:38
ブログ今はssgで動いてないですよ。実はあの、もう普通にサーバー立てて、
@Guest 37:47
まデータベースからあの内容読んで、で、それをhtmlファイルとメタデータみたいなのをjsonとして書き出して、それは別の
@Guest 37:57
方法でギットハーブにあのバックアップはしてるんですね。あの、クローン使って、それをバックアップするような人に
@Guest 38:06
プッシュしてくれるようなスクリット書いて、もしなんかサーバーが死んでしまった場合、その内容はジョンとして残るようにしてるんですけど、まあ、使ってるのは
@Guest 38:17
普通なサーバーでま。ブログの場合、結局前にクラウドフレイア挟むともう爆速になるので、
@Guest 38:25
実は伝えて、サイトじゃなくても、もう同じくらい早いというか、もっと早いかもしれないというところですね。
@Guest 38:35
そうですね、勉強になります、
@Guest 38:40
ありがとうございます他に皆さんからご意見や質問等ありますか。
@Guest 38:51
では、一旦こちらでということで。じゅんさんありがとうございます、
@Guest 38:55
ありがとうございました。
@Guest 38:59
続いてえふょさんの方にえ、ロコンについて発表いただきましたがよさん軽くltの内容について説明いただいてもよろしいでしょうか。
@Guest 39:08
はい、私のltではですね、ま、片安全なルーティングっていう概念をま、視聴者の皆さんにご紹介して
@Guest 39:16
ま。それを実現するために、私が作ったルーティングライブラリとして、ロコンというのを紹介させていただきましたこの
@Guest 39:26
片安全なルーティングというのがですね、ま、urlの中からパラメーターを取り出すところが片安全であるとか、
@Guest 39:33
なんか、リンク先のurlを書くところが片安全になっている。つまり、なんかタイプとかそういうミスしたら、ちゃんと全部片エラーで防いでくれる。
@Guest 39:42
なんか、そういうことになっていたら、嬉しいよねっていうのを、まず
@Guest 39:46
皆さんに共感していただきたくて、まあ、その辺りを頑張って話したかなと思います。
@Guest 39:53
ありがとうございます。そうですね、あの、なんか問題点を何点かスライドの方でも挙げられていました。けど、まさにその通りだなっていうのが多くて、
@Guest 40:02
ちょっと困ってたんだよねっていうのが正直なところだったので、ロコンという選択肢は私全然知らなかったんですけど、あ、そういう選択肢もあるのかと思って、ちょっと勉強になったなと思っていました。
@Guest 40:15
はくらさんこの後、発表いたかなくさんの方の発表との内容でも出てくるぐらいのライブLINEなので、
@Guest 40:23
すごい面白く、2つ対比させて聞かせていただいて、楽しかったなっていうのが正直私の感想です。
@Guest 40:30
皆さんの方から、何かご意見、ご感想等あれば伺いたいんですけれども、ぜひじゃあ、花倉さんの方から伺ってもよろしいでしょうか。
@Guest 40:37
あ、聞いちゃいますか。そうですね、僕はまあ、あのスライドを見てこう。ロコンの詳細を知ったという
@Guest 40:47
いうのもあり、あと、その後なんかtwitterとかで結構話してた時に、なんか実はこう。ステトの方とか、そういう課題があったじゃないみたいなこう話をうさんとしたんですけど、
@Guest 40:58
あ、なんかそこら辺含めてあ、なんかこう自分の知らない。なんか、
@Guest 41:04
僕も同じ型安全なる歌を作ったんですけど、こう。なんか自分の知らない問題になんか立ち向かっていて、あ、なんかウェブって広いんだなっていう気持ちになりました。
@Guest 41:13
雑な感想ですが、そうですね、いや、はい、なんかすごくためになりました。
@Guest 41:18
そう、私も結構同じこと思いまして、そうはなくさんの発表始まった時、自た自作ルーターライブラリです。って言われた時、えって思ったんですけど、
@Guest 41:30
ま、同じ型1回同じカでのルートライブラリ。でも、やっぱり結構動機とかモチベーションが実は違ったりするんですよね。
@Guest 41:39
ていうのは、本当にその後お話してて思いました。だからは一見して同じだけど、実は
@Guest 41:46
なんか思想が全然違ったり、その結果として、なんかAPIの見た目も違ったりとかして、いや、同じ感想ですけど、ほんとには広いなって思いましたね、
@Guest 41:57
ありがとうございますはい、この皆さんはいかがでしょう。
@Guest 42:01
1つちょっと聞いてみたかったんですけども、あの、
@Guest 42:05
というか、聞いてみたかった内容が実は全で今日公開されてたっていうところもあるんですけど、あの
@Guest 42:13
1回そのテンプレートリテラルがタイプスクリプトで出た時、結構ルーティングライブラリーで使えるんじゃないかな。っていう旅館を
@Guest 42:23
してたんですよ、やっぱり、現状なかなか難しいんですかね、結構
@Guest 42:29
なんて言うんですかね、その頑張ればできるけど、すごい開いちゃいけない扉を開くのかもっていう、そういうなんていうか、天プレーとリテラルを
@Guest 42:39
馬をしてやらないといけないのかなみたいな。
@Guest 42:43
ま、多分、テンプレートのリテラルでも、ある程度まではきちんと行けるんだと思います。
@Guest 42:49
なんか、もうちゃんと再利用可能な形で、ライブラリみたいにして、公開されている
@Guest 42:55
そのカレベルなんか、urlパーサーみたいなのもちゃんと存在してまして、
@Guest 43:02
そう。それがまさにこの前私が公開したその型安全ルーティングに関する記事でも、ちょっと紹介したものなんですけど、
@Guest 43:10
ていう感じでまそのts4.1のテンプレート、リテラルタイプでも、ある程度いけるという気はしてます。
@Guest 43:18
ただ、どれくらいスケールするのか、ちょっと怪しいなって個人的に思ってますね。なんか、カレベルの計算重そうじゃないですか、確かに
@Guest 43:27
それは思う確かですね、
@Guest 43:30
真面目にやると、なんかでかいユニオン型みたいなのが発生するとでかいオン型って、タイプスクリットのコンパイル速度を落とすんですよ。
@Guest 43:38
なんかそうですね、
@Guest 43:41
あ、その辺がどれくらい上手くいくのか、ちょっと心配だなって思ってます。
@Guest 43:47
大体型型推論の強い言語は、コンパイル、時間が長くなるっていう仕組みが。
@Guest 43:53
そうですね。
@Guest 43:55
まって考えると、やっぱりそのオブジェクトベースっていうのは、やっぱりやまあ、安杯っていう感じはしますね。
@Guest 44:06
個人的にはまあ、1番王道なやり方かなっていう風には思ってま。
@Guest 44:11
あの、まあタイプ、安全なルーティングという中で、タイプ、レベルルティングというのもあるんですけど、
@Guest 44:20
うん、ご存じでしたりしますかね。
@Guest 44:26
こういう、あの、ちょっとチャットなに共有さ
@Guest 44:31
いただいたんですけど、タイプスクリプトだと、リタラル文字列、リターラルとかで作って、実装できるじゃないかなというう
@Guest 44:44
のが、は、いまは実際作れるのかわかんないんですけど、タイプ。
@Guest 44:51
リタラルタイプというタイプ自体に文字列は入れられるんですよね。それで、メタプログラミングで、
@Guest 44:59
ルーティングロジックを再生して、なんとかなるんじゃないかな。というなんか
@Guest 45:09
のがちょっとあったんですけど、なるほど、もしもしよければちょっと見てみていただいてもいいんじゃないかなと思います。
@Guest 45:18
あの、結局めったプログラミングで良さ悪さあるんですけど、まあ、タイプ安全な行動がすごい簡略に
@Guest 45:27
簡単に書けるというのはあるんですけど、その中身はどういう風に動くのか、もう完全にブラックボックスになってしまうという。あと、問題もありまして。
@Guest 45:38
でも、まあ、もうちょっとこう綺麗に書きたいとなった時に、役立つかもしれないと思います。
@Guest 45:45
なるほど、ただ、ちょっとタイプスクリプトのエコシステムに1つ特別な事情がありまして。
@Guest 45:53
なんか、タイプスクリプトって、カー情報から、なんかコードが生成されないんですよ。
@Guest 46:01
うん、タイプスクリプトにしろ、バベルにしろ、なんかタイプ。スクリトからjavaスクリフトへのコンパイルっていうのは、ただカ情報リムーブするだけなんですよね。
@Guest 46:11
はいはい、
@Guest 46:13
だから、型を書いたから、その型の通りに動くっていうのは無理で、絶対に実装がないといけないんですよ。
@Guest 46:19
それがちょっと。例えば、ピアスクリットとか、ハスケルラスト。その辺りの方が強い言語とは、ちょっと違うところなんですよね。
@Guest 46:28
そうですね、コンパイラti使って、うん。
@Guest 46:33
自分でそういうツールを作るとはできるかもしれないんですけど。そうですね。そうですね、オーバーキルですね。うん、
@Guest 46:39
あ、でもいたらそう。あ、そういうコンパイレーピアを使って、コード生成するって方法で、パターンゼルーティングをやろうとしてる人は実際いますね。
@Guest 46:52
はい、それがまさに私の記事でこの間紹介したパスピーダっていうのが、その1つですね。
@Guest 46:57
あ、はいはいはいはい
@Guest 46:58
はい。パスピードはそのファイルシステムベースのルーティングに対して、高生成でなんとか片安全にしてあげようというやつで、
@Guest 47:06
さすがにタイプスクリストの型システム、ファイル、システム読めないので、行動生成じゃないとちょっとファイル、システムベースのルーティングには立ち打ちできないところがあって、
@Guest 47:16
そこで、実際コンパイルペアを使うっていう選択をしてる人たちもいます。
@Guest 47:23
なるほど、多分ウェブパックとかといったエコシステムま、ビルドストリームに。
@Guest 47:30
それを挟み込むことはできると思うんですけど、多分、それからなんか、エレターの
@Guest 47:36
自動完成とかするのは大変だと思うんですけど、ちゃんと動くんですかね。そこら辺は
@Guest 47:43
まあ、
@Guest 47:44
どうなんだ。なんか
@Guest 47:45
あの型を動的生成して、うんたらしてる例としては、まあ、なんだったっけ。ブリッツについてるあ、プリズマだ。なんかプリズマとかすごくうまく。なんかうん。別のコードから型定義を生成して、なんかそいつを
@Guest 48:01
なんか、アプリから使ってる方に組み込むっていうのがすごく上手くいってるので、多分あそこらへんっぽい仕組みを使う使うと、
@Guest 48:08
なんか動的か片手にせせかつ。なんか、そういういい感じの方も通って、ランタも生成できてみたいなことはまなんか
@Guest 48:16
できそうだな、なんか大変だからあんまりやりたくはないけど、みたいな雑な感想がありますね。
@Guest 48:23
確かになるほど、ああ、プリズムはもう完全にdslみたいなのがあって、そこからもコード生成するんですね。
@Guest 48:32
はい、そうですね、プリズマン1回触ってみたんですけど、すみすげえ、めちゃくちゃ綺麗な片定義をしてくれるので、
@Guest 48:38
あ、あ
@Guest 48:39
まなんか結構ど敵方先生。なんか、これから遊んでくる人たちがいっぱい出てきそうな気がしますね。
@Guest 48:46
ま、考えてみると、grpcみたいな。あの定義からフロントエンドの方定義とか
@Guest 48:53
再生する例っても常にあるので、そんな珍しい使い方ではないかもしれないですね。
@Guest 48:59
はいはいはい、なんかオープンAPIとかから、なんか片手作りたいって言ってる人たちは、結構昔からちらほら見かけているイメージがあります。
@Guest 49:08
いいですね、こういうdslが生まれる流れ
@Guest 49:12
すごいや、
@Guest 49:13
時代が繰り返してる感があって、
@Guest 49:19
これ、あの、その出力先がタイプスクリットっていうのはすごいあれですよね、今っぽいですよね、
@Guest 49:25
そうですね、
@Guest 49:27
乾燥です、
@Guest 49:30
ありがとうございますじゃあ、続いてこの流れで花くさんの方に
@Guest 49:39
ルートの選定や、自作ライバリーについてのお話いただいたんですけれども、じゃ、内容について説明いただいてもよろしいでしょうか。
@Guest 49:45
はい、
@Guest 49:46
僕のスライドの発表では。まあ、なんか昨今どヤトのルーター事情ってどうなってるんだっけ。っていう話をして、まあ、なんかこういうケースでは、なんか
@Guest 49:57
リアクトルターとか雑なルーター選べばいいよ。とか、こういうケースだったら、もうネクストジェースにしろとかっていう話をしたんですけど、
@Guest 50:05
まという流れの上で、まあ、僕はネクストゼースをちょっとやんごとなき事情で使えない。まあ、歴史的経緯なんですけど、歴史的経緯で
@Guest 50:14
使えないので、まあ、ルーターを作りました。っていう話をまさせていただきました。はい、で、なんか僕の作った
@Guest 50:22
ルーターも、結構結構っていうか、ま、片安全をすごく意識した作りで、でま結構イベントにまに合わせるために、作りかけだったルーターをなんか
@Guest 50:31
めちゃくちゃな勢いで、なんか仕上げてえって出したんですけど、
@Guest 50:36
まあ、そうですねうひょうさんの話とかいっぱい色々聞いてたら、なんかああ、全然機能足りねえやって思って
@Guest 50:42
ま。その後もいちくちく。なんか本番に本番っていうか、実際のプロダクトに
@Guest 50:48
で、なんかリアクトルーターをフルートに置き換えながら、なんか色々機能とか、なんか問題の調整を行っているっていう感じです。
@Guest 50:56
あで、これは完全に自慢なんですけど、テンプレトリテラルタイプスでルーティングができるようになりました。まだ、開発中のバージョンなんですが、い
@Guest 51:07
まなんか結構オプショナルパラメーターとか入ってくると結構厄介な感じになるんですけど、ま、それでもなんか割合。なんか
@Guest 51:17
ururl。なんか、パスネームをぺってか書いたら、なんか、肩が大体できて、みたいな感じで、なんか通ったんで。
@Guest 51:25
テンプレート、リテラルタイプスをみんな使いましょう。あの、治安の悪いことをどんどんやりましょう。
@Guest 51:32
はいま、なんかざっくりとそんな感じですね、
@Guest 51:36
ありがとうございます。じゃあ、先ほどの流れの反対で、次はうひょさんに
@Guest 51:42
倉さんの発表を聞かれて、感想とかあれば伺いたいなと思うんですけど、いかがでしょう。
@Guest 51:48
そうですね、まあ、先ほどもちょっと言った通り、やっぱり違うモチベーションで、ルーターライバーがポンポン生まれてて、ちょっと面白いなと思ったのが、まあ素直な感想でして。
@Guest 51:58
なので、ちょっとその違いのとこに触れさせていただくとはくらさんの白書で、なんか、
@Guest 52:03
プリローリングとか、ssrみたいなkワードが結構出ていたような気がして。
@Guest 52:09
はい、それが自分にはなかった視点なので、もうちょっとその話を聞けると嬉しいんですけど。でも、
@Guest 52:17
ああ、なるほど、ssrマリカま。そうですね。僕が今担当してるブルドハブっていうプロダクトにえ、結構依存し
@Guest 52:27
した話ていうところが大きくて、そのブルードハは、今リラックスとあと、なんか頑張って書いたの。なんか、
@Guest 52:38
自前のノードのコードで動いているんですけど、
@Guest 52:41
結構そのリアクトルーターとかを使っていると、どうしてもなんか、リアクトの中になんかルートを定義するっていうのが、なんか、そもそものリアクトルーターだし、なんか、リアクトルーターコンヒングとかになっても、結構ブリロードとかはなんか
@Guest 52:54
こうサポートなんだろ。一応ま自前でやったのでできるんですけど、結構あんまり
@Guest 53:00
なんか光光のある感じじゃなくて、結構闇っぽい感じだったんですね。でというところで、まあなんか
@Guest 53:09
っていうのと、あとだいなコンポーネントのダイナミックインポートとかを押して、バンドルサイズを下げたかったんですけど、それもちょっとリアクトルーターを使っちゃうと、あれなんですね、
@Guest 53:19
なんだったっけ。
@Guest 53:21
ローダブルコンポーネントだったっけ。なんか、結構その行動変換して、なんかインポートとリアを分けるみたいな。結構病っぽい技術に手を出さないといけなくて、
@Guest 53:30
へえへんで
@Guest 53:31
でまそこらへんやればできるんだけど、なんかどんどん。なんか、ウェブパックとかがこうのメンテコストが上がっていくので、なんかやりたくないよっていう気持ちがずっとあり
@Guest 53:41
っていうところで、そのssrもちゃんとできてだ。なんか、コンポーネントのダイナミックインポートもちゃんとできて、なんかでまそ
@Guest 53:48
で。それで、ちゃんとプロダクションで動くルーター欲しい。欲しいと思ってたんですけど、なんか全然出てこなかったので、もうなんか作っちまえって感じで
@Guest 53:56
作ったというのですね。っていう、まあそのなんだろう自前でssrのこわし回りを色々ややってて、なんかそいつらをなんかちゃんと
@Guest 54:06
まとめて出したかったが、故に結構ssr色が強いみたいな感じになっています。
@Guest 54:15
なるほど、とても参考になりました。個人的にドキュメント見て、なんかまずステータスコードっていう概念が目に入ってきて、おおってなったんですけど、
@Guest 54:24
はい、あれももうほんとに結構プロダクトコードから来てるやつですね。
@Guest 54:29
あの、そうですね、あの、レスポンスコードとか、リダイレクトとかはなんかが。フルートだと、リアクトのコンポーネントの中からやるみたいな感じになってるんですけど、
@Guest 54:41
あれも結構そのブイルドハブを開発し始めた初期には結構議論があって、あの、404のルーティングって、アクションクリエイターでやった方がいいんじゃないかとか。なんか結構色々
@Guest 54:52
混んでいたんですけど、結局まリアクトルーターも確かそんなようなあ、違うリアクトルタなかったかもしんねえな
@Guest 54:59
ま、なんか結局状態選んで、なんか必要な状態全部集めて表示できるかどうか決まるのってコンポーネントしかなくて、
@Guest 55:08
で、まあの、アクションクリーターとかのルーターコンテキスト取り回すのもめんどくさいし、えっとで、そのそのページが表示できるかどうか
@Guest 55:18
っていうのの判定。ロジックも、そのコンポーネントと。
@Guest 55:21
まあ、関数とか切り出してもいいんですけど、まあ、絡んでくる状態が普通に多くなってくると、セレクターの量が多くなって、めんどくさいので。
@Guest 55:29
っていうとこで、なんか結構ドライな設計にしようみたいなところを考えると、まあ、多分コンポーネントの中で、リダイレクトとか、レスポンスコードとかを返すのが1番。まあ、なんかシュッとしてるよねっていう感じで、なんか、こういうコンポーネントが入ってるっていう経緯があります。
@Guest 55:45
うん、確かに確かにって思いました。
@Guest 55:50
はい、なんかこうろんえ、なんか、リアクトルターとssアの地獄はなんか一通り舐めてきたので、
@Guest 56:03
それがちゃんとライブライドして、まとまってるのがとても素晴らしいと思いました。
@Guest 56:07
はい、ありがとうございます
@Guest 56:11
まあ、そうですね、なんか結構プロダクションに入れたら、まあわちゃわちゃか結構いろんな足りない機能とか。まあ、なんか
@Guest 56:18
まあバグってるやつとか色々出てきたんですけど、まあ、それも今0.2.0を開発していて、ま。一通り。なんか
@Guest 56:26
プロダクトのコードがなんか動き始めたので、まあ、多分
@Guest 56:31
これ。
@Guest 56:31
早ければ、今月中には多分メジャーリリースしていいかなみたいな気持ちでいますね。ま、なんか最新
@Guest 56:39
最新版では、もうさっき言ったテンプレートをリテラルタイプスでも、えっとすらコロン。なんか、変数名みたいなの書いとくと勝手に方ができるの
@Guest 56:50
とか、あと何が入ってたっけな。あと、なんか、単体のパスマッチとかの改善なんか、使いやすさの改善とか。あと、
@Guest 56:58
そうですね、ネクストジェースと、なんかんと若干五感のあるユーズルタフックが入ったりとか、
@Guest 57:04
なんかこれはもうこれもvdハあ、よく、ネクストジースしたいっていうモチベーションがある上でのなんかど機能導入なんですけど、
@Guest 57:13
あの、ネクストジェースと完全五感ではないけど、ネクストジェースのなんか、ゆずるタフクの一部の機能が使えるよみたいなフックを入れることで、多分なんか
@Guest 57:22
多分あのうちみたいにそういうなんだろう。ネクストェイスになりたいんだけど、なんか、既存のそういうssrを自前でやってるプロダクトとか、なんか、ここらへん
@Guest 57:32
きっかけでフルートに乗っかえて、でもゆる。たしか使わないようにして、最終的にネクストジェースに移行するみたいな
@Guest 57:40
パスができると、なんかこうおいしいなと思っています。
@Guest 57:45
あ、なるほど、そういうことだったんですね、なんで急にそんなかんじでもない、ネクストjapが生えてんだろうってちょっとこの前見て思ってたんですけど、
@Guest 57:52
そうです。リアクトルターから、ネクストjsへの移行のステップとして、なんか
@Guest 57:58
ワンチャン入れたいで、あとは、これでネクストチェイス側もさっきなんてなんて言ったやつだったっけ。たせたシ
@Guest 58:06
あ、パスピリアあ、パスピーダか
@Guest 58:08
そのパスピーターとか、そこら辺使って、ネクストジェースの片定義を生成しつつ。ユズルターに後からなんか肩を付け加えるみたいなところまでできると、なんか、
@Guest 58:19
あ、もう完璧に勝ったなって気持ちになれるっていう。3弾があ、3弾があって、なんか急に入ってるという次第でございます。
@Guest 58:31
うん、うん、
@Guest 58:33
はい、ちょっとせこの文脈が深くて難しいやつでしたね、
@Guest 58:39
すごい面白いお話でした。
@Guest 58:41
はい、じゃあ、
@Guest 58:42
支度のもちゃんとプロワーさんに投入できて、改善を回せるってのが羨ましいですね。ちょっと
@Guest 58:48
まま、ちょっとここはもうそうですね、結構チームの体制によるというとこですね。多分、ふく複数人開発をしていたら、あんまり
@Guest 58:56
大を振ってはできないんですけど、今のところ結構フロントエンドのあの足回り。担当が僕しかいないので、
@Guest 59:03
もうなんかえいやって、なんかちゃんとちゃんと動くの確認したから入れるねっつったら、なんか入れれちゃうみたいなこう状況があって、まあなんとかってるっていうところなんで、ちょっと
@Guest 59:12
政治的な。あれはちょっと難しいかもしれないです。なるほど、はい、という感じです
@Guest 59:22
とても面白いお話ありがとうございます。
@Guest 59:27
twitter上で多く、反応寄せられてたのが、あのバーチャルな体で、今回登談いただいたっていう件について、すごい多くの方に反応いただいてたんですけれども、
@Guest 59:37
ライトニングトークって、ああいう。なんか、インパクトのある発表スタイルっていうのは、すごい武器だなと思ってるんですけれども、あの辺りって普段からされてたりするんですか。
@Guest 59:46
いや、あれはもう完全にノリですね結構ライトニングトップ自体、多分表でやったの。なんかえ
@Guest 59:52
いつだろう。もう覚えてないくらい昔なので、まあそのその頃ってまずバーチャルな体とかなかったので、もうなんかノリですね。結構
@Guest 60:03
はいノリのノリとちょっとなんか深いし、宗教観によってあのltは構成されています。
@Guest 60:12
いや、すごい面白かったので、参考にしていきたいなと私は思いました。
@Guest 60:16
あ、はいぜひvroidsタジオというプロダクトを使って、アバターを作ってみてください。
@Guest 60:21
はい、ありがとうございます
@Guest 60:23
今のはカットしてもいいです。
@Guest 60:30
いや、めっちゃまとままとまった感がある。
@Guest 60:41
はいはいというわけで、今回はフロントエンド、紅白ィリティ合戦アフターショーについて話してきました。
@Guest 60:48
LINEのフロントエンド開発組織UITでは、このようなフロントエンドに関する議論や、キャッチアップを日々を行っております。えー、ビュー3サディなど
@Guest 60:57
社内の学習企画から始まったコンテンツも多くありますので、今後も発信していければと思っております。
@Guest 61:04
また、ポットキャストを通じて、ラインに興味を持っていただけた方は、ぜひカジュアル面談からでも、ご連絡いただければと思います。
@Guest 61:13
株に求人の方の連絡先を掲載しておりますので、お気軽にご連絡ください。では、最後に皆さんに今年の抱負ですね、ぜひ
@Guest 61:22
一言ずついただければなと思います。発表中に、また、玉田さんからお願いできますでしょうか。あ
@Guest 61:29
あ、はい抱負ですかはいはい、抱負はそうですね、引き続き
@Guest 61:42
ありがとうございますなるピーさんお願いします。
@Guest 61:46
はい、今年の抱負は
@Guest 61:49
えー
@Guest 61:50
なんだあ、新しいそのデザインシステムの設計方法とかを
@Guest 61:56
ま。今年は色々試していけたらいいかなと思ってます。はい、
@Guest 62:01
ありがとうございますじゃあ、次はいむさんお願いします
@Guest 62:07
はい、そうです今年の抱負はまあ去年、去年が初めてまあlt登談したというとこで、今年は
@Guest 62:17
2回2回登談目指しては、
@Guest 62:21
その変なはいまっていうのは、まあ、ちょっと置いといてま。本当の面で言うと、なんか結構こういう
@Guest 62:28
cssだったり、まあ、ルーターだったり、なんかいろんな技術がちょっと。ほんとにフロントエンドは目は苦しいというか、
@Guest 62:36
で、まずはそれをにひっついてって、ちょっとまずは生存生存していけるように、ちょっと頑張ろうっていう感じです。
@Guest 62:43
はい
@Guest 62:45
はい、ありがとうございますじゃあ、続いてじゅんさんお願いします。
@Guest 62:49
はい、今年から実はあのパルシシプログラムになりまして、終止ま。陰性になったんですけど、それを
@Guest 62:59
頑張っていくのと、今ちょっと新しく興味がある分野がありまして、そこで何かの結果を出したいです。
@Guest 63:10
ありがとうございますではようさんお願いします
@Guest 63:14
はい、ちょっと壮大な話ですけど、やっぱりなんか新しい概念を作っていきたいなっていう風に思ってますね。
@Guest 63:20
例えば、今回話したルーティングの型、安全性っていう概念も、これまで考えたこともなかった人がま、結構いると思うんですよね。
@Guest 63:29
なんか、そういう感じで、なんかこれまでみんなが知らなかったような。新しい概念をなんか作り出すのに発見するなりしていて、広めていけたらいいなという風に思います。
@Guest 63:40
はい、ありがとうございますじゃあ、最後にはくさんお願いします。
@Guest 63:44
そうですね、今年の抱負、うん、この世の全てをやりたいというところですか。
@Guest 63:51
まあまあまあというのは冗談、冗談冗談なのかな。いや、なんかまあ
@Guest 63:57
は9割くらい冗談なんですけど、そうですね。今年は結構そのフルートとかが属してるフルルっていう、なんか、オカンデーションがあるんですけど、
@Guest 64:06
あそこらへんのパッケージ充実させて、フロントエンドの全てを解決していきたいですね。なんか、もうフロントエンドめんどくさすぎるので、あのま、結構ネクストとかぶり
@Guest 64:16
とかの成長もあるんで、あそこら辺ともなんかペース合わせつつ、なんかこう君たちこかいでしょかいてあげるよみたいな、
@Guest 64:23
そういうライブラリをね作って、この世の全てを解決していきたいですね。はい、そんな感じです
@Guest 64:31
はい、ありがとうございました。今回はフロントエンド、紅白ティ合戦、アフターショーをお送りいたしました。
@Guest 64:37
はさん、高のりさん、磯村さん、じゅんさん、うさん、花倉さんどうもありがとうございました、
@Guest 64:43
ありがとうりがとうございました、
@Guest 64:45
ありがとうございました
@Guest 64:46
あ、お願いします。
