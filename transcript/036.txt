@Guest 00:00
はい、こんにちは
@Guest 00:03
こんにちは
@Guest 00:04
今週もUIT INSIDEをやっていきましょう。え、まず、初めにこのポッドキャストについて説明いたします。
@Guest 00:12
このポットキャストは、ユーザーインターフェースと、テクノロジーを愛するエンジニアたちが、毎週最新のフロントエンドの動向について語るためのポットキャストです。
@Guest 00:21
最新のウェブ標準の投稿や、開発フレームワークの変遷、またまたurやウェックに関することまで、最終のトレンドを
@Guest 00:30
キャッチアップすることを目的としています。え、また、このポットキャストについてのえ、ご意見やご感想もお待ちしております。ハッシュタグ
@Guest 00:40
シャープ、UIT、アンダースコアインサイト
@Guest 00:43
シャープUIT、アンダースコアインサイドでつぶやいていただけると、今後のコンテンツ作成の参考にさせていただきます。
@Guest 00:51
今回はですね、uyt所属のジェーサーであるえ、ハルサと。今回はゲストでえ、チェサさんのえ
@Guest 01:00
をお呼びして、え、お送りしたいと思いますそれではよろしくお願いします。
@Guest 01:06
まずはですねえ、チーサーさんは、ユアtの収録が初めてですので、まず、初めに自己紹介をお願いしてもよいでしょうか。
@Guest 01:18
はい、セーサーです社内サービスをLINEでは取り扱っておりまして、プライベートクラウドが存在してるので、
@Guest 01:27
まあ、それを使うためのなサービスを提供してるという風な形になります。s3ライクのあの、アップロードを行うためのsライクのセフというものはあるんですが、
@Guest 01:37
ま、それに、アップロードを行うためのcliだとか、
@Guest 01:40
パースみたいなものは、実際にあのインフラのチームから提供されていないので、簡易的なパースノートのパースのcliと、まあ、バックレンドとかを作ったりしている人間ですね。
@Guest 01:50
あの、開発メンテを一通りやっている、という風な形になります。フロントエンドのまあ、部署には所属してるんですが、
@Guest 01:57
まあ、なんか今話した通りにメインでやっているのは、まあ、ノードを使ったバックエンドだとか、
@Guest 02:03
社内のプライベートクラウドを操作したりだとか、インフラをまインフラみたいな業務をやっていたりだとかする。まあ、かなりのかわ分類される人間ではあります。
@Guest 02:13
じゃあ、そうはいはい、UITとはいつつ割とその業務内容的には、フロントエンドっていうよりは、まあ、フロントエンドのためのバックエンドみたいな
@Guest 02:23
感じ。
@Guest 02:24
そうですね。はい、サポート業務的なツールをひたすら作っているという風なところですか。はい、イメージとしては、はい
@Guest 02:33
で、オフではまあまあこういう風なところもあって、javaスクリプトを書いてるというよりは、まあ、ラストをメインにやっておりまして。
@Guest 02:41
まあ、最近だとなんかワズムでまあ動くラストラスト性の簡易的なjvの作ったりだとか。まあ、
@Guest 02:52
なんだバをたたとな。リクエストを送って直したとかっていう風なことをしております。なんかす、
@Guest 02:59
ラストフォーマット自体は、最近はあまりちょっとあの活動自体が止まってしまっているので、
@Guest 03:05
あのあまりさ。ここ12か月で、リクエストはあまり投げてはいないんですが、昨年はまあだいぶ投げました。いや、
@Guest 03:11
あ、なんかさらっとすごいことを言われたと思うんですけど、結構ラストじゃあラスト
@Guest 03:17
が割とす趣味ではもう目バリバリと書かれてる感じですかね。
@Guest 03:22
そうですね、ほとんどラストばっかり書いてるような感じになってしまってますね。ここ最近はあ、そうなんですね、
@Guest 03:31
業務で使えたらなんていうちょっというところではありますが、
@Guest 03:36
まあ、なかなかね。
@Guest 03:37
いや、使う仕事を作りましょう。
@Guest 03:40
そうですね、
@Guest 03:44
じゃあ、はい、まあそんな感じのはい、じゃあ、チェサさんに今回来ていただいたんですけど、も、
@Guest 03:51
今回のテーマです。はね、りゅう
@Guest 03:56
ビューススタリーのま、第3回目ということで、今回はコンポジションAPIについて、紹介していきたいなと
@Guest 04:05
っています。で、まあしえー、コンポリーションAPIについては、第1回でもちょっとお話したんですけれども、
@Guest 04:13
まあ、どういった感じで、このAPIが導入されることになったのかとか、まあ、
@Guest 04:19
具体的な内容とかちょっと知りたいので、ちょっと説明してもらってもいいですか。
@Guest 04:24
はい、まあ大雑把に行ってしまうと、
@Guest 04:28
まあ、関数ベースのAPIを提供して、まあ、柔軟に病院系とかよりも、柔軟に実装ができるようになりましたよ。という風なところなんですが、
@Guest 04:37
具体的にはまあ3つぐらい注意しなければいけない点があるんじゃないかなと考えております。
@Guest 04:42
1つ目がまあ、セットアップという新規の関数がそのを作りまして、まあ、基本的にはそこに全ての処理を書いてほしいで、
@Guest 04:50
そのセットアップという風な関数の中では、今までビーだとディスプロックスだとか、
@Guest 04:56
ディスなんちゃらみたいな感じで、ディスをベースにやっていたと思うんですけど、ディスを使ってはいけないで、最後にまあ、データ関数であったと思うんですけど、
@Guest 05:06
あのデーターなどを扱う際には、まあリアクティブだとか、レフだとかっていった関数を提供しているので、それを使うといった形になります。
@Guest 05:14
セットアップについてなんですけど、まあ、セットアップという関数が新規に提供されまして。
@Guest 05:20
うん
@Guest 05:21
で、牛能のモジュールから、コンピューテットとか、オンマウンテトだとかいう風なメソットがインポートできるようになっております。
@Guest 05:29
テンプレートで、実際に扱いたい値だとか、そういったものを、そのセットアップという関心の中の
@Guest 05:38
リターンで返すというな形になります。マウンテットだとか、クリエイターとかのライフサイクルの通し込みたい場合は、そのセットインポートした
@Guest 05:51
メソッドをセットアップという関数の中でじ実行する引数として渡して、実行してやるという風な形になります。
@Guest 05:58
はい
@Guest 05:59
はいでリスを使わないっていう風な話になりますと、じゃあ、プロップスとかどうするのよとかいう話になると思います。で、
@Guest 06:08
それでなんですが、セットアップの引数として、新規に2つ渡されるような形になっております。で、第1指数がプロックス、
@Guest 06:17
第2引数がコンテキストというものです。まあ、プロップスはプロップス直で特に説明する必要がないと思うんですけど、
@Guest 06:25
コンテストザっていうのが、今までのあのコンテキストとの中にアトリービールドだとか、エミットだとか、スロットだとか、色々入ってるわけですね。
@Guest 06:33
今までのダラアトリアトラス、アトリビーツ、あだらエミッツダラスロットみたいなのが、全部コンテキストの中に入ってるという風な形になります。で、最後のあのデーターの代わりにま
@Guest 06:44
リアクティブな値を使いたい場合は、レフトリアクティブを用いるという風なところなんですが、まあ、
@Guest 06:48
レフはプリミティブな編集リアクティブは、オブジェクトをメインに使ってっていう風な話になります。今までもそうだったらしいんですが、まあ、データ関数でリアターンしたものっていうのは、暗目的にリアクティブ関数を実行したものとして、扱われてるらしくしくて、
@Guest 07:03
まあ、データ関数がなくなる代わりに、リアクティブ関数を直接使ってねっていう風な話になるっていう風なところ、認識だという風に考えております。はい
@Guest 07:12
はい、ありがとうございますそうですよね、あの、まあ僕もまあえ。そのコンポジションエピアについて、ちょっとおさらいしてみたんですけれども結構
@Guest 07:22
なんですか。その、だいぶそのビュースの中で1番
@Guest 07:27
大きな変更というか、まあ、1番変わるところの1つでもあるなという風に思いました。で、まあそのなんていうんですかね。セットアップ関数をまベーストした。
@Guest 07:37
まあ、リアクトに立てると、リアとフックに近いような、なんなんて言うんすかね、その宣言的なまあ、
@Guest 07:46
APIと言いますかね。そういう、そういうま、これまでとり、とにかくこれまでのビのま定義の仕方とは、だいぶ違った
@Guest 07:55
おっきな変更になりますよね。
@Guest 07:58
そうですね、なんかあ、正直原型があり、あま
@Guest 08:05
ちょっとだいぶ変わってますよね。うん、
@Guest 08:08
あ、確かにそうですよね、なんか、パッとに理由っぽくない感じは、多分皆さんが来ると思います。はいはい、
@Guest 08:16
一応もう少し説明をさせていただきたいと思ってましては、イチベーションの方なんですけれども。
@Guest 08:22
まあ、今まであのビューっていうとま、大規模プロジェクトより使いにくいという風な話がちょろちょろ上がってますし、まあ、コードの家族性だとか、まあ、テスタビリティを上げたいな、という風なところがモチベーションとしてあるとうです。また、あのロジックの採用性がまあ、多分これはディズニー
@Guest 08:36
べったりと、ロジックがくっついてのとはもう大きいと思うんですけど、ロジックの再利用性がちょっと悪かったので、コンポジションAPIを使うことによって、ロジックの再利用性を高めたいと
@Guest 08:46
で、同時に。これもやっぱりディスが原因だと思うんですけど、ま、肩のサポートがちょっと弱かったので、
@Guest 08:52
まあ、コンポレーションAPI使いことで、型のサポートが強化できればなという風に考えているという風なことが書かれております。
@Guest 08:59
うん、なるほど、そうですよね、結構まあそっか、ディスディスも今回なくなる、なくなる、ほぼなくなる、
@Guest 09:07
ほぼなくな
@Guest 09:09
形になるので。は。い、そこも多分そのなんていうか、モチベーションとかもまあまあってま。そういうAPIの変更が
@Guest 09:18
まあ、そんなコンポジションAPIなんですけども。まあ、私まま知識としてはしてたんですけど、まあそれしかなかったので、
@Guest 09:27
ちょっとま。ちょっとだけ。そのコンポリションを使ったアプリケーションっていうのをま、実際に作って試してみました
@Guest 09:35
ので、ま、その感想みたいなのをちょっとまず話していけたらなと思います。
@Guest 09:40
お、どんな感じでした。
@Guest 09:43
ま、今回そのビーツビュースを実際に使ったわけではなくて、ビツと
@Guest 09:49
ビの公式が提供する。コンポジションAPIのプラグインが
@Guest 09:54
ありましたので、ま、それを組み合わせて、流通の上でコンプリーションhiを使うっていう構成で、今回試しました。で、まあ
@Guest 10:02
ほんとにちょっとだけしかまだ触ってないんですけども、なんて言うんすかね。ま、最初の印象としては、結構
@Guest 10:09
APIが増えるんだな、いっぱい増えるなっていう感想を持ってたんですけど、もまそんなに難しくなかったなっていうのが第一印象でしたね。
@Guest 10:19
結構なんて言うんすかね、色々レフとか、ギャクティブとかいっぱいあると思うんですけど、も、はいはい、なんか
@Guest 10:27
あの、最初単位としてはまレフがあって、レフが更新されると、ウォッチが動くみたいなっていうのが、まあまず基本
@Guest 10:37
であってま。それを考え、それさえわかれば。なんか、リアクティブっていうのは、なんかレフのなんて言うんすか、集合体みたいな感じなんだな、とか。
@Guest 10:47
コンピューテップはレフの変更にまあ反映されて変わるものみたいな。そういう感じだったので、
@Guest 10:55
結構すんなりとわかりましたね。結構なんであんまり
@Guest 11:02
うん、あんまり悪い点みたいな荒探しみたいなのはするつもりなかったんですけど、特にそういうのもなくて、いいえ、ピアだなっていうのが印象でしたね
@Guest 11:12
個人的。あ、すいませんね、こち的な疑問なんですけど、はいはるさんさんは、以前にあのリアクトとかを使ったことっていうのはあるんですよね。
@Guest 11:21
あ、はい。
@Guest 11:22
あのだとすると、これって結構リアクトンのあのフックスに近いものがあるという風に思っていて、
@Guest 11:28
まさにまさにはい、
@Guest 11:30
なんか前提知識があるから使いやすかったんじゃないかなっていうのは、疑いは若干あるんですよね。
@Guest 11:37
確かにあ、じゃあすいません。リアフトフックスの知識があるものとの感想という感じで、聞き流してもらえれば
@Guest 11:46
すいません。なんか、上げアみたいな感じになってし、
@Guest 11:51
それは確かになので、ちょっと。まあ、人によっては感想が違うかもでも、私にとっては結構いい、いい気合
@Guest 12:00
じゃあ、後でそれもなんか比較とかもしてみますね。はい、で、そうですね、それが第一印象でした。で、結構
@Guest 12:10
色々とそのコンポリションAPIのページを見てもらっと、なんて言うんですかね。メリットみたいなのが書かれていて、あ、その中で1番
@Guest 12:20
なんですか。気になったのは、その機能ごとにそのコードがまとまって、
@Guest 12:28
そのモチベーションのところにもあったんですけども、その大規模な開発に使いやすくなるっていうところが、まあ
@Guest 12:34
えメリットとして言われてたと思うんですけど、もう結構ここはまさしく、
@Guest 12:40
このえ、コンポジションAPIによってやりやすくなるんじゃないかなっていうように思いました。セットアップ関数の中で
@Guest 12:49
なんですかね。せ、全て宣言するうん、うんので、なんて言うんですかね。今までだと、コンピューテットみたいな機能と
@Guest 12:59
がメソッツみたいな機能がすごい分離してて、うん、うん。この機能のコンプーテットはこっちで、この機能のメソッドは
@Guest 13:09
こっちにあってって言って、こう。あっちこっち行くみたいなことがうん、うん、うん、あったりしたっていうのがだいぶなくなるんじゃないかなっていう、
@Guest 13:17
うん、ここはすごいいい点だなっていう
@Guest 13:19
思いました。
@Guest 13:21
そうですね、あとあとはあ、そうですね。今回はそのタイプスクリプトをまあ使ったんですけど、も、はいはいまやはりさすが。
@Guest 13:31
まあ、新しいhpiっていうことで、今まで結構不完全だった。そういう方みたい方の支援みたいなのは、ほぼ
@Guest 13:40
解決みたいな感じな印象を受けました。で、うん、うん、うん、そうですね、結構今回
@Guest 13:49
あの使ってみて失敗したなって思うのは、その
@Guest 13:54
レンダーカレンダーファンクションを使わなかったことかなと思っていて、結構なるほど、そのテンプレートをまあ使ったんですけど、はいはい、
@Guest 14:03
やはり以前そのテンプレートの中の方みたいなの。一応なんかが頑張れば設定できるらしいけど、ちょっとそこまで
@Guest 14:12
置いてなくて。テンプレートの中は、変数は全く肩がついてなくて、ちょっとそこのもどかしさみたいなのを感じたりしましたね。
@Guest 14:22
そうですね、結構テンプレートがネックかなっていうところとか、あとあれですね。天プレとの中のリフ。
@Guest 14:31
そもそもそのAPIとして、そのビュー3だとなんですか。そのて、レフの中に、その
@Guest 14:38
コンポジション、イピアの中で宣言したリフを入れる変数を入れるみたいなことができるんですけどもうん、うん。
@Guest 14:46
まず、そのコンポレーションAPIのそのプラグイン形式で使うと、
@Guest 14:52
はい、発音
@Guest 14:52
文字率でしかそのリフを指定できないっていうのがまああって、ま、そこは結構
@Guest 15:00
なんて言うんすかね。変数でした。してしてあげたいなっていう気持ちがあったりとか。うん、うん、うん、うん。あと、そうですね。リフのちょっとこれは
@Guest 15:10
微妙だなって思ったのは、そのv法のまあ文法はあるんですけどもまそ、そこに
@Guest 15:18
それぞれのふv4で、あのイテレーションされた要素つ1つにレフを与えるみたいな文法はちょっとうってなって、ああまあ。あの、その
@Guest 15:29
理解すればわかるんですけど、なんか結構特殊文法っぽい感じがして、びっくりしましたね。ま
@Guest 15:35
こはですね、
@Guest 15:37
まあ、お覚えなければいけないかなっていう
@Guest 15:41
感じっていう感じでますおね、そういうタイプスクリプト
@Guest 15:47
の方の支援を受けるっていうのは、達成できそうだなっていう感じはしました。
@Guest 15:55
テンプレート内の方の支援というのは、これはなかなか難しそうですよね。いや、でもなんかあの挑戦する。
@Guest 16:02
あの
@Guest 16:03
プラグインとか、ビジュアルスタジオコードとかのフラグインで挑戦する内容としては、非常に興味深いところではあるかな、という風に
@Guest 16:14
なかなかいや、そう、ここは解決が大変そうだなっていうのはそうですね。思いましたね
@Guest 16:22
ですね、
@Guest 16:23
うん、じゃああとあれです。あの、リアとフックさっきリアとの話が出たと思うんですけど、まあ、そことの比較を話す
@Guest 16:33
と、まあ、確かに近く近いAPIではあるんですけども、結構とはいえな。中身差があるなっていうのは
@Guest 16:43
思ったところもあって、例えばその略トフックの関数ってあれ、その連打。
@Guest 16:51
その中身がその値が更新されると、毎回関数が呼び出されるっていう動きをするんですね。うん、うん、それに対して
@Guest 17:01
ビーのコンポリーション。APIはま、セットアップっていう関数が1つあって、基本的にコンポーネントがマウントされるときに、1回だけ
@Guest 17:09
呼ばれるっていう関数ですね。なので、結構そこが違うので、
@Guest 17:17
ま、そこでなんて言うんですかね。その略トフックの割と、そういう何回も関数が呼び出されるっていうことを理解しないと、
@Guest 17:26
うん、うん、なかなかそういうパフォーマンスのいいやえ、理想にはならないみたいなのとかは、そこは結構美由の方が、なんか
@Guest 17:36
初心者に初心者が理解しやすいみたいなところかなっていう思いました。あと、
@Guest 17:45
ま逆に言うと、そのリアクトフックスのコンポーネントってほんとにただの半数なので、なんて言うんですかね。
@Guest 17:55
理由のセットアップだと、コンピューテットっていうまあエピアがあってま。そこで、その
@Guest 18:02
リフの値によって何か値を計算するみたいなのは、コンピューテットっていうまあ
@Guest 18:09
関数に入れるみたいな形になってるんですけども、そことかも。ヤクトフックだと、まただ
@Guest 18:16
新しい変数を作るみたいな形になるので。まあ、シンプルさで言うと、リアトフックがまああるっていうとこ。やっぱり
@Guest 18:26
まあ似てるとはいえ、違うところ、そういうところから、そういう略トの考え方という考え方、違うなっていうのを思いましたね。
@Guest 18:35
えか、似てる、似てると言われるけれども、はいはい、意外と違うなっていうの。
@Guest 18:41
そうですね、だいぶこり避けていくと、まあ、ライブの開発者の意図が
@Guest 18:47
結構分かれるところがありますよね。うん、ライブあり、ライブ上でいいのかな、フレームワークって言った方がいいのかな。まあまあまあまあ
@Guest 18:56
そうですよね、結構面白かったですね、そのその面に言うと、なんで割と逆とビューも
@Guest 19:04
好みでは。あるけれども、まそれぞれいいところ
@Guest 19:08
で、まあそんな感じで。まあ、私はそのコンポレーションエピアについて感想を抱いたんですけども。まこのコンポレーションAPIのま紹介って、元々その
@Guest 19:21
UITのない社内のまあ、勉強会であるジェサーテックミーティングっていうところで、
@Guest 19:28
まあ、は、チェイサーさんが発表されたものなんですけど、もまその中で結構まあ
@Guest 19:35
そぼそま。APIの内容とかは。まあそこそこね。まあ、話されたと思うんですけど、もまそ
@Guest 19:44
にに加えてなんて言うんですか。ドローバックスというか、まあ、欠点というか、まあ、高御点みたいなのもいくつかはされていたので、
@Guest 19:52
ちょっとそこについても紹介してもらえますか。
@Guest 19:57
はい、ですね、
@Guest 20:06
いくつかえありまして。
@Guest 20:12
これは先ほども話をされた通りに、この勉強会自体がrcを直接なった
@Guest 20:18
あのrcの説明をしましょうね。という風なところなので、まあrcらしく、なんかモチベーションだとかで、デデザインだとか、欠点だとかあるわけですね。
@Guest 20:27
で、今回の発表自体はあの欠点とか、あの付録の部分を大分けにしたところが多くて、
@Guest 20:35
なんでそこの部分の欠点のところをちょっと。まあ、これからお話しできればなという風に思っております。で、
@Guest 20:44
上がってるのそその欠点として上がってるとこしてまこれ欠点というのが正直怪しいところなんですけど、まあ、レフトリアクティブがわかりにくいよねっていう風なところがあって、レフトリアクティブについての説明を改めてさせてください。と
@Guest 20:57
でえ、先ほどちょろっと言いましたが、まあ、レフはあくまでもプリティミニティブな変数に対して使うもので、ま、リアクティブは、オブジェクトをメインに使うものであると
@Guest 21:06
で、このリアクティブっていうのが、なんかあの、そもそもの話として、ビーニ系のビオブザウェーブルというのがあったと思うんですけど、まあれだよと
@Guest 21:16
で、あれの名前を変えたものだよという風な話になっております。はい、これアxjsにもまあ、オブザベーブルってあるじゃないですか、
@Guest 21:24
あれとま混ざってしまうんで、まあよくないよね。という風な話で解明したという風なところがあるそうです。
@Guest 21:30
あ、はいはいはい、そうなんですね、
@Guest 21:32
はいで注意が必要な点としては、このリアクティビっていうのは、結構注意事項があって、まあ、デストラクティブだとか、スプレットとかをしてしまうと、そもそもリアクティブの効果がなくなってしまうと
@Guest 21:44
で、デストラクティックとスプレットをしたい場合は、まあ、トゥーレフという風なAPIを新規に生やしているので、それを使ってくれという風なところが書かれております。と、
@Guest 21:55
これ、結構興味深いなと思ってるところがありまして。
@Guest 21:58
なんで初めからあのデスラクテットだとか、スプレットだとかできるようにしてなかったの。トゥーレフィスなんて挟まないといけなかったの。っていう風なところは、結構こう興味深いところだと思うんですよ。
@Guest 22:11
まあ、普通にシンプルに考えると、性能の問題が発生するから、意図的に分けたんじゃないかなっていう風に思うんですけれども、はい、
@Guest 22:19
ちょっと明言はされていないので、実際に早々を読んでみたりだとか、測定をしてみたり、だとすると、まあ興味深い結果が出るんじゃないかなと。個人的には思ってあ、
@Guest 22:29
なるほど、まあ確かになんか頑張ればそういうそういうトゥーレフみたいなのはなくなくても動くみたいなの
@Guest 22:38
っていうのは、なんか実現できそうな気はするけれども、まあ割とそういうパフォーマンスなのかな。なんか、そういう
@Guest 22:47
相手というか、まあ、そういうのはま考えた上で、そういうAPIを増やしたっていう。
@Guest 22:53
おそらくこれを思った理由として、ちょっと先ほど後でなんか話をあげようと思ったんで。
@Guest 23:00
ですけど、あの2系のビーコンポジション、apa2系でも、コンポションAPIを使うためのあのビーコンポジションAPIという風なパッケージがあるんですが、はい、あの、それにちょっと移行に使えないかなと思って質問を投げたんですけど、
@Guest 23:13
これ
@Guest 23:15
現状だとあのパフォーマンスに問題があるから、パフォーマンスクリスカルなところでは絶対使うのよ。ああ、注意しろっていう風な戦闘が入ってきたんですね。で、これで思ったこととしては、そもそもコンポジション。APIは
@Guest 23:28
ま、特にレフタとかリアクティブだとか、あの辺りが結構パフォーマンス改善が難しかったんじゃないかな、という風なことをなんとなくジャス
@Guest 23:39
するんですよね。ああ、
@Guest 23:42
そうですよね、あ、ちなみにまあ文脈を言いますと、その1回そのけいさんさんがあ、そのコンポリションエアのプラグインのリポジトリで一周を
@Guest 23:52
投げてくださいまして、それに対して、公式のえ、開発者の方がまあ返信をいただいたっていう形になってるんですよね。で、あ、そこで
@Guest 24:02
結構パフォーマンスなんですかね。やっぱりメイ。
@Guest 24:07
まあ、作者の話を聞く限りは、まあ
@Guest 24:12
十分に移行に使えるものだけれども。私は、採用プロジェクト以外には、そもそも使ってないよ。現状使ってないよっていうのと、もう
@Guest 24:20
明確にパフォーマン、ス、クリチカルなところで使う際には、12分に注意をしてくれているみたいな。はいはい、文面の方や言ってきたので、
@Guest 24:28
少なくとも2系でビーコンポジション、APIのあの、あれを使う分には、プラフィンを使うには、パフォーマンスは注意しなければいけないということがありそうです。
@Guest 24:39
うん、そうですまああそこは結構あれですかね、そのプラグプラインだからこそ、まそういう注意をしてる
@Guest 24:46
のか。そもそもコンポジションAPIが作ってる段階で、結構性能が問題になったのかっていう風なところは、調べてみると、ちょっと面白いかもなっていう風に、個人的には思っております。
@Guest 24:58
さっきのチューレフスなんていう風な、なんなんかもう分かりやすいあれじゃないですか、回避策じゃないすか。チレフスってなんか
@Guest 25:10
いやいやいや、なんか、そういうプラグインを組み合わせた時のパフォーマンスと、純粋なビスのパフォーマンスっていうのは、結構調べておくと
@Guest 25:18
いいところかもしれないですね。
@Guest 25:22
はい
@Guest 25:23
はい、
@Guest 25:25
まあ戻りますとでええと、あとはなんだ。
@Guest 25:34
柔軟性が以前よりマスカに。まあ、品質を維持するのは大変なのではしないかという風な話がしょろっと上がっておりまして。はい、
@Guest 25:43
これは衝撃の話。パットはなんでなんでこんなことを言ってるのかっていうのはよくわかっていなかったんですけれども、あの
@Guest 25:52
リターンの値に、あのセットアップのリターンの値で、まあ、全ての必要テンプレートに必要なものを全部返さないといけないから、まあ、上長になっちゃったりするよねだとか、ボイラーまるでボイラープレートみたいだよねっていう風な話を危惧しているようです。
@Guest 26:08
そうは言うものの、ベッド外部にあの
@Guest 26:13
関数として宣言できるから、そこまであの品質的に下がることはないんじゃないかな、と個人的には思っております。
@Guest 26:22
うん、はい、そうですよね、なんか、柔軟性。確かに、結構割といろんな書き方ができるのは
@Guest 26:31
良くないんじゃないか、みたいな意見ですよね。結構
@Guest 26:34
おそらくはそういったそうですね、そのまあでも元々の理由自体があの結構いろんな書き方ができていたので、
@Guest 26:43
今更その話をあげてもらう気はするんですが、
@Guest 26:49
それを言ってしまうと、ああ、でも確かになんか
@Guest 26:52
あ、言う理由なら大丈夫じゃないかなっていう気はするんですよね。ま、あれだけすごいおっきなコミュニティですし
@Guest 27:01
ま、今更今更っていうか、なんかもう今そういうエアが増えたって言っても、まま選択肢が1つ増えた。
@Guest 27:10
はいはい、ところでも、結構ま、どっちも使っていいですよ。みたいなま、スタンスになっても割と大丈夫なんじゃないかなっていうのは、
@Guest 27:20
まあ、そういうそういうなんで、僕はまあ別にもう純粋にいいなっていう感想でしたね。
@Guest 27:27
私もあの特に問題ないんじゃないのっていう感想でしたね。はい
@Guest 27:33
ま、ビルはかなりドキュメントも、あの、サードパーティのサポートもやってくださってるんで、もう。そして、そこまで問題にはならないんじゃないかな、と気でするんじゃないかなと思います。
@Guest 27:46
そうせ、僕もそう思いますで、まあ
@Guest 27:51
結構結構コンポジションエピアについて話が白熱しましたが、まあ結局割とまみんな
@Guest 28:00
すごいこれ使うべき。使わないでみたいな話とかは出たと思うんですけど、まあ、改めて。まあ、この
@Guest 28:10
ポットキャストのまあ会として、私たちがまあ、コンポリーションepi。結局使った方がいいのかなっていう
@Guest 28:18
の。まあ、結論をまあ話したいなっていうのを思いまして。まあ、まず
@Guest 28:25
そうですね、私からその無賞にpi使った方がいいのかっていうのを言いますとま
@Guest 28:33
ぜひ使ってくださいっていう感想になりました。まあ、単純にそのAPIがすごい使いやすい
@Guest 28:43
と思いましたので、まあ積極的に。まあ、新しくプロジェクト始めるのなら、
@Guest 28:50
コンポリションインタを積極的に使っていきたいなっていう感想を持ちました。まあ、
@Guest 28:57
あと、そうですね、テンプレート周りのましんどさっていうのも、多分レンダーファンクションをま使いなさいよっていう気はしますので、
@Guest 29:06
まあ、それを使うとするなら、まあ、そのコンポレーション、epiプラスタイプ、スクリップとプラスレンダーファンクションみたいな感じのま
@Guest 29:15
感じの実装を。まあ、今後やっていきたいなっていうえ、感想を持ちました。
@Guest 29:22
なるほど、なるほど、私としては、あのビの型サポートの噂にかなり苦しめられた。
@Guest 29:29
あの経験があるので、まあ、新規にプロジェクトを立ち上げるのであれば、まあ間違いなくすぐ様使いたいといったあたりがありますね。
@Guest 29:39
あの、冬、クラスコンポーネントとかで、ディスタイプとかを使って、頑張って、あのかたあのサポートとかをやったりとかしてましたけど、
@Guest 29:47
あれはとにかく辛かったですしね。はい、それ、肩のサポートがないとないで、実際に動かすまで、なんか
@Guest 29:55
アワイとまあなんかねはベルポみたいな形に普通になってしまうことが多々あったので、
@Guest 30:03
地域だったらできる限り使いたいな、という風なところがありますね。ですよね、で、既存の場合は、ま、プラグインとかに破壊的な修正が入る可能性があるのというのと
@Guest 30:15
ま、先程あのあげ1周上げたみたいな話をたんですけど、今回もあのイコツールの方を作ってくださっているそうなので。
@Guest 30:24
えっ、あと、そっか、はいはい、
@Guest 30:26
プロジェクトをビーのプロジェクトを見てね、イコツは作る予定だよ。2020年のいくただよという風に書かれてたんですけど、まあ、
@Guest 30:35
もうクーター終わりとなので、イクターでイコツールが完成するかというのはちょっと怪しいんですが、
@Guest 30:41
今回も待っていれば、あの石系から2系に移行した時みたいに、移行ツールの方をしっかりと提供してくれそうだな、という風なところがありますので、
@Guest 30:50
既存のプロジェクトで使う場合は、もうちょっとだけ我慢して、イコツールができるまで我慢するっていうのはありなんじゃないかなと個人的には思っております。
@Guest 30:59
あ、そっか、1個ツールが出るんですね。うん、うん、うん、うん、ありがたい限りです。
@Guest 31:04
そうですね、まあ、新しく作るのは作る場合はもちろんとしてま。既存の場合でもま既存のプロジェクトの場合でも、ビュー3に効できる可能性は
@Guest 31:14
ある。
@Guest 31:15
ある
@Guest 31:16
いや、いい情報です結構そうですね、じゃあ
@Guest 31:21
まあ使うか使わないかというとも、2人とももう使った方がいいよという。
@Guest 31:26
そうですね、あの、もうちょっと反対意見があった方がいいんじゃないかって思うような感じになっちゃいましたね。
@Guest 31:33
いや、でもそう肩の恩恵がでかすぎるでかすぎるとにそうや、
@Guest 31:40
結構そのデスデスがなくなるっていうのが、うん、うん、ほんとにおっきいいや、あれ結構そう。あの、僕も
@Guest 31:50
いう実装してるうちに、結構そのリスの中に何が入ってからかっていう。そのコンテキストがの脳の方、
@Guest 31:59
ちょっと脳の中にあって、結構それが実装の脳上で結構
@Guest 32:04
結構色々と考えることが増える。増えてしまってたなっていうのに気づかされましたね、結構なんでそうですこ、これは
@Guest 32:15
いや、なんか反対なんか欠点みたいなのを言おうと思ったけど、出てこない。
@Guest 32:20
難しかったですね。決定を探すのは、
@Guest 32:23
はい、
@Guest 32:24
ポジショントーク感があるけど、
@Guest 32:28
いや、でも、実際にほんとにいい変更だと思うので、はい、買ってきたいですね。
@Guest 32:34
ですね、
@Guest 32:35
はいというわけで、はい、今週今週とか今回はりゅう
@Guest 32:45
スリーのコンポジションAPIについて、話してみました。
@Guest 32:49
LINEUITsではえ、このようなjavascriptや、フロントエンドに関する話題について、平議論が行われています。
@Guest 32:57
社内ギットハブの1周をベースに毎週最新の情報をえ、共有しまし。金曜日のjsテックミーティングで
@Guest 33:06
成を持ち寄って共有するというえ、機会があります。
@Guest 33:11
で、まあ、今回え話した内容については、ショーノットにもえ、リンクを貼っておきますので。え、もしご興味あれば、ぜひアクセスしてください。
@Guest 33:21
また、え、このポットキャストについて、ご意見やご感想もぜひツイートしてください。ハッシュタグUIT、アンダースコアインサイドでお待ちしております。
@Guest 33:32
ということで、今週はビューススタディコンポリションAPIについてでした。えーチェイサさん、ありがとうございました、
@Guest 33:40
ありがとうございました。
