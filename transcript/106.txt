@Guest 00:04
こんにちは、UITの玉田です。今回も、UIT INSIDEを始めたいと思います。
@Guest 00:10
UIT INSIDEは、ユーザーインターフェースと、テクノロジーを愛する開発者のためのホットキャストです。
@Guest 00:17
最新のウェブ標準の動向や開発、フルマークの変遷、uiやuxに関することまで、毎週フロントエンドの情報を発信していくことを目的としています。
@Guest 00:27
ハッシュタグはシャープ、UIT、アンダースコアインサイド、エピソードのご意見やご感想はいつでもお待ちしています。ぜひ、ツイートしてください。
@Guest 00:37
はいえ、今回はですね。私とあとお2人え呼んでいます。UITの栗原さんと
@Guest 00:45
あとえしんぽさんを今回お呼びしましたでは、よろしくお願いします
@Guest 00:51
よろしくお願いします
@Guest 00:52
お願いします。
@Guest 01:01
それでは、今回のえ、お2人にえ、自己紹介をお願いしたしようかなと思います
@Guest 01:11
では、私から私からやりますか。はい、
@Guest 01:15
ただといいます。2019年のえ、新卒で入りまして。フロントエンドエンジニア
@Guest 01:24
なんですけれども。今回はこのitインサイドのサイトについてお話していこうかなと思います。よろしくお願いします。
@Guest 01:33
ではしんごさん
@Guest 01:36
僕からはいLINEバイトのサーバーサイド開発を担当するし、ボです。LINEに入ってから、
@Guest 01:44
3年間LINEバイト開発に携わってます本日はよろしくお願いします、
@Guest 01:49
よろしくお願いします
@Guest 01:51
はい
@Guest 01:53
ライブの栗原と申します。
@Guest 01:55
LINEliveのプロジェクトとライブバという、新しいライブコマースサービスの開発、プロペンドの開発をしております。え、
@Guest 02:05
一部クマネキスを利用している部分があるので、今回は参加させていただきました、よろしくお願いいたします
@Guest 02:11
よろしくお願いします
@Guest 02:12
よろしくお願いします。
@Guest 02:15
はい、では、話していこうかなと思います。で、はい、今回のテーマはクバネティスということなんですけれども、
@Guest 02:23
まあ、
@Guest 02:24
なぜこうプロントインドのポットキャストで配りの話をするかっていうことは、
@Guest 02:30
きっかけから、あの話そうかなと思うんですけれども、このUITインサイトのサイトですね。これ、あの先日。
@Guest 02:40
その中身は書いてないんですけれども、デプロイ先を変えまして、今までは社内向けのま
@Guest 02:48
ヘロみたいなものをサービスがあってま。それで、こうデプロイをするっていうことっていたんですけれども、それを先日パイプというものに、載せ替えました。で、パイプ
@Guest 03:02
ていうのはなんなのかっていうのはですね。ちょうどセンチャッター、デベロッパーデの中でも紹介されてるんですけれども、
@Guest 03:12
まあ、要するにクバネティスのマネージドクラスターなんですね。で、これを
@Guest 03:20
載せることによって、まあ要するに、私たちがそのクネテスのクラスターの構成を書いて、ディプロデュースすると、
@Guest 03:29
それをマネージドということで、その構成通りに構築してくれるという感じになってます。
@Guest 03:37
で、そうですね、これを大体
@Guest 03:42
10月ぐらいから続けてまして、で、まあちょくちょく進めていたんですけど、も、11月中頃にちょうど
@Guest 03:51
終わったっていう感じになってます。で、これを話そうと思ったきっかけっていうのは、まあ、その経験とかもそうなんですけれども。
@Guest 04:01
クマネティスって結構正直あの
@Guest 04:07
学習コスト高いなっていうのをその時に思ったんですね。で、まあ、今回話す内容はま、その
@Guest 04:17
私、フロントエンドエンジニアなんですけれども、まそのクネスを勉強して勉強っていうか、まあなんか適当に調べて、
@Guest 04:25
そのデプロイをするっていうところまでをやりました。ただ、これってなんかフロントエンドエンジニアとして
@Guest 04:35
っていうよりは、結構割ともっとこう。サーバーサイドのエンジニアっていうイメージだったんですよね。ただ、
@Guest 04:44
熊ねてってすごい便利なっていうところも感じまして、
@Guest 04:49
なんていうんですかね。こう、自分たちで構成をちゃんと定義できる力を身につければ、すごいあの強力なツールだなっていうのを
@Guest 04:58
これも思ったんですね。で、今回3人で話していきたいっていうのはつまり
@Guest 05:05
こう。まあ、フロントエンドエンジニアにとってクネティスって、まあどれぐらいこう。身を入れて身につける
@Guest 05:13
のが良いかっていうのをまあ聞いてみたいっていうのがま、今回の話テーマです。
@Guest 05:19
で、今回あお2人は。その実際のアプリケーション実運用で、パネスを使っていて、
@Guest 05:29
で、なおかつ。まあ、その運用とかにも結構こう踏み入れているっていうところなので、今回お聞きしたいなと思います。
@Guest 05:39
そうですね、まあ、会社の方針としても、やっぱりあのまvmっていうよりも、あのま、クバネクラクラスター
@Guest 05:47
にあのベアムメタから、あのカバネクラスターに移行するいう方針がまかなり確立してきてるというか、
@Guest 05:56
ま、そういう方針も含めて、最近は社内はかっぱそうですよね。
@Guest 06:01
そうですね、
@Guest 06:02
あ、そのあの観点。そのところで言うと、ちょっとあのついでにお聞きしたいところももう1つありまして、最近最近でもないですね。あの、UIT
@Guest 06:14
sietfというタスクフォースがえできまして、栗原さんのまそこの活動っていうところもあります。で、
@Guest 06:22
はい、これ自体はクリティスは関係あるんですかね。なんか、デスアリのま普及活動というとなんですけれども、
@Guest 06:32
はいまあ、あの一般的にサリーっていうと、どちらかというとま、インフラエンジニアだとか、そういった方々があの意にする
@Guest 06:40
ワードで、結構そのテントでは珍しいかなと思うんですよね。であ、フロントエンドでいうsreのポジションとしては、そのま
@Guest 06:50
結構ですね。あの、他の他者さんと比べて、あのLINEが特殊だというところは、
@Guest 06:56
僕、あのオンプレミシュな環境で、プライベートクラウドっていう、あのベルダーを使ってる部分なんですね。で、
@Guest 07:03
あのクリンティスのクラスターに、例えば、サービスをデプロイするとなると、そのクラスターのモニタリングだとか、その保守運用っていうのは、フロントエンドエンジニアにもこう関わってきてしまう部分があって、あ、
@Guest 07:16
あのかなりその複雑化している部分があるので、あのまデプロイ運用とか。あと、ノンハウっていうのをま、sretfでまおうっていうのを
@Guest 07:25
が、あの目的で立ち上げたてなります。
@Guest 07:29
ただあ、実際問題問題がありまして、やはりフロントベンジニアだけで完結するっていうのはなかなか難しくて、例えば、イレギュラーの問題が起きた時と
@Guest 07:38
かりですね。なかなか、あの輪番体制ができてなかったりっていうのはあります。なので、今回あの先程玉田さんがおっしゃっていた、あのパイプっていう。あのま、どちらかというと、ロとかえ、gaeとかえま、そういった
@Guest 07:52
このですねに似たようなものをですね。使っていくっていう方針、そこに転換していくって方針をまsdtfで進めていけたらなという
@Guest 08:02
形で、今進めているところです。
@Guest 08:04
なるほど、なるほど、ありがとうございます。そうですよね、まあ、結構まだ道半ばという感じですけれども、
@Guest 08:11
でも、はい、まあ確実に。まあ、割とそういうLINEならではっていう理由もあるんですけれども、
@Guest 08:16
そういうところを普及していきたいですね。私も、今回のこのパイプを使った行こうっていうところで、割と良さというか、
@Guest 08:27
あ、やっぱりこれは流行るなみたいなのはすごい感じましたね。
@Guest 08:31
きんぽさん的には、あのクバネティストいかがですか。まあ、以前から多分あの
@Guest 08:36
えvm運用とかを経てこう。クロバネックのクラスターにプロイしていくっていう、その新しい手法になったと思うんですけど、いかがでしょうか。
@Guest 08:45
そうですね、ま、ラインライトに僕が入った当初は、社内でまpmcと呼ばれている専用のデプロイツールがあったんですけど、もま社内のツールということでま設定だったりとか、
@Guest 08:58
まあ、ちょっと。まあ、新しく入ってくる人だったり、メンバーの入れ替わりにの度に、ちょっと手順マニュアルの操作をま
@Guest 09:06
覚えなきゃいけないっていう辛さもあったりとかしてたりとか。あと、開発環境を複数複製する時とかには、
@Guest 09:15
ま、やはり結構同様の作業をま、何度も行わなきゃいけないみたいなのがあってま。ちょっと手間だなっていう感じるところがあったんですけど、
@Guest 09:24
ま、その点配。ネェスは、マニフェストのファイルで、宣言的に管理できるところもあって
@Guest 09:30
ま。カスタマイズだったり、使い方をまマニフェストの構成をうまくすれば、ま、ある程度重複も少なく、まあシンプルに
@Guest 09:40
宣言できるのもあるので、ま、そうですね。インフラの準備という面では、かなり楽になったな、という印象を持ってますね。
@Guest 09:48
なんか、その時代になると、やはりなんかそのクバミスのちょっと前とかだと、あのvmに対して、なんかアンシブルとかで
@Guest 09:56
こう投入してったってイメージになるんですかね。
@Guest 09:58
あ、あ、そうですね、合ってますプロイもまあ、手動でチェックボックスにチェックつけてやってくみたいな感じ。
@Guest 10:08
その辺、インフラストラクチャーザコードみたいなのは、すごく再現性があって、その手順賞をこういちいちチェックしなくても、ちゃんとコードレビューを得て、デプロイすれば、
@Guest 10:20
あのきちんとしたその最低プロイが行われたりとか、そういったところはあのいいと思いますよね。
@Guest 10:26
そうですね、はいま、またそのマニフェストにまあ、ソースコードの履歴と紐づく。うん、まあ、コミットが残るのでま、ロールバックとかもまあ、
@Guest 10:36
簡単に行えますし、いいなとは思います。
@Guest 10:40
確かになんかあの
@Guest 10:42
フロントエンドと結構違う感想があったのは、やっぱりそうですね。デプロイの手間がこれまですごい続人的というか、そういう
@Guest 10:50
ゃな。車内専用ツールみたいな感じになってるっていうのは、確かにそこはあれですね。フロントインドより、だいぶ辛いな
@Guest 10:59
っていうところは聞いていても思いましたね。
@Guest 11:04
そうですね、まいくつかのサーバーサイドは、特にアプリケーションの数も多くて、うん、うん、まそれぞれちょっとバッチだったりとか、
@Guest 11:13
ま、その各カのワーカーだったりとか、ちょっとと扱いが特殊なものとかもあって、レイのにちょっと調整が必要なところもあったりするので、
@Guest 11:23
辛かったですね。はい、
@Guest 11:24
なるほど、いや、サーバーサイドはもうなんかも求められてる感がすごいありますね。
@Guest 11:31
そうですね、はい、
@Guest 11:34
なんかちなみにですけど、あの、なんかバージョニングとか
@Guest 11:40
してるんですか。例えば、ロールバックが必要な時にこう、例えば、cdとかで何か使ってるものはあるんですか。例えば、アルゴcdとか有名ですけど。
@Guest 11:50
あ、そうですね、アロcdを使って、ま、いわゆるギットオックスみたいな形で運営をしてますね。ソースコード
@Guest 11:57
は、フロントとサーバーリポジトリがそれぞれ分かれていてはいなんですけど、マニフェストを管理するマルゴcdと連携してるリポジトリは、1個の
@Guest 12:07
1つのリポジトリーがあって、そこでフロントもサーバーもイメージを書き換えてくっていう意味ですね。で、そのイメージのタグとして
@Guest 12:15
ま。もちろん、そのバージョンもなんですけど、ギットのコミットのま発シなどを利用してまイメージのタグ作っているので、
@Guest 12:24
ある程度ソースコードとの整合性というか、まあ、すぐにたれるようにはなってます。
@Guest 12:31
なるほど、じゃあ、何か問題があっても、ロールバックしたりだとかっていうのは、すごく簡単にできるってことですよね。
@Guest 12:37
そうですね、はい、
@Guest 12:39
いいですよね、そういう系はね、いいと
@Guest 12:41
そうですよね、割とフロントエンドもなんなんですか、ロールバックとかは、作業はありますよね。
@Guest 12:51
なんかこうあの1回出したけど、あ、やっぱまずいみたいな感じになって、あの、フロントエンドの場合だと、なんていうんですかね。あの、
@Guest 13:01
jsとかcssとか吐き出されて、それを読み込ませる
@Guest 13:06
だけみたいな状況であれば、まあ、確かにそれ。その場合であれば、なんか手動でもまあできなくはないけれども、ま、ここに。例えばbffとか入ってくると、
@Guest 13:17
もうそれこそ、もうほんとにサーバーのロールバックとかと同様の作業が必要になってくるんで、やっぱりフロントエンディングも、今後は
@Guest 13:27
今後はっていうか。そうですね、あの、もうすでにそういう同じように、そういうツールを使って、ロールバックとかできるっていう。
@Guest 13:45
じゃあ、さっきのあの
@Guest 13:47
構成の話とかもそうなんですけども、結構あの、これ、バネティスってプロジェクトによって、なんか色々と状況が違うところもあるんで、
@Guest 13:57
ここでちょっとお互いで、なんかこの配にどういった構成にしてるかとかを聞いてみようかなと
@Guest 14:04
思います。
@Guest 14:10
ライブ前はですね、あの、特段と言って、あの、あの、例えばイメージビルド押してるとかではないので、
@Guest 14:16
今現時点でそのssrを必須としてないというか、
@Guest 14:21
あのまいスタール自体はフロントエンドでやっていなくて、サーバー側でしてしまっているので、特に面白みがないというか
@Guest 14:29
があるので、できればLINEバイトを聞いてみたいですね。LINEバイトの、はい、あの意見を聞いてみたいですね。
@Guest 14:37
はい、では、LINEバイトについて、まあ、クネテスクラスターについて話すと、
@Guest 14:43
まあまず1個特徴があるとすると、まあ、LINEバイトで単一のクラスターを持っているっていうところですね。ま、単一と言っても、その本番環境とまあ、開発検証環境というので、クラスターまた分かれてはいるんですけど、
@Guest 14:58
ま、結構そのサービスごとにクラスターを持っているっていうのは珍しいのかなとま、個人的には思ったりしてます。なので、まクラスターを管理する、
@Guest 15:10
うん、管理する役割っていうのは、いわゆるサービス開発の開発者は、サーバーサイドはやってるわけなんですけど、やってて、ちょっと範囲が広いのかな。サーバーサイドっていうん、なんか、イメージよりはちょっと広めな感じは、個人的にはしてます。
@Guest 15:25
ミラボってことですもんね、
@Guest 15:27
そうですね、一応、他内のクマネテス専門のチームがあっては、いま、サポートはしてもらえるんですけど、
@Guest 15:33
ま、サポートの責任範囲というか、対象としては、あま
@Guest 15:39
コントロールプレイン。あの、そうですね、コンテナランタイムはより下とかそこらへんで、コンテナーより上のレイヤーになると、まさが側の
@Guest 15:48
人とま、あとま開発支援っていうま、いわゆるそのインフラ構築を支援してくれるチームもついてくれてて、そこでやっていくって感じですね。
@Guest 15:58
まあ、ちょっとまサーファー側としても、ちょっと大変さはある感じですね。ま、そこはま楽しみつつというところではあるんですけど、インフラも
@Guest 16:07
やっているというところです。で、LINEバイトのそのクラスターの中には、まあ、サーバーサイドフロントを
@Guest 16:15
のコンポーネントがま全て含まれていて、フロントはノードジェース
@Guest 16:23
ま1種類だけなので、ま、サーバーは1まいくつあるんですけど、そのと比べると、フロントのコンポーネントはまあ1つだけなんで、管理としてはすごい楽かなと思っています。
@Guest 16:35
まあ、そうさっきも言ったんですけど、ソースコードはそサーバーとプランターが分かれていて、そのクラスターと連携して、ラルドcd
@Guest 16:43
とまさに連携してるそのマニフェストファイルは単一になってます。で、フロントとサーバーそれぞれイメージを更新する時は、え、そのマニフェストファイルに対して
@Guest 16:53
追加したい更新したイメージの更新をかけていくって感じ。なるほど、ちょっとフロントについて、もう少し話すと、
@Guest 17:02
フロントはドローンというciのソフトウェアを使ってるんですけど、ま、ある程度デビューが終わった
@Guest 17:11
ま、成果物を反映したいときは、そのドローンので、ブロイのアクションをまスラックなどで叩くと、どっかのイメージをビードして
@Guest 17:21
ま。社内のえとか、レディストリーとかイメージをアップロードして、
@Guest 17:26
まあ、開発検証環境であれば、マニフェストファイルにコミットするところも、もうその知り合い上でやってしまってます。なので、ま、
@Guest 17:35
スラックでコマンド打つとま現象開発環境に反映されるっていう仕組みになってます。本番環境は一応
@Guest 17:44
最後はマニマニュアルで操作したいので、トゥルリクエストの作成までま試合でやって、
@Guest 17:50
最後はデビューしてた反映のタイミングはま、人がなるほど完璧するという運用ですね。うん、
@Guest 17:58
いいですね、やっぱり
@Guest 18:01
勇気トップスがはい、確実性がいいですよね。なんか、抜け漏れがないというかね。
@Guest 18:09
そうですね、まいこんこの運用自体は、社内でも割と一般的にはなってきててま、
@Guest 18:16
その配ね手数を管理するチームが推奨しているようなこ割と、社内では一般的な構成ですね。最近だと、はい、
@Guest 18:25
フロア自体はライブがも同じ感じですかね。そういうなんかこう
@Guest 18:31
まそうですね、ライブはい、自体はでも、イメージのイメージのビルドをしてないので、まそのドローンでイメージビルドをして、
@Guest 18:40
その立派のどっかイメージ。あの、レポストにアップロードにはしてないので、どちらかというと、そのお書き換えた部分の差分をですね。
@Guest 18:50
あの、バックエンドエンジニアにプルリックを大自動的に送るみたいな。はい、リストを切ったら、あのプルリックをるみたいな感じになってます。
@Guest 18:58
イメージっていう単位ではないけれど、も、ま差分があって、それをリクエストで。
@Guest 19:05
ちなみに、LINEバイトのなんか最初に多分構成を書くかなと思うんですけれども、その部分については、フロントエンドの構成は
@Guest 19:15
どういう風に書かれましたね。このフロントエンドエンジニアが、これぐらい立てるみたいなっていうのは、
@Guest 19:21
誰が書いた感じですかね。最初の構成は、
@Guest 19:25
あ、あとここは特殊特殊というか、まあ、一応経緯を説明しておくと、LINEバイト
@Guest 19:33
チームは元々。あ、LINEバイトのフロントエンドはvmで動いてた時代からロックスワームを使っていて、あ、
@Guest 19:41
ま、ある程度そのコンテナ化された状態での運用っていうのは慣れてた。なるほどうのがまあ1つあります。
@Guest 19:51
と、マットクネテスの移行を始めた段階で
@Guest 19:55
ま、サーバーサイド主導で進めていったんですけど、まあ、フロントの方はそこのタイミングで結構メンバーがガラッと入れ替わったりもしていて、
@Guest 20:03
ま。あんまりその新しくタスクを要求するってことはなかったので、まあ、サーバー側が勝手にそのドックスアムの構成を
@Guest 20:13
クネテスに持ってきてますか。テストを行った上で、問題ないなと思ったまあ、リソースを割り当ててるって感じですね。
@Guest 20:22
ま、運用としても、基本的にまログとかは、フロントエンドの方が管理してると思うんですけど。
@Guest 20:30
メモリーcpuなどのめ、メトリックスはま、サーバーサイトで見てることが多いので、まあ、負荷が
@Guest 20:38
大くな大きくなって、アラートが飛んできた時は、サーバー側でま、フロントのそのポットのcpuメモリーの
@Guest 20:46
増やしたり。まあ、もしくは、水平のスケールをおこなスケールアウトを行ったりするっていうのは、サーバーガーでやってますね。はい、
@Guest 20:57
結構その分業して、役割しのこうに分解て、こう決めてるってことですよね。
@Guest 21:06
そうですね、はい、まあなんていうか、フロントの方がちょっと。昨日まい人数的にまリソースがサーバーの方が豊富で、フロントの方がいつも手がいっぱいなので、
@Guest 21:16
まクネテスに対するそのキャッチアップみたいなところも、まなかなか時間が取れないのかなと感じたりはすると思うんですけど。はい、
@Guest 21:25
あの、まあわかる人がいるみたいな、運用にはなってしまってるっていうのが現状です。
@Guest 21:31
なんか、フロントエンドエンジニアで、そのまどこまでやったらいいのか、どこまでこれあの、こう知ってたらいいのかって。結構フロントエンドエンジニアで悩みが多いと思うんですよ。どこまでこうクロビンティスの
@Guest 21:43
あの、アップライムのまでできなきゃいけないのか、みたいな。よく聞かれるんですけど、私としては、
@Guest 21:50
最低限とかはちゃんとこうイメージビルドできるところまでやって、そこからあとは
@Guest 21:57
各、例えばgaeとかでもそうですけど、そのま各そのサービス、インフラサービスに任せてしまうっていうのが、もしかしたら、フロントエンドエンジニアとバックエンドインフラ、エンジニアの責任分回転なのかなとは
@Guest 22:09
と思ってい
@Guest 22:10
いますね。確かに、コンテナのレイヤーで切り分けるっていうのは、まあ、1番一般的なんかかもしれないですね。
@Guest 22:22
ま、でも、元々そういうLINEバイトでは、そういうコンテナを使った運用っていうのが、クバンティスに移行する前からあるっていうのは
@Guest 22:30
意外でしたねます。それなら、確かになんから楽とは言えませんけれど、なんかこうスムーズにいきそうな感じがします。
@Guest 22:40
そうですね、はい、まあ、ドッカスアムを本番で使ってたのも結構珍しいとは僕は思ってるんですけど、あんまり聞かないなというのは
@Guest 22:48
はい
@Guest 22:50
ま当時からまあ、いずれクネテスに移行するだろうなっていう。あの、まあ、ある程度意識しての構成だと。
@Guest 23:00
そうですね。なんか、LINEバイトを私もちょっとあからこう見てた感じだと。結構ノードベースのノードベースのssrを結構初期からやってた
@Guest 23:10
ていうのが結構目立ってたなと思ってて、そこからいい流れでこうクネにこう移行できて、素晴らしいなと思ってます。
@Guest 23:18
そうですね、すごくうまくいってるようには、からは見えませ。
@Guest 23:26
あ、中では大変こう。皆さん、あの、色々試行錯誤されてるとは思うんですよ。はい、
@Guest 23:34
では、ちょっともう少しその運用のところに踏み込んでみましょうかね。結構さっきの話でも出てたんですけれど、も
@Guest 23:43
どどこでそのどのどこでその責任のレアを分けるかとか、そういったところについてとか、あとはなんていうんですかね。そういう
@Guest 23:53
アラートが飛んできた時の動きとか、あとは、私が個人的に気になるのは、なんか、コンテナはコンテナでも、
@Guest 24:02
どういったところを考慮したコンテナになってると嬉しいかとか、そこらへんは、
@Guest 24:08
あのこうサーバーサイド側からのこう意見として聞いてみたいっていうのはありますね。では、どこから聞いてみましょうか。
@Guest 24:18
なんか
@Guest 24:21
考慮した点ていうと、僕は基本的にそのフロントだから、特別にこういうコンテナであってほしいというのはなくて、ですね。
@Guest 24:30
ま、サーバーサイトと同じようなことを意識すればいいのかなとは思ってます。まあ、意識する点で言うと、
@Guest 24:39
ま、例えば、そのステートレスデータをコンテナに保持しないように保持するなら、外部のストレージに。まあ、ススリとかま色々あると思うんですけど、保存する
@Guest 24:49
ていうのとま、ログログは収集しやすい標準出力ファイルに書き込むのではなく、そうあ、はい、ログ出力を行う
@Guest 24:59
ま、あと、なんか色々羅列にはなってしまいそうですね。ま、設定値を渡せる
@Guest 25:05
うん、渡して、なんか動作を変えるま、環境ごとの作を吸収するような動きをしてくれると、まあやりやすいうんかなと思います。
@Guest 25:16
あまり関係ないですけど、起動フロントは早いと思うんですけど、起動が早いとすごいスケールのタイミングで。あ、便利なので、
@Guest 25:27
ま、これはサーバー側が遅いんですけど、まあ、スペリングブートを使ってて、サーバー側、それは30秒とかかかったりするので、
@Guest 25:33
ま、スケールしてる間になんかもうあのピークが終わっちゃったりみたいな。なるほどとあったりするんですけど、まあ、フロントはすぐ立ち上がってま。リクエスト受け付けれるま、いわゆるヘルスチェック。
@Guest 25:43
もうそうですね、機能としてあったらすごいまないとダメですね、はい、そんな感じですかね。まあ、特にフロントだからというとこはなく、いわゆる
@Guest 25:52
そのクメテを意識したアプリケーションまなっていればいいんじゃないかな、と僕は思います。
@Guest 25:58
いや、まあでもなんか軌道の時間とか観点はあんまりなかったですね。個人的には確かにそれは言われてみればって感じですけど、
@Guest 26:07
ま、確かにこれはあんまりフロントインドのところだと、あんまり確かに関係ないかも。あとせそう
@Guest 26:15
そうですね、あんまりはそういう気にならないレベルだと思います。はい、
@Guest 26:21
まあ確かにログとかあとヘルヘルスチェックも確かにそうですね。それはだいだい大事なんですけど、なんか適当に
@Guest 26:30
なんかトップページみたいな、そういう感じにはならなっていうよりは、ちゃんとヘルスティックのエンドポイントっていうのは、やっぱり必要なんです。
@Guest 26:42
そうですね、
@Guest 26:43
った方がいいと思います。
@Guest 26:46
このヘルストックのエンドポイントは、単なる何かしらの正常常系のこのい入ってくるだけでいいんですかね。
@Guest 26:54
そう、本的にはモードチェイスだそうなんじゃないですかね。例えば、サーバーサイドとかだと
@Guest 27:01
ま依存するコンポーネントま、接続先のまdbだとか、ライブサービスへの疎通を確認した上でま、
@Guest 27:10
ステータスまクリアみたいなのを返すんですけど、ああ、はい。まあ、
@Guest 27:16
特に外部にも依存せず、まサーバが立ち上がった状態で、リクエストをさけるのをまokとするならば、まその段階で
@Guest 27:24
返していいんじゃないかなと思います。あ、
@Guest 27:28
ここはちょっと特殊です特殊というか、まああのうん気を付けないといけない
@Guest 27:32
ま、そうですね、はい、まあ余計に応じて変えればいいんじゃないかなと思います。
@Guest 27:40
ま、ただ、意外とフロントエンドインジニアって、そういうところを気にしてないっていう
@Guest 27:47
人は、意外といるんじゃないかなっていう思いますね。あの、そう
@Guest 27:50
確かにあまりね、うん、目線目線がね違うかなと思うん
@Guest 27:56
割と。あの、まあ、確かに当たり前ではあるんですけれども、ほんとに元々、例えば
@Guest 28:02
コンテナ化するか考えずに書いた行動をこ無理やりコンテナ化したらなんかダメそうですよね。なんか
@Guest 28:10
よ、よく見たら、実はファイで書き込んでたとかあるかもしれない
@Guest 28:21
ま、普段から気を付けてかけという話ではありますね。
@Guest 28:26
そういったところは、なんかどコンテナ化する。するしないとしても、そういうところは、普段から気にして書いた方がいいかもしれない。
@Guest 28:36
そうですね。あとは、まあね、運用的な観点で言うと、まそのフロントのイメージのタグとかからま。さっきも言ったんですけど、リリースの
@Guest 28:46
どのソースコードの場所を指しているのか、っていうのをたどれるようなまタグになってるといいかなとは思いますね。運用してる側だと、
@Guest 28:56
まあ、そうですね。なんか、問題があった時に、どのイメージに問題がありました。っていうのを誰かに伝えなきゃいけない時とかも、どうしてもタグとかがわかりやすいと調べやすいのかな
@Guest 29:06
とは思いますね。なるほど、まあ、なんかフロントだと、はい、バージョンをなんか返すように。なんか、ベースとかにファイルに書き込んだりはしてると思うんですけど。
@Guest 29:14
まあ、そのクネテスを運用してる側からすると、そこまで見ないことが多いので、やっぱりイメージのタグとかでまぱっとわかるといいかなと思いますね。
@Guest 29:24
そうすると、ciでそのリリースタグリリース切った時のプリガーとして、あのギルドの
@Guest 29:32
バックナンバーみたいなとこに入れるといいかもしれないですね。そうですね、はい、
@Guest 29:37
ちなみにたどたどれるっていうのはほんとにたどり。あの、なんか具体的に例えばコミットはとかでもいいんですかね。なんか、このこの時点での
@Guest 29:47
ああ、そうですね、コミットハッシュが僕はいいんじゃないかなと思ってます。あ、バージョンも分かりやすいと思うんですけど、もっと細かい単位で言うと、コミットハッシュとかがあると
@Guest 29:57
なので、調べやすいと思いま
@Guest 29:59
うん。
@Guest 30:01
確かに、なんかれレテストとかでは全然もうわかわからないってかまどれを指してるのかわからない。
@Guest 30:12
確かにあのでもログとかはそれこそほんとになんかクマネティスとか関係なく、なんか
@Guest 30:21
一般一般論として色々あると思うんで、
@Guest 30:28
なんか聞いてると、そこまでクバネティス特有の事情みたいなのあんまりないかも
@Guest 30:36
ですね。
@Guest 30:39
まあ、あと、あんまりフロントだとやらないのかもしれないですけど、まあ、プロメテウスターとかで、ネトリックスを収集するような仕組みはあるので、ま
@Guest 30:49
出したいメトリックスがあると、まプロメテースのドジェイスのエクスポーターとか使ってもらって
@Guest 30:55
ま。閾値を設定してっていうのをやってもらえると、まあ、アラートが飛び飛ぶような設定をしやすいので、
@Guest 31:03
ま、運用側としては便利ですね。それが飛んできた時は、まあすぐに連絡するとか、対応ししやすいのでは。い、まあ、フロント特有のトリックスがある場合は、
@Guest 31:13
そういうの入れてもらえると助かりますね。うん、
@Guest 31:16
まあその辺のまあ、バックエンドコフロン全のbfですね。bffのトリックシュみたいなところになるんですかね。どちらかというと、その
@Guest 31:27
あ、天道寄りになった感じなんですかね、クになって
@Guest 31:32
そうですね、ほんとにリソース回数だけなら、メトリックスを取りようがないというか。
@Guest 31:38
うん、
@Guest 31:42
まただそうですね。うんままノードgsでサーバー立てるとかなると、まあ、全然話は変わってくるんで、そっか、ミトリックス。
@Guest 31:53
うん、確かにそこまで考えてはないかもしれないログとかは考えるんですけどね。
@Guest 32:02
そうですね、なんか、トロペレンジにはどちらかというと、セントリーとかにエラーログとこう積んでいったりとか、シログ積んでったりとかすると思うんですけど、
@Guest 32:11
また、別の方向でbffのそのなんです。はいかねこうあ、健全性とかそういう正常系のかどうかっていうチェックはたまた
@Guest 32:21
別分野でもしますよね。
@Guest 32:24
なるほど、確かにセントリーもログ、とりあえずエラーログセントリーなぎてとか、そういうもっとこう丁寧に
@Guest 32:32
していきたいですね、
@Guest 32:36
ありがとうございます。結構まあ、すごい当たり当たり前の振り返りみたいな感じになってしまったんですけど、もや
@Guest 32:43
まさしく、普段から気を付けていきたいところばかりでした。
@Guest 32:48
まあ、あのUITでその結局まあ
@Guest 32:52
itでなかなかそのバックエンドの知識、クマネーデスをよるこうに関する知識みたいなのがなかなかこう。はい
@Guest 33:01
まあ、なんていうか、スッチとかこう、皆さんにこういう感じですよ。っていうコミュニケーション、やっぱりする上で、
@Guest 33:06
バンドインジニアのも方があの得てる知識とかもま、その点々ジニアがあってもいいかなと思
@Guest 33:12
いてま。UITsitfっていう中で、そのフロンテンデジニア向けのクーバニティス。はい、運用運用というかに、フロントエンドの
@Guest 33:23
まあ、あのリソースをデプロイするみたいな。あのけんけなんて言ったらいいね。勉強会を結構6回、7回ぐらい
@Guest 33:31
かけてやったんですよね。たださんもあの参加していたあの、参加の次作っていただいたんですけど、それはちょっとどうでした。なんか
@Guest 33:39
あ、そうですね、いや、あのなんですか。あの、基礎とか基礎っていうか、ポットとは何かみたいな。そういったところからっていう面では、すごい
@Guest 33:49
めちゃくちゃ勉強会としては、め、すごい目についたところはありつつもやっぱり
@Guest 33:57
さっきの話を聞いているとこう運用面での、なんか、チップスとかはなんかもうちょっとこう。
@Guest 34:05
実際に運用してる人の話を聞かないとわからないところって、確かにあったなっていうのは思いましたね。それこそ、さっきのそういう
@Guest 34:14
ログとかもそうですし、うん、ヘルスティックとか、そういったところとかも
@Guest 34:20
あんまクバネティスって感じではないですけど、それはそれで大事なところではあるんで。
@Guest 34:29
そうですね。か、なので、まあどこそのパイプ最初にあったパイプっていうまあえなんだろうなバースっていうんですかね。あ、
@Guest 34:40
バック、エンダーザーサービスうなんですけど、ま、そういったものがあの、まあ、フロンペンドエンジニア向けに、その
@Guest 34:50
まマネージドで管理された。あの、プラットホームなので、今後使い使いやすくなっていけばま。フロンペのインジニアもカジュアルにこう
@Guest 35:00
まあ、なんてたいんですかね。ノードェースのサーバーをリプロイしていくことができると思うので、まその辺りは期待しています。
@Guest 35:08
ちょっと今回のホットキャストでタイプってなんだろうって思った方は。あの、今年のデブで、202はのタイプのセッションぜひ見ていただければ、
@Guest 35:17
あのあ、こういうのが社内で独自で動いてるんだっていう参考になると思う。もしよければ、はい、見ていただけると、
@Guest 35:24
はいはい、このセッションのリンクはショートにはい、貼っておりますので、ぜひ行ってください。ま、
@Guest 35:31
結構頑張ってるなな、誰目線だっていう話ではあるんですけど、すごいわとこう力を入れて開発されている
@Guest 35:41
ところで、いや、まあ、でも、
@Guest 35:45
こうちゃんとこう一丸となって、クネスを活用していくっていうのは、どんどん広がっていきそうですよね。
@Guest 35:53
そうですね、今回はフロントエンドとクネクしたです。でしたけど、今まで我々って、まあ、あの
@Guest 36:00
LINEじゃない。例えば、LINEじゃないところにいた場合ですけど、結局その各awsのサービス、googleのサービス、googleプラットホームのサービスですね。
@Guest 36:11
を使っていて、結構そのマネージドじゃないですか。結局、そのgoogleとかああ、エザレスのエンジニアが、そこを。例えば何か障害があったら、そこ
@Guest 36:21
のなんて言ったらいいですかね。ポットを復旧させてくれたりするじゃないですか。また、ペンはあれあれ。そのLINEでやってる
@Guest 36:30
ところは、実はバックエンド、インジニアがこう。裏に頑張っているっていうのはちょっと聞けたので、ごあのいい会だったのではないかなと思ってます。
@Guest 36:40
妖精さんがいるわけではなくて、ちゃんと裏で頑張ってる人がいるっていうのが、そのフロントエンドの立場でこう。
@Guest 36:48
今までちょっとマスクされた部分が、今日、あのちもさんがこう実際に頑張ってらっしゃるのかってよかったと
@Guest 36:57
ま、一応見えないですよね。辛さだけ
@Guest 36:59
ではなくてま補足しておくと、そのadsやま、googleのよりも、サポートが熱いっていうのがあって、社内の
@Guest 37:08
メルダのクネテスチームとすごいスラックで、距離が近いので、ますぐにやりとりができるので、ま、いわゆるそのマネージドサービスよりも
@Guest 37:16
ま対応とかは早いんじゃないかなと。個人的に思ってて、そこはちょっと辛さはなくて、むしろ助かってるところもあるっていうあそでした。はい、
@Guest 37:26
素晴らしい。それは、社内のあのメリットの1つですよ。強みですよ、強み
@Guest 37:31
あ、ですよね、
@Guest 37:33
じゃあ、
@Guest 37:34
祈るしかないあの、あのパブリックだともう祈って復帰す。
@Guest 37:40
確かに、
@Guest 37:43
我々はその原因究明ができるように、さっきのあのコミックハッシュとかねっていうのを気をつけてやってるっていう。
@Guest 37:52
こちらから、こう協力してもっていうところですね。確かにはいではありがとうございます。
@Guest 38:03
では、今回はえーフロントエンドとクマネテスについて。3人で話していきました。
@Guest 38:10
LINEのフロントエ組織UITでは、このような技術的なキャッチアップを日々行っております。
@Guest 38:15
UITeサイト以外にも、毎週の車内勉強会で、フロントエンドの情報交換を行っています。
@Guest 38:21
今後も、テンサイドを通して、このような情報を外部に発信していけたらと思います。最後に
@Guest 38:28
現在、LINE株式会社では、新卒中と支をともに募集しています。
@Guest 38:33
このポットキャストを聞いて、大に興味を持たれましたら、小のと1番下にある巨人ページから、ぜひアクセスしてください。
@Guest 38:41
それでは、お2人ありがとうございました、ありがとうございました、
@Guest 38:44
お疲れ様でした、ありがとうございました。
