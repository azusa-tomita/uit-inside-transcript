@Guest 00:07
ユーザーインターフェースと、テクノロジーアする。開発者のためのウィークリーポッド、キャストUIT、インサイド。今週も始めていきたいと思います。
@Guest 00:16
え、今回はですねはメさんの方からえっとま、2022021年とえで、2022年のえ、cssフレイマークについて、色々話していってもらえるってことなんで、話を
@Guest 00:27
聞いていこうかなと思っております。えはさんよろしくお願いしますよろしくお願いします。
@Guest 00:36
さて、じゃあ、早速色々話を聞いていきたいなと思うんですけど、まずあれですかね。え、せっかく1月なんで、去年どんな感じだったかみたいな振り返り的なとこから
@Guest 00:46
ですかね。
@Guest 00:47
そうですね、じゃあ、そこから振り返っていきましょう。
@Guest 00:49
ぜひぜひぜひはい、お願いします
@Guest 00:52
とはいえ、まあ今回そうですね。話そうと思っていない内容は、ベートオブシセスとかが
@Guest 01:00
結構割とcssイェースについて結構詳しいなっていうところがあったので、そこから話していこうかなと思うんですけど、結構
@Guest 01:09
これ。今あのcssインステートオブcssの画面を見ると、cssインジェースのフレームワークがすごい
@Guest 01:17
数が増えていってるなっていう、うん、うん、うん、最近思ってまして。これ、結構他のフレームワークとかと結構なんか
@Guest 01:27
割と収束していっているというか、デファクトが決まっているなっていう印象がはい、あったりすると思うんですけど、
@Guest 01:35
結構cssインジェーズに関しては、割とまだまだいっぱいあって、どれ。
@Guest 01:43
どれがこうこうデファクトになってもおかしくないみたいな感じになってるなっていう風な。
@Guest 01:48
ああ、確かになんかこう結構図見てても群雄活きというか
@Guest 01:54
ですね。そうですよね、でま、その中でもこう色々追加されているものもいっぱいあって、例えば2020年だと
@Guest 02:04
スタイウィルドシステム、スティッチーズ、イナリア、アストロターフヘラーのイツが入って。で、2021年にも
@Guest 02:14
バニラ、エクストラクトウイン、dcssテーマuy。ツインっていうライブレレが、
@Guest 02:21
ここの表の中に追加されてるんですよね。
@Guest 02:25
なんか、毎年どんどん増えていってる
@Guest 02:27
感じ。そうそうなんですよ、これ全部使えって言われても
@Guest 02:30
無理があるんですけど、でも、それだけなんていうんですかね。こう、オピニオンがあるっていうのは、すごいいいことだなと思ってて、
@Guest 02:40
ちょっとそうですね。去年のまあ、後半ぐらいはちょちょっとずつ見ていったりとかしてたんですよ。で
@Guest 02:48
ま、その中で結構なんかこう潮流としてあるのがゼロランタイムっていうのが結構。ああ、そうですね、はい、キーワードとしてありますよね。
@Guest 02:58
ありますね、
@Guest 03:00
で、このさっきあげた中で言うと、えっと、スティッチーズとリナリアとアストロターフとバニラ、エクストラクトとツインは
@Guest 03:09
ゼランタイムです。って言ってるので、やっぱりこう流れ的にすごいこれを採用するのが、まあ流行りというか、まあ、そういう流れが
@Guest 03:19
あるかなっていうところが
@Guest 03:22
気づいたんですね。でま、これあ、そうですよね、なぜかというと、やっぱりま個人的な意見で言うと、やっぱりテウィンドcssが
@Guest 03:32
でかいかなと。
@Guest 03:33
うん、うん、うん、
@Guest 03:34
思ってるんですね、やっぱり、あれって、このプリプロでセッサを通すことによってま、必要なcssだけ出てくるっていうところが、
@Guest 03:44
まあ、そうですね、なんかそうです、概念を作ったような感じはしますよね。
@Guest 03:48
そうですよね、ま、今までだと結構シースフレームワークって、そのランタイムで支援セス出すので、ま、ある程度おっきいっていうのが
@Guest 03:56
割と許容されてたとうん、うん思うんですけど、もまこれテイルウィンドが出たことで、そういうなんか、フットプリントが
@Guest 04:04
おっきいライブやり使うのよくないよね。っていうのは、考え方として、こう主流になってきたのかなんていう独自研究ですね。これは
@Guest 04:13
そうっすね、結構少し前まではなんでしょう。えっと、カスタムビールドみたいな。例えば、あのscssとかのインポートを減らして、ビルドすることによって、こう減らしたこう、計量版を出力するみたいなのは、
@Guest 04:25
選択肢としてあると、こうメジャーじゃなかったかなと思いますけど、なんか、
@Guest 04:29
今はもはやそうやってガタイムに乗っかるものを、こう最小限にするってのができない。技術は、選ばれづらくなるぐらいには主流になってきてる気は
@Guest 04:38
しますよね。そうですね、さっきのそのscssの例でも結構なんて言うんですかね。こう主導というか、
@Guest 04:45
あ、そうですね、自分
@Guest 04:46
でこう選んでっていうところもあるんですけど、これ最近のところだと、もうそれも自動でやってくれるみたいな。
@Guest 04:53
そうですね、初めにこうフルサイズのものがあって、ま。そっからこう行動を解析して、こう最小限のやつだけ抽出されるってのがトレンドになりましたね、気が付いたら
@Guest 05:02
そうですよね、まあ、やっぱりこうやってみると、テイルインドって偉大だなっていうのは気づかされますよね、
@Guest 05:10
なんか、一方であれですよね。あの、テールインドは結構css的なアプローチから始まっててこう。
@Guest 05:16
あのま、テレビの本気はまだまだ今もcss的アプローチによってると思いますし、なんかこうあの、そういうのも1つあるのかなと思うんですけど、そのゼランタイムといういうか、
@Guest 05:26
何体分の最小化プラス、cssインジェスみたいなので言うと、結構リナリナリアの採用事例が出てきてから、増えたきもうんしますよね。
@Guest 05:35
そうですよね、ああ、確かにテイルウィンドは、最初はそのモノシリックなcssがあってま。そこからこう取り出していくっていうところがあって
@Guest 05:44
ま。それで言うと、シスセジェースは逆なんでま。色々こう方法が生まれていくのか。
@Guest 05:50
そうっすね、結構こうモロシックなものを削減する側からま0から書いていくし、それが最適化されるっていう流れになっていくっていうので、
@Guest 05:59
こう両側面から最適とされてきた気がしますね。
@Guest 06:03
そうですね、そこ、やっぱり面白いところだなと思ってます。うん、まあ、なんでランタイムでcs
@Guest 06:11
を生成するんじゃなくて、ビルドタイムでシセスを取り出すための方法として、テルミンドだと、まあ、元から
@Guest 06:20
1つのcssがあって、そこから削っていくっていう方法を取る代わりに、
@Guest 06:26
まあ、そのシェースがあの0団体の実現するためには、どうやって、その
@Guest 06:33
使っているスタイルをその元のjsから取り出していくかっていうところの違いによって、いろんなライブが
@Guest 06:41
できてきてるなっていうところは
@Guest 06:44
ですよね。
@Guest 06:47
なんか、このコンセプトの違いによる軍各曲はぱ、最近のjsだとあんまり見かけないんで、ちょっと新鮮でワクワクする感じ
@Guest 06:53
します。そうですよね、楽しいですよね、最近あんまりないですよね、そういう
@Guest 06:59
そうっすね、
@Guest 07:01
大体逆とかビーカーみたいなそんな感じなんで、
@Guest 07:04
なんか大体決まってる中で、こうピックしていくみたいな感じだったのが、ちょっとこっちの世界は違いそうで、
@Guest 07:11
そういうまた楽しみというか、
@Guest 07:16
ていうのはかなりありそうですね。か。ちなみにこの中だと、あのはさみさんの推しはなんか今あるんですか。
@Guest 07:25
あ、そうですね、おで言うと、まずバリバニラ、エクストラクとかなっていうおははい、あります。で
@Guest 07:33
ま、結構あ、どういった方法で取り出すかっていうのは、ま、色んなそのライブにパターンがあるんですけれども、結構元々今まであったcssijsのま、apiを
@Guest 07:46
模倣して作るっていうことが結構多いんですね。で、はいはい、バニラエクストラクトで言うと、元になっているのはシエモジュールズですね。
@Guest 07:55
あ、はいはいはい、はい、なるほど、
@Guest 07:58
なんであれですね。そのcssファイルとjsファイルが混在していて、jsからcssをインポートすると、クラス名として使えるみたい。
@Guest 08:07
あ、わかりますあれですよね、はい、はい、あれあれスタイルなんですよね、
@Guest 08:10
そうですですあれ、アリスタイルですね。アリスタイルのゼランタイムのライブやりが、バニラクストラクトっていうイメージです。
@Guest 08:18
あ、結構多田さんの気に入ってるポイントはあるんですか。
@Guest 08:21
そうですね、あの、これ元もなぜ調べてたかっていうと、今のその個人開発のプロダクトで
@Guest 08:28
auy。あの、私が去年の初め頃にlineのイベントで紹介したと思うんですけれども、
@Guest 08:34
はい
@Guest 08:34
はい、あれ、やっぱり気に入ってて、それを使っている個人開発プロダクトがあったんですけど、も
@Guest 08:41
ま、それにこう何て言うんすか。組み合わせるみたいな感じのcssライブやりが欲しいなっていうのを去年の時に考えていてま。それで探していたっていう
@Guest 08:50
あ、はい、なるほどなるほど、じゃあ着ら岩がある上でさらにちょっとこう使える、薄めな
@Guest 08:56
よ、さげなやつが欲しいなみたいなモチベーションだったんですね。そうです、そうです
@Guest 09:00
で、なんで組み合わせるかっていうと、ライブやりがモノリっぽになってるんですね。でャラuyとネクストj見合わせる
@Guest 09:09
アプリケーションのパッケージと、あと、その中でこうちっちゃなリアクトコンポーネントを作るみたいな。
@Guest 09:15
ああ、はいはい
@Guest 09:16
はい、パッケージを作ってるんですね。ただ、両方でそのチャクラuyを使うと、
@Guest 09:23
ネクストジーとチャクラui側からこうコンポネント参照すると、着ラuiのラタムが2つ入ること。
@Guest 09:30
ああ、はいはいはいはいはい、
@Guest 09:32
それはやめたかったんです。なんで、ちょうどゼランタイムのcsjsが流行ってるんで、
@Guest 09:40
ゼランタイムでcssを生成してくれて、なおかつ、そのネクストjとチャラ側から、もうそのコンポーネントのスタイルを
@Guest 09:50
定義してあげたかったんですね。そのま、ちょうど、テールウインドのテーマンの機能みたいな感じですね。うん、うん、うん、うんああいうのをアクトコンポーネント側を制御した
@Guest 09:59
あていうところがあったんです。当初リナリアを使ってて、バニラエクストラクトを知って、それに乗り換えたっていう感じなんですけれども、
@Guest 10:09
利点で言うと、1つあるのはタイプセーフっていう、ああ、うん、うんとこですかね。リナリアは要するに、あのスタイドコンポーネ、
@Guest 10:18
ほぼほぼスタイルドって感じ。そうですね。はい。
@Guest 10:21
あの、要するに、そのテンプレートの中にc説を書くやつなんですけど、も、はいはい、あれあれなんですけどもあ、やっぱりどうしても着わ的な
@Guest 10:32
肩で守られた指令戦争をきたかったっていうところが、モチベーションの1つですね。
@Guest 10:37
そうですね、サイルの形式だと、まあ結局なんでしょう。テンプレートストリングスの中に、単純にこうcssを書いてるだけっていうのがあるんで、こうjsらしさからはちょ。
@Guest 10:47
それはそうそうなんですようんで、それの他の特徴として言うと、そうですね。
@Guest 10:56
まさっき言ったように、そのcssモジュールのま方式で、これcssファイルを用意するんですけど、も。
@Guest 11:03
えっと、バニアエクストラクトの場合だと、そのcssファイルではなくて、えっと、ドットcstsっていうま、
@Guest 11:12
中身タイプ、スクリプトのファイルを
@Guest 11:15
平成です。ああ、
@Guest 11:16
なるほど、あ、インポートするときは、ドットcssっていう普段のcsインポートみたいなインポートの仕方できるけど、ま、ドットtsがついてるんで、tsファイルとして読み込めるみたいな。
@Guest 11:26
あ、そうそう、そういう
@Guest 11:28
感じのファイル名になってはい
@Guest 11:30
な、なんで、cssモジュールズの新セファイルをdsで書くみたいな。
@Guest 11:35
ああ、はい、なるほどな
@Guest 11:38
で。それをビルドのタイムの時に、そのバニラエクストラクトのえっと、ビルルプラグインがえっと、css
@Guest 11:48
ドットtsのファイルを取り出してで、ビルドタイムで、その中からcssファイルを生成。
@Guest 11:54
あ、はい、なるほどです
@Guest 11:56
そのプラグには結構あれですか。なんか、いろんななんか、ウェイパックとか色々あると思うんですけど、そのあたりのバンドラとかとうまくこう、色んなものに対応してるんすかね。
@Guest 12:05
あ、そうですね、はい、私のラパだとビット使ってるんですけども、おお、なるほどあります。え、あ、バックの中にウェブパック
@Guest 12:19
の公式プラグがあるんじゃないですか。おお、多分自分で書くのもそんなに難しくないです。ほんとに、
@Guest 12:26
tsファイルを、その既存のtsのビルドシステムと同じです。
@Guest 12:31
ああ、なるほど、じゃあ別にそんな特別なことしてるわけでもないんで、最悪自分でも書けるし、まあ、オフシャルなラグビーもしっかり
@Guest 12:37
ある。はい、
@Guest 12:38
そうです感じなんですね、おう、それはかなりいいですね。なんか、こういうのって、結構プラグインシステムがややこしいと、
@Guest 12:46
オフィシャルでサポートされてる技術しか使えないとかってなりがちだと思うんで、広く対応してくれてる、
@Guest 12:53
嬉しいとこでもそうですよね、かなり対応しやすい部分に入ると思うので、っぱりそういうところはいいですね。
@Guest 13:01
で、そうですね、ま、ライブやり、そのドキュメントを見てもらうと、いくつかライブやりが分かれてると思うんですけども、
@Guest 13:09
なんかいくつかapiって書かれてるやつですよね。あ、そうそうです。
@Guest 13:14
スタイリングapiとか、なんか、スプリンクルズapiみたいなのがあると思うんですけれども、あのコアのapiとしては、スタイリングapiです。で、
@Guest 13:25
これがやっていることは、えっと、単にそのオブジェクトで定義されたcsをビルド時のこう候補に入れるみたいな。
@Guest 13:37
ちょっと画面見せながらなになってしまうんですけども、あの、スタイリングapiのページじゃない。あの、スタイルっていうはい、
@Guest 13:44
ちょっと聞いてる人はぜひ、あのあれですね。あの、シートの方にはい、書いてありますんで、見ながら
@Guest 13:50
ぜひ見てください。はい、聞いてもらえると嬉しいです。でま、このまスタイルっていう
@Guest 13:57
あの、apiがあるんですけれども、このスタイルファンクションに、えっと、cssのオブジェクトを入れると、まあ、それが
@Guest 14:06
1つのcsとしてビルド人に出てくるっていう感じです。ああ、なるほどま、これがそのあのゼランタイムっていう
@Guest 14:15
言われているところのま方法の1つで、はいは、いま自分でそのクラスを作るっていうイメージですね。
@Guest 14:23
うん、うん、うん
@Guest 14:24
でま、これがそのコアのエピアになってて、でま、一応。あと、グローバルスタイルとかって言って、そのcssバリアブレスを
@Guest 14:34
あの定義するapaとかも用意されていたり、えはいします。
@Guest 14:39
で、結構あれなんすね、なんかしっかりこう。css側のパワフルな機能も使えるように付されて。
@Guest 14:45
あ、そうですね、はい、もちろんですね、なんでまテーマとかはほんとにその団体のやつっていうよりは、もうシス
@Guest 14:55
バリアブルスを全部出力するみたい。
@Guest 14:57
ああ、はいはいはいはい感じですな
@Guest 15:01
でま、これのapiだけだとまちょっとその書きやすさ的な面でなんがあるので、ま、その色の上にえっと、
@Guest 15:10
いくつかのっかってるっていうのが、そのスプリングルspiとか、レシピズapi。
@Guest 15:16
ああ、この辺りを使うと、まあ、ちょっと品出するものとかを楽に書きやすくなるので。
@Guest 15:21
あ、そうです。そうですはい、まあ、スプリンクルスapiのなんか最初の方に書いてあるんですけど、これはそのユーティリティ
@Guest 15:29
関数なんで、ま、そのテイルウィンド的な、そのショートハンドであったりとか、そういったのをえっと、定義するための
@Guest 15:36
です。あ、あ、はい
@Guest 15:39
でこれ説明がちょっと難しいんですけれども、ショートハンドか、あと、クラス名
@Guest 15:46
のえ、短縮みたいなのをえっと、まとめてこう宣言するみたいな感じになっていて、テイルウィンドとかだと、例えば、パディング
@Guest 15:56
の値がそのp配布なんとかみたいな感じにあらかじめ設定されてあげてると思うんですけども、それをこう独自で
@Guest 16:05
作るみたいな、うんうん感じですね。で、ディファインプロパティーズで、どの
@Guest 16:10
えっと、プロパティをどのクラス面に設定するかっていうのをま定義するっていうか、あの、これをやると、テイルビド的なユーティリティkのcssが出てくるうんでま、使う側も、それをそのまま使うことができるって。
@Guest 16:23
おお、なるほど、じゃあ、いくつかのcssのまとまりを変数名として定義できるっていう風な
@Guest 16:29
そうです。そうです、なんであのスタイリングapiのだけだと、結構冗長な感じになってしまうんですけど、もまここで
@Guest 16:38
頑張れば。えっと、まあ、着uyのepoを完全に多分も法できると思います。あ
@Guest 16:44
ああ、なるほど、スマートに書くためのが、スプリングレスの方に詰まってるって感じそうだそうです。
@Guest 16:50
これ、やりすぎてしまうと、あの生成されるそのcssがそのその宣言したユーティリティの数だけ全部出てしまうので。
@Guest 17:00
はい、なんで、あのあまりこう使わないようなスプリンクルスを宣言しまくってしまうと、ちょっと。
@Guest 17:09
まあ、あの
@Guest 17:10
シーセスのファイルが大きくなってしまう、そんなにあんまり気にするほどでするので、はいはい
@Guest 17:17
か、まとはいえ、なんか別にそこは自動的に使われてないのを、こう検出して省いてくれるってわけではないんで、ま。今定義しすぎには注意
@Guest 17:24
いう風な。はい、そう、そういうことですね。で、えっと、もう1つレシピsapiっていうのがあるんですけど、も、はい、これ。えっと、ステッチズを
@Guest 17:34
知らないと、ちょっと感覚が掴みにくいと思うんですけど、バリアブルーズという、cssのバリエーションを作る。
@Guest 17:42
ああ、はいはいはいはい
@Guest 17:44
ものになってて。例えば、スタイルドコンポーネンツで、そのプロップスにそのスタイルの情報を渡して、スタイルの
@Guest 17:51
例えば、ボタンの大きさみたいなのをプロップスで渡してあげて、でま。それに対してこうスタイルとコンポイントがスタイルを出すっていう
@Guest 18:01
あの、やり方があると思うんですけど、もま、それと同じような感じで、えー、バリエーションを宣言することができるっていうのが、レシピズapiになってます。
@Guest 18:12
なんでそうですね、これとかは割と使いやすい。まあ、結構そうですよね。
@Guest 18:18
なんか、アトミックなあの、コンポレントを作る時とかにはかなり重宝しそう。
@Guest 18:22
あ、そうです。そうですね、はいえ、
@Guest 18:23
うん、うん、うん、
@Guest 18:24
あしたらね。プロプスで、結構いろんなバリエーションを受け取って、表示を出し分けするようななんでしょうね。あの、これは、従来型のcssフレームワークのリアクト実装とかによくあるようなそうです。こうは、インターフェースを提供したい時には、
@Guest 18:35
便利そうな機能ですよね。
@Guest 18:38
そうですね、やっぱりそのスタイリングapaやだけだと使うcセスの数だけ全部
@Guest 18:44
あの書いていくっていうことになってしまうので、ま、こういったスプリングルスとか、レシピズで、バリエーションを持ったcssを出して
@Guest 18:54
開けることで、まあ、これまでのえっと、シライブやりにま近いかき持ちをうんうん0団体で
@Guest 19:02
自分で構築していくっていうところが、まあ割と味噌かなと思いました。
@Guest 19:10
結構あれですね、なんか、こう薄く作るときは別になんかそのあたりに頼らないでもいいし、よりこう大きなアプリケーションをメンテナンスしようっていう時には、ちゃんとそういう時に
@Guest 19:18
頼もしいものもついてるっていうのはよさそうですね。
@Guest 19:22
そうですよね、やっぱりあのシシスジェーだとなんて言うんですかね。そのおっきなものから、こう取り出していくっていう
@Guest 19:30
考えよりは、その小さなものを組み合わせて、シセスを作り上げるっていう感じになっていくと思うので、ま、それ
@Guest 19:40
がめちゃくちゃやりやすくなってる。うん、うんところがバニア、エクストラクトの
@Guest 19:46
特徴ですね。なんで、今回のようなコンポーネントを着の上に置く前提みたいな。結構特殊な
@Guest 19:55
用途だと思うんですけれども、そういったのもま、カスタマイズもやりやすいので、そういったのに対応できたっていうのは、バニラ、エクストラク。
@Guest 20:03
そうっすね、すごい良さそうですね。なんか、逆に1から定義するってなると、なかなかそういうこう共通化の戦略であったりだとか、効率的に記述する戦略がないと
@Guest 20:12
こう。冗長なところが
@Guest 20:14
コスト高くなりがちなんで。そうですね。はい、そこまでサポートが入ってるっていうのは、こうはい。小規模から中規模から大規模からこう特殊なケースまで、なんか幅広くカバーできるようになってるのは良さそうですね。こう、アトミック過ぎないってのが、
@Guest 20:28
こうある意味いいところかも
@Guest 20:30
しないですね。そうですよね、うんま、逆に弱点の面で言うと、やっぱりこう着u愛的なこう。
@Guest 20:40
最初からなんでもあるみたいなのは、やっぱりちょっと難しい。うん、うん、うん、難しいっていうか、技術量が多くなるって感じですね。
@Guest 20:49
ま、その初めに作る人がめっちゃ大変になるっていう感じですよね。そうですね、
@Guest 20:53
うん、
@Guest 20:56
なんで抜いてる面で言うと、独自デザインシステムとか。うん、うん、うん、うん。それは、talwindのカスタマイズとかいうレベルではなくて、
@Guest 21:06
もっと
@Guest 21:07
ま1からその会社で全体で使うようなデザインシステムとか。なんか、それこそuiフレームワークみたいなの作るときにかなり便利そうなそうですね、はい、うん、
@Guest 21:16
気はしますね。
@Guest 21:18
そういうところで、かつゼランタイムが欲しいってなったら、より選択肢だと、うん、うん。
@Guest 21:25
まあ、なんか、利用者側で、そのライブラリを使うことによって、あのファイルサイズが大きくなるとかって、かなりこう使うのをためらうモチベーションになると思うんで、確かに
@Guest 21:35
呼び出される側になるときに、かなりピンでそうな気はしますね。
@Guest 21:40
特に社内だけかもしれないですけど、社会とかも含めてこう不特定多数のユーザーが使うようなあ、シエーションにおいてこう。はい、強そうなそうそうですね、ですね
@Guest 21:50
え、逆にあれですかね、あんまり普段の案件とかだと使うことはなさそうって感じですか。
@Guest 21:55
どうですかね、うんまでも、ゼロランタイムは結構魅力的
@Guest 22:01
ではあるんですよね。例えば、ヤクトのコンポネートを公開するときとか、
@Guest 22:06
はいはいはい、
@Guest 22:08
やっぱりゼロなタイムって魅力的では。うん、うん、うんまでも普段の業務に結構なんていうんですか。共通コンポーネントとか作るの結構
@Guest 22:17
あるかなと思うので。うん、うん、うんま、そういった時に使いますし、まあ、単純にそのパフォーマンス的な目的で。
@Guest 22:30
まあ、でも多くはアプリケーションというよりは、ライブラリよりところで輝きそうかなっていう。
@Guest 22:37
そうですね、どちらかというと、そんな感じですね、
@Guest 22:41
いや、なかなか面白いですね、ワイライ
@Guest 22:45
そうですよね、なんか、結構バニライクストラクトもそうなんですけど、あんまりそのapiレベルでのアイディアって結構パクられるというか、
@Guest 22:55
あの、他のライブやりが導入される傾向が結構このcssjで多いかなと思ってて、この
@Guest 23:04
スプリンクルズもまあ、行ってしまえば、テイルウインドの真似とというか、レシピズピアも。まあ、そのスティッチーズのエピアを真似して
@Guest 23:13
作ったら、やりっていうところがあるので、なんでより、この元の
@Guest 23:20
ライブの設計の良さみたいなのが、今後なんて言うんすかね。生き残るというか、あの、よく使われるようなライブラリーの
@Guest 23:29
要素なのかな。
@Guest 23:30
あ、あ、確かに確かにもうなんか作りがシンプルな分真似はしやすいんで。
@Guest 23:37
そうなんですよね、
@Guest 23:38
そういったところにかなりこう、差別化ポイントが生まれるかもしれないですね。
@Guest 23:43
そういう意味では、やっぱりバニラエクストラクトって、今後もなんか生き残ってきそうだなっていうん、うん、うんところは感じました。
@Guest 23:52
私、基本的にcssジインジェイさんあんまりこう好きじゃない派というか、あまり支持してない話で、普段テイルウィンド側。はいはい、こう
@Guest 24:01
人なんです。そうですね、ま、ちょっと触ってみようかなっていう気持ちにはなるんで、かなりやっぱ面白そうな技術だなと
@Guest 24:07
思いました。
@Guest 24:08
ぜひ、なんか機会が
@Guest 24:09
あれって、なんか結構おピなま。それこそ、こうあのパフォーマンスのあ、要件が厳しいところで、リナリアを使うみたいな、そういうこう限定的なシチュエーションでのみこう
@Guest 24:19
使われるもので、あんまりスタイルドコンポーネントとかの体験は元々良いと思ってなかったんで、あんまりこう。csインジェースを
@Guest 24:26
ま、特にスタイルドコンポーネントの開発体験をいいと思ってる人は、実はあんまいない。正直思うんですけど、ただ、もう世の中には
@Guest 24:33
いっぱいあるせいで、スタイルとかもポリンとかこうシssインジをだんだん嫌いになるっていう経験は誰しもあると思うんですけど、なんか
@Guest 24:41
それ、そのタイミングでテイルミンドが出たことによって、結構私はテイルウィンド支持派になっちゃったんですけど、ちょっとマニライス、ストラクトは触ってみたいなっていう気持ちには
@Guest 24:53
触ってみようと思います。
@Guest 24:57
ぜひ、
@Guest 24:59
かなり面白そうですね、なかなかでも難しいですよね。このcssみたいなところも、人によって主張も違いますし、なんか何がいいかみたいなのも
@Guest 25:07
そ、そうですよねう。主張人によって全然変わるのがいっぱい出てくる
@Guest 25:13
かめ、珍しいですよね。こうなんか、jとかだったら、ある程度方向性とかは人によってこう。
@Guest 25:20
あの、違うところがあると、共通してるところも多いのが、なんかcssの話なのに、途端にみんなこう好き嫌いかなは別れるというか、
@Guest 25:27
なんなんなんですか。
@Guest 25:31
と1つは結構そのjsっていうのは、その設計の良さみたいなのが、主軸に置かれるようになったりして。
@Guest 25:40
そうですね。csイジースだと、その単純にあの早く書けるかみたいなか
@Guest 25:46
点があるかとか。そうですね、早く書けるかとか、あと、あの細かな
@Guest 25:52
細かな要望にどれがたい対応できるかはいいところとかってこう。なるほど、重視されがちな気はします
@Guest 26:00
すね。あ、そうそうそれこそあのユキュリティのクラスが出来上がったのって、結局この世にあの全部統一されてるバージンとパリングのアプリケーションが存在しないみたいな、こう問題も一定以上あると思っていて、なんかそういうこう
@Guest 26:13
なんでしょうこう理想的にはこうなんだけど、現実ってこうだよね。みたいなところが
@Guest 26:18
に、どれだけ対応できるかみたいなのも、結局テルウインドが支持されてるゆえでもあるのかなとか思ったりするので、こうなんかそういうのとか、
@Guest 26:26
なんか色んなこう、設計的な正しさだけじゃない、変数がたくさんある気が平成するとしますよね。
@Guest 26:33
確かに、どれだけ書きやすさを重視するのか、それともこうあの拡張性というか、そういう要望に応える
@Guest 26:41
機能の強さなのか、それとも逆にもう縛ってしまって、うん、うんこう。スタイルを
@Guest 26:48
ルールに縛って、かく書かせる保護を優先すると書いて
@Guest 26:52
そうっすね。なんか、その辺の戦いがあるんだろうな。
@Guest 26:59
いや、なんかこうなんでしょう。例えば、こうこれには対応できないんで、生のcssを書きますっていう結論になる、シチュエーションが1番こういう系の技術を使ってて、巻きになると思うので。なんかこう。
@Guest 27:10
それをこう作らないっていうのが、テールウインドウはすごい偉かったんだろうなと思ってて、なんかこう。
@Guest 27:15
シーフレイマークとかでめっちゃあるあるなのがほんとにこうここだけシss書きます。とか、
@Guest 27:20
従来型にやってありがちだったとは思うんで。いや、フレマークにないんで仕方ないだろみたいなやつだったと思うんで、こうそういうのが最近ないし、
@Guest 27:29
でもかと言ってこう全部自分で書くわけじゃないみたいなのがね。全部自分で書くと、結局そのcss設計みたいなんが色々出てきちゃったりもしますし、
@Guest 27:39
なんかこう単純に冗長出しとか、再利用せどうすんの。とか、色々話があったのが、だんだん解決されてきてるので、
@Guest 27:47
まあ、でもそれだけ意見があれば、まあ、みんな色々言いたいことはあるよなっていう風な感じなんだろうなとは思いますね。
@Guest 27:54
ただ、生でcssを書くことは本当になくなったの。
@Guest 27:58
そうっすね、かなりもう限定的なシチュエーションになった気はしますよね。それは、非常にありがたい、
@Guest 28:08
どう表現するか、
@Guest 28:09
どう表現するかっていうところな気がしますね。あと、あれですね、あの、最近で言うと、今え、ちょっとバニラ、エクストラクトの話もありましたけど、
@Guest 28:19
あの、
@Guest 28:20
そのゼロランタイムにするためのアプローチが何に依存してるかっていうのも、みんな気にしてる気はしますね。というのも、なんかこうあの、あんまりバベルが必須じゃない場合とかも
@Guest 28:30
最近はできてきてるかな。はい、思ってて、そういう中でアプローチがリナリアとかって、バベルプラグインじゃないですか。はいはいっていうのを
@Guest 28:37
かも、今後はなんか注目されたりするのかなとか、なんか、
@Guest 28:41
ウェブパックとバベルじゃないと動かせない、するなと指示がこうされないとかも、今後ありそうだなとか、あ、
@Guest 28:48
はいはいはいはい、ちょっと
@Guest 28:50
思ったりしますね。確かに
@Guest 28:53
あそ、そういう意味で言うと、バニーエクストラクトは確かにそのdsをコンパイルできればいい。
@Guest 28:59
そうっすよね、なんか、それがかなり強みでもあるんだろうなと思いましたね。
@Guest 29:05
確かにそうか、そうそうですよね、
@Guest 29:08
そうですね、もうもうバベルプラグインが必須っていう時代じゃなくなってきている気はするんで、そういうのも選択を分けるファクターにはなりそうかな。
@Guest 29:17
ちょっと思いました、
@Guest 29:21
すいません、ベめはい、じゃあそんな感じで、はい、閉めますか。
@Guest 29:27
はい
@Guest 29:31
ええというわけで、今回はですねえはめさんにえ。最近のcssinjsに関しての動向っていうところと、マニラエクストラクトについて語っていただきました。
@Guest 29:41
え、ラインのプロンペンド組織UITでは、このようなプロンペンドに関するえ、議論やディスカションなどをえ、日々行っております。
@Guest 29:49
え、これまでに、UIT INSIDEで公開されたエピソードの中には、社内の勉強会などから生まれたものもたくさんありますので、今後もえ、UITのえー中の事情っていうのもえ、どんどんえ、外部発信していければと考えております。
@Guest 30:03
え、また、このエピソードを聞いて、愛に興味を持っていただいた方は、えぜひぜひですね。小のと再確認方にあるえ、求人のえ、リンクからですね、カジュアル面談等とも連絡いただければと思います。
@Guest 30:15
今だとですね、えっと、ズームでお昼間にいつでも話せるような状態となっておりますので、え、もし、気になる方はご連絡いただければと思います。
@Guest 30:24
え、そして、最後にですけど、えー、UITeサイドについてのえ、ご意見やご感想は、えー。twitterのえ、ツイートなどで募集しております。
@Guest 30:32
ハッシュタグシャープ、UIT、アンダースコアインサイドにてえついていきます。とえ、スタッフの方で拾わせていただきますので、ぜひぜひお気軽にご意見、ご感想をついていただければと思います。
@Guest 30:44
というわけで、今回はcfsの最近の事情とマネラエクストラクトについて語っていただきましたはさんありがとうございました、
@Guest 30:51
ありがとうございました。
