@Guest 00:03
こんにちは、こんにちは
@Guest 00:05
こんにちは。
@Guest 00:07
それでは、今週もitインサイドやってきましょう。UIT INSIDEは、ユーザーインターフェースと、テクノロジーを愛する開発者のためのポットキャストです。
@Guest 00:17
最新のweb標準や開発、フェイマークの変遷、
@Guest 00:21
uyexに関することまで、様々なフロントエンドの情報をキャッチアップできるポットキャストをお送りしております。
@Guest 00:28
今回はですね、私、えっと、春とゲストとして、えっと、美ょさんと、あと、えっと、花倉さんをお呼びしております。
@Guest 00:38
お2人よろしくお願い
@Guest 00:39
しますよろしくお願いしま
@Guest 00:40
よろしくお願いします。
@Guest 00:44
今回はとリコイルについてのまあテーマなんですけれども、えっと、まあ、今回え。お2人をお呼びした理由は、ステート管理ライアリー
@Guest 00:53
について、まあ、あるえ、蔵司が深いお2人ということで、今回お詫びいたしました。
@Guest 00:59
では、えっと、まずはくらさん自己紹介をお願いしてもよろしいでしょうか。はい
@Guest 01:04
はい、じゃあ初めましての方は初めまして。えっと、ピクシブ株式会社、ブイレイドハブチームで、フロントエンドエンジニアとか。えっと、レイルスンジニアをやっている花倉と申します。
@Guest 01:14
えっと、趣味ではまあ、お絵描きとかdjをしているんですが、
@Guest 01:19
えっと、ちょっと前まで。えっと、ウェブ製の映像編集、ソフトデリールっていうものの研究開発をす。何か趣味でやってました。でま、その流れで。えっと、フラックス、フレームワークフルールっていう
@Guest 01:30
やつですね。えっと、それを作ったりしてます。
@Guest 01:33
えっと、で、あま、相棒はタイプスクリプト後、リアクトと後、アドビーラストレーターで好きなものは悪い顔のキャラクターです。はい、よろしくお願いします
@Guest 01:43
よろしくお願いします
@Guest 01:44
お願いします。
@Guest 01:46
えっと、では、えとうひょさんは、えっとま。2回目の登場ではあるんですけども、ちょっと。まあ、期間が空いてしまったので、おふさんも自己紹介をお願いしたいと思います、
@Guest 01:55
よろしくお願いします。
@Guest 01:57
はい、では、初めましての方の初めましてうひょうと申します。
@Guest 02:02
私は、ゲストと言いつつ、このline株式会社のフィナンシャル開発センターというところで、まあ、金融系のサービスのフロントエンドを担当しています。
@Guest 02:11
今、仕事で使ってるのは、まあ、タイプ作る人とリアクトですね。まは、くらさんと同じということで、ま、結構タイプ作る人には興味があって
@Guest 02:20
ま。キータなんかで、タイプスクリプトの記事、私が書いているのを、ご覧になったことがある方も多いんじゃないかと思います。まあ、最近はちょっとキータじゃなくて、個人の
@Guest 02:30
ブログの方に記事を集中させようとしたりしているんですけれども、そんなことで、まあ、私をご存知の方もいるかもしれません。
@Guest 02:38
あ、結構私自身はリアクトにも興味があって、例えば、リアクトのコンパレントモードとか、そういった方も、最近は積極的に調べています。
@Guest 02:47
こんなところですかね、どうぞ、よろしくお願いします、
@Guest 02:50
よろしくお願いしますお願いします。じゃあ、お2人ともタイプスリフトの強い方という認識で
@Guest 02:58
まちょ。ちょっと怖いですね。強いって言っちゃう。ちょっと怖いんですが、はい、
@Guest 03:03
詳しいということですね。はいちょいや、よろしくお願いし
@Guest 03:05
しますよろしくお願いします
@Guest 03:06
よろしくお願いします。
@Guest 03:10
えっと、今回のテーマのリコイルについてなんですけれども、
@Guest 03:13
まあ、まずリコイのえっと、まあ、内容っていうのはえ、先月ぐらいですかね。ちょうど1ヶ月前ぐらいにえっと、まあ公表されて、その当時は
@Guest 03:22
バズった感じで。まあ、割とそのfacebookが作り始めた新しいステート管理ライアリーっていうことで、こうリラックと比較されつつ、
@Guest 03:32
えっと、注目されたライブです。で、ま、そのけその内容については、
@Guest 03:38
えっとうさんが割ともう詳しくえっと、調べられていて、ログにもまとめられているっていうところです。
@Guest 03:45
で、まずそのリコイルの振り返りっていうのをおさんにお願いしたいと思うんですけども、ちょっと軽くどんなものか説明してもらえますか。
@Guest 03:53
はい、わかりました、リコ入りですね、本当に今からちょうど1ヶ月前くらいに出まして
@Guest 03:59
ま。リコでどこが作ったかというと、まあ、facebookが作ったリアクト向けのステート管理、ライブラリーなわけですけれども、
@Guest 04:07
確か、リアクトのヨーロッパの何かのカンファレンスで、最初発表されたんでしたっけね。
@Guest 04:11
ああ、そうなるほど
@Guest 04:14
ええ。それでは今facebookが出したってことで、ま。acebookは、リア友作ってる会社ですから、さすがにみんな驚いたんですけど、も
@Guest 04:24
ま、実際にまリアクトの公式のステート管理ライブとか、そういう位置付けではないわけですね。
@Guest 04:30
あくまで、facebookの何かのプロダクト開発のチームが、まあ、自分たちのために作った実験的なステート管理、ライブラリ
@Guest 04:39
ということで、まあ公表されたということです。
@Guest 04:44
はい、なるほど、
@Guest 04:46
はい、それでま技術的にどういう特徴があるかというと、まあ先程例に挙げられたリラックスとかとま、大きな違いがあるわけではないんですよね。
@Guest 04:55
というのも、ステート管理ライブラリって、大体、今、グローバルなステート管理が目的じゃないですか。
@Guest 05:02
はい、そうです
@Guest 05:03
あ、つまり、複数のまあ離れたところにあるコンポーネントでま同じステートを共有したい
@Guest 05:11
で、そういうことをするときにま、親のコンポーネントでステトどんと持って、そっからプロプス、バケツリレーとか、あるいは、コンテキスト
@Guest 05:19
でデータを渡すっていうことをすれば、まあできるんですけども。それだとまたくさんサイレンダリングが発生して、パフォーマンス的に問題がある
@Guest 05:29
ので、もっと効率的にサイレンダリングを行いたいなっていうのが、いろんなステート管理ライブの動機だと思うんです。
@Guest 05:36
はい、
@Guest 05:37
それでですねま、リラックスとかあるいは今回のリコイルもま、それに対して
@Guest 05:42
ま。リアクトのコンポーネントツリーとは、別のところにステートの親玉みたいなのを置いておいて、そこにコンポーネントが直接サブスクライブするという方式をとっています。
@Guest 05:53
それでですね、例えば、リラックスと比較した時のリコールの大きな特徴っていうのは、まあ、親となるステートが1つにまとまってないってことだと思うんですよ。
@Guest 06:04
リラックスの場合だと、たくさんリデューサーっていうのがあって、それをまとめて、1つのストアが上にこう。できると思うんですけど、
@Guest 06:13
リコイルはそういうまおっきなストアっていうのがなくて、まちっちゃいこのステート。これ、リコイルではアトムっていうんですけど、
@Guest 06:22
こういう後をたくさん並べておいて、コンポーネントがそこに直接サブスクライブするっていう特徴があります。
@Guest 06:32
うん、うん、
@Guest 06:34
またですね。アムを直接サブスクライブするだけじゃなくて、アトムから別の値を計算したりとか、あるいは複数のアトムの値をまとめるとか、
@Guest 06:44
そういうことをできるセレクターっていう概念があって、ま、これもリダクスのセレクターとはちょっと違ってま。コンポーネントは、セレクターに対して、サブスクライブできる
@Guest 06:54
という風になってます。
@Guest 06:57
はいはいはい、
@Guest 06:58
この辺りがリコールの特徴ですかね。あと、もう1つだけ言わせていただけるとすれば、apiが結構特徴的だなという風に思います。
@Guest 07:07
というのもま、具体的な細かいapiは、リコーデの公式ドキュメントとか、あるいは手前ミスですけど、私のブログ記事なんか読んでもらえればいいんですけれども、
@Guest 07:17
結構リコイルのアムを使うというフックがあるんですけども、それが原始的なというか、まあ、ほとんどユーズステートと同じapiで、
@Guest 07:27
まあ、そのユーズセットと同じペアを使って、アトムをどうアップデートするか、使うコンポーネント側の自由ですよ。みたいな、
@Guest 07:36
かなりま提供されるapiとしては、原始的なものになってる、これが、リコイルのとても大きな特徴だと思います。
@Guest 07:44
はいはい、
@Guest 07:44
ありがとうございますあれですよね、あの、僕もそのブログム記事で読んだりとか。あと、あの社内でも1度リコルで勉強会
@Guest 07:53
をしたんですけれども、ま、そこでも結構その原始的というか、ほんとにそのえっと、基本的な機能
@Guest 08:02
だけを提供しているっていうところがま注目されていてま
@Guest 08:08
でも、えっと、そのユーズステートとも、ほんと非常によく似た使い方を。えっと、リコではできる、はいっていうところ
@Guest 08:18
ですよね、ありがとうございます。なんか、そのりこえる、ぶっちゃけどんな感じでした。と見てみて、その使いたいどで言うとどんな感じですかね。
@Guest 08:27
あ、私はあ、これ大好きって思いましたね。最初見た時にもうそれこそおっしゃってた。この原始的っていう点が非常に素晴らしいなと思って
@Guest 08:38
というのも、はい、自分結構まあり物のステート管理ライブラリーっていうのがあんまり好きじゃなかったんですよ。
@Guest 08:45
例えば、おりゃあそう。例えば、リラックスにしても、あのリデューサーはいいけど、このアクションとかいう概念いらないでしょみたいに思って、
@Guest 08:55
はいはい、そうですね、
@Guest 08:58
まあ、うん。リラックスを裏で使いつつ、アクションを隠蔽した俺をリステート会員ライブだね。みたいなの作ってたりしたんですけど、まあでもそういうことをするなら、リコイルでいいじゃんってリコイルを見てから思うようになりました。
@Guest 09:10
はい、なるほど、そうそうですね、わかりますアクションは無駄ですね、いや、だいぶだいだいぶわかります
@Guest 09:21
あ、確かにそうよくい
@Guest 09:22
考えるとそりリラックスって、そのステートの管理するっていう機能と、アクション、そのアクションを提供するっていう2つ。まあ、おっきな機能があって、
@Guest 09:33
で、リコイルはその中でも、そのステートの管理に絞ったスリムなライブがいいっていうところが特徴ですよね。
@Guest 09:42
いや、もうなんかすごいこれでもうよくわかったこれでもう人にりこの説明ができます。それはよかった。
@Guest 09:52
はい、
@Guest 09:54
リコイルの。まあ、内容っていうのはすごいよく分かったと思うんですけど、今回、あの花倉さんをお呼びした理由の1つが自己紹介でも述べられたと思うんですけども、フルードルという、えっと、ステート管理ライブやりを開発されているという
@Guest 10:09
ところがあったりします。前情報によると、えっとまデリールと一緒に使うっていうことを。えっと、まあ元にして、そういう大規模なシングル、ペイデアプリケーションでもよく使えるような。えっと、まあ、フレームワークになっているっていう
@Guest 10:22
か、えことをえっと、読みました。はい、じゃあ、まずちょっとフルールの特徴などがあれば、ちょっと聞きたいんですけど、はい、どんな特徴があったりしますか。
@Guest 10:32
はい、そうですね、今、えーとはささんが言っていただいた通り、フルールは。えっと、デリールっていう何かまー、簡単に言うと、エアユテエとか、アフターエフェクとか。
@Guest 10:41
えっと、ああいうタイプの映像編集ソフトを作る時に必要になって作ったえ、プレームワークですね。はい、
@Guest 10:48
僕の勤めてるピクシブのえっと、ブロイドハブでのリラックスの開発チケとか。えっと
@Guest 10:53
と、その他。えっと、フラキシブルを使ってるピクシブスケッチっていうプロダクトとか。はい、えっと、そういうところでの開発知見を何か僕が勝手にまとめてま。何かこれがあれば、大体のアプリケーションは作れるよねっていうのをまとめたのが、えっと、フルールっていうやつです。
@Guest 11:09
はい、
@Guest 11:10
そうですね、えっと、特徴的なところとしては、えっと、リラックスとかに比べて、えっと、タイプスクリプトがあることを前提に作られた。
@Guest 11:19
えっと、フレームワークなので、えっと、高度の書き心地とか、型推論の当たり方とかは。えっと、リラックスよりも遥かに。えっと、めちゃくちゃいいです。
@Guest 11:29
もうなんか素晴らしい
@Guest 11:32
ついえいえつ。えっと、追加のライブラリとかなくても、なんか一通り。なんかリラックスでどうせみんなこれ突っ込むんでしょっていうやつが入ってて、なんかそ
@Guest 11:40
ここら辺に対して、ちゃんと型推論も当たるし、なんか、型推論のために余計なコード書かなくていいっていうのは、えっと、1番大事にして
@Guest 11:49
作ったところですね。はい、
@Guest 11:52
あとは、えっと、そうですね、あの、reダックスっていうあまあリダックとかって呼ばれて、非常にあの口だと紛らしいんですけど、reダックっていう、えっと、
@Guest 12:01
ディレクトリーの設計パターンとかをえっとま基本的に使ってくださいっていうことで、ドキュメントでもしていたりして、まあ、そうですね、なんか
@Guest 12:09
ちなんか、中規模以上のアプリだったら、作るときに、なんか必要なものはもう全て揃ってるみたいな。
@Guest 12:15
えっと、そうですね、設計パターンまで含めて大体入っているっていうのが、まあフルールのあの特徴です。とても使いやすい感じになっています
@Guest 12:26
で、えっとで、逆にちょっとフルールの弱いところとしては、えっと、小規模なアプリに対しては。えっと、リコイルとかモブxよりもちょっとあのこ
@Guest 12:34
すごく。あの1個の処理に対して書かないといけないことが多いので、まあ、ちょっとそういう小回りがききづらいところは、ちょっと苦手ポイントではあります。はい、という感じですね、
@Guest 12:44
あ、ありがとうございます。そうですね、結構そのデリールもあの、そのそれこそあアフターリを
@Guest 12:53
作るっていう、すごい壮大なもう大規模なアプリケーションっていうところから生まれたっていうところ。そうなんですけれど、も、ま、それでも
@Guest 13:03
ま結構そのほんとにその社内のそういう実理を
@Guest 13:09
大規模な治療をけえ、元にしたアプリ。えっと、ライブっていうところはすごい心強いところかなと
@Guest 13:15
ありがたいことに。あの、ピクシブコミックっていうサービスの一部ではなんだ。なんか、本番でフルールが使われているらしいという、なんかおうことです。
@Guest 13:26
じゃあ、実際に使われて
@Guest 13:27
はい、なんかね、確か、ネクストジェースと組み合わせた運用だった気がすしますね、ちょっとチーム外なんかでは、あまり詳しくないんですけど、
@Guest 13:36
はいはい、なんかそんな感じで使っていただいているという話を聞いております。
@Guest 13:42
いや、それはすごい心強いですね、フルールすごい軽くしかないんですけど、ちょっと見てみてまして。はい、あの
@Guest 13:51
ストアにあの、今ジェスのえっと、採用して作ったっていう結構そのストアってすごい。なんか、ストア
@Guest 14:00
管理ラリっていうぐらいなので、すごいコアなところではあるとは思うんですけれども、そこにこのマージsを採用ししたっていうのは、
@Guest 14:10
あ、結構そのプールにあったものだったからですかね。
@Guest 14:14
そうですね、えっと、一応フルールはえっと、リデューサーストアとクラススタイルストアっていう2つのえっと、スタイルのストアがあって、えっと、リデューサーストアではもう今ジ以外使わないでねみたいな感じで設計されていますね。
@Guest 14:28
えっと、で、ま、今ジーを導入した理由としては、まあ、もうなんか
@Guest 14:34
みつつうじゃんみたいな。なんか、イミダブルジェースがマジかで悩むのはもうなんかそういう時代じゃないし、なんか、
@Guest 14:42
あのストアのその変更を加えるときに、なんかマージュースが入ってないがために、そのあのドットドットドットステートみたいなのをなんか書いて、コードを煩雑にするのもなんか
@Guest 14:52
ち違うじゃんっていう。なんかうん、うん、うん、まあまあまあ使うでしょみたいな。えっと、読みでなんか入ってるっていう感じですね。
@Guest 15:00
で、逆にあの、どうしてもそのマージと組み合わせると、えっと、都合が悪いシーンっていうのも、えっと、多少あってま何かす。それこそ、えっと、映像編集ソフトだと、なんか、そのエンジンのインスタンスを直接いじらないといけないとか、
@Guest 15:14
なんか、3gsとかと組み合わせた時に、なんか3gsちょっとさんに持たせないと、
@Guest 15:19
あの設計の都合が悪いんだよね。みたいなことがある場合には、なんかクラススタイルストアを使って、なんかマージsをえ
@Guest 15:28
使わない。なんか、ステート管理もできるっていう感じですね。はい、
@Guest 15:33
うん、うん、
@Guest 15:34
そうですね、結構あれですね、僕もインタジーとマジならっていう、そういう結構
@Guest 15:43
自宅になった時とかは、大体マsいいなっていう思ったりとか
@Guest 15:48
する。まあ、そういうところにあの、なんていうんですかね。そのユーザーがこうき、あの決める必要のないもうあらかじめあのバンドルされてるっていう
@Guest 15:58
というところは、もう結構あのあれですね。あの、こうわざわざユーザーが
@Guest 16:06
それぞれ決める必要がないっていう。はい、メリットがありつつもま、ただそういうあのすごいあのカリカリの。えっと、そういう
@Guest 16:16
要望みたいなのには、ちょっと答えづらかったっていうところがあったあとですかね。
@Guest 16:25
か、カリカリの要望
@Guest 16:26
カリカリ、あ、あのあれですか。いい言い方が悪いあの、すごいあの、
@Guest 16:38
はいそ、そうですね、まあまあえっと、なんか結構えっと、
@Guest 16:43
hululはライバイっていうより、結構フレームワーク人として作っているので。やっぱどうしてもなんか細かいアクション。なんか、細かい処理
@Guest 16:52
がいっぱい増えてくると、ちょっと。なんか、やっぱ直接ステートをいじるとか、なんか、ユーズステートするとかよりはこりが
@Guest 16:59
悪くなっちゃうよね。というのは、まあ、ちょっと健労性を考えるんだったら、まあ、ちょっと仕方ないかな、というとこで捨てているというとこですね。
@Guest 17:09
うん、なるほど、なるほど、そうですね、あの、これあの完全に僕思いつきではあるんですけど、はい、あの
@Guest 17:18
ステート管理の部分だけ、例えばリコールを使うみたいな。はいことっていうのはかの可能なんですかね。そもそも、
@Guest 17:28
うんと多分フルールでは無理です。
@Guest 17:33
ちょ、ちょっとあの、そうですね、というのも、えっと、リコイルは結構そのリアクトのえっと、フクがあるということを前提で作られているので。ですが。
@Guest 17:44
そうですね、はい、確かに確かにフルあのフルールは、えっと、フルール単体だと、なんかリアクトであることには依存していなくて。
@Guest 17:51
えっと、逆に、えっと、リコイルをバックエンドにしようとすると、えっと、リアクトであることを
@Guest 17:56
前提とした。なんか、もうなんか、根っから書き換えないといけないので、結構フルールをそのままリコイルバックエンドにしようっていうのは、ちょっと
@Guest 18:05
無理って感じですね。
@Guest 18:06
あま、それはそうですね、よく考えたらはいまでもなかった
@Guest 18:10
や、僕もやってみるまで分かんなかったので、
@Guest 18:14
はい、そうですね、までもあれですかね。そのあのリコイルに限らず、そういう
@Guest 18:19
えっと、リラックス的な、そういうシングル、あの1つのえっと、ステートをこうなんてすかね。から、あの必要なところを取っていくみたいな考え方以外にも、こういう
@Guest 18:31
あのはいまだえリコとかモブエみたいなこう、細かいやつを組み立てて、必要なステートをはい、組み立てるみたいな。はい、そういう
@Guest 18:41
考えっていうのはま、結構あれですよね、その
@Guest 18:46
そうですね、なんか結構使えるかもはい、使えると思います。ただ、それをフルールという名前でやることは多分ないですね。
@Guest 18:53
ああ、はい、なんか別のライブラリで書くことはあるかもしれないです。
@Guest 18:57
お、ほうほうほう、それは興味
@Guest 19:01
まあ、ちょ、ちょっとまだ研究中なのであれなんですが。はい、そういう感じですね。
@Guest 19:09
はい、お、お待ちいただけると、
@Guest 19:11
今後はい、もし何かあったらはださいはい、やっていきましょうね。はいはいで、えっとまリコイル
@Guest 19:21
のあの話に戻りまして、えっと、リコイルは結構あの、その
@Guest 19:27
説明でもあった通り、すごい電子的なapiということでした。で、
@Guest 19:32
あのまリアクトを使うこと前提っていう制約自体はまああるものの、それ以外のそういう提供する機能っていうのは、ほんとにシンプルで。
@Guest 19:42
で、あの、ほんとにそのスケートの管理だけっていうところが特徴ですよね。はい、ではいということはすごい
@Guest 19:51
あの拡張性みたいなのもあると私は思っていて、例えば。なんか、そのリコイルって、
@Guest 19:58
アクションのあの方法みたいなのが全然考えられてなくて、ユーザーが考えない、考える必要がある
@Guest 20:05
ところではあるんですよね。ま、逆に言うと、それはユーザーは何でも使ってもいいっていうところで、ま。例えば、そのリコイルを
@Guest 20:15
こうリコイルをつか、直接使わずにリコイルをベースとした。なんか、もっとこう
@Guest 20:20
メタライラ的な。そういうリラックスで言うと、リラックスサンクみたいな。そういうこう、リラリコイルの上に乗っかるような、そういう
@Guest 20:29
ステート管理ライブやりみたいなのもま、今後あるかもしれないと思っているんですね。で、あ、そのライブやりには限らなくてもいいんですけども、
@Guest 20:37
あの、もしよかったら、そのリコイルをもし今使うとしたら、
@Guest 20:43
ま、どういうところにこう向いてるかとか、どういう使い方ができるかなっていうところをちょっとえ聞いてみたいなと思っております。
@Guest 20:52
えっと、これ、あの、それぞれ3人にちょっと聞いてみたいと思うんですけど、もはい、えっと、私あ、じゃあ私からちょっと。
@Guest 21:01
まあそうなリコイルをま使う使い道みたいなのっていうところの話は言うと、僕リコイルで、
@Guest 21:11
最もあの足りないところは、そのアクションが全く、その
@Guest 21:18
ユーザーの管理に委ねられているっていうところが、あの、まだ自由度があるなと思。
@Guest 21:26
リコールでの説明で、ちょっとあの気づいたところで言うと、あのセレクセレクター
@Guest 21:34
に、あの、そのゲッターゲッターというか、まあ、セレクターそのアムをまとめ上げるセレクターにそのゲットを宣言、できるだけではなくて、セットをえっと、宣言できるっていうところっていう説明があって、ま、そこ
@Guest 21:49
結構その1つのそのセレクターに、そのゲットとセットが同居してるっていうところが結構あのな、混乱を招きそうなところかなとは
@Guest 21:58
持っていて、はいでは、逆になんかその今だと、そのセレクターとか、アトムとかゲットしか考えられてないけれども、
@Guest 22:08
例えばせセット専用のセレクターみたいなのを
@Guest 22:12
新しくベッド作ってあげてま。そこを通してのみこう、ドラムを変更できるようにするみたいな。はい、形みたいな
@Guest 22:21
使い方っていうのがすごいあのシンプルかなと思ってます。なんか、あんまりあの伝わ
@Guest 22:31
てるかどうかちょっとわからないですけど、要するに、そのはい、セレクターが2種類あって、そのゲット専用のセレクターとセット専用のセレクターみたいなのを
@Guest 22:41
を作ってみるのも面白いんじゃないかな。と。はいで、そのセット専用のセレクターがいわゆるアクションの代わりになるみたいな。
@Guest 22:51
はい、なるほど
@Guest 22:52
てい
@Guest 22:54
わかります、わかります
@Guest 22:57
いや、そこの説明で伝わってれば嬉しい結構そういうそのわざわざセットっていう
@Guest 23:05
機能をセレクターにもつけたことは、なんか、どうせなら、使ってもみてもいいんじゃないかっていう。僕はそこのあの活用して、ま
@Guest 23:16
あわよくば、それをこうラッピングしたライブラリーみたいのも、まああってもいいんじゃないかなと思いました。はい
@Guest 23:24
っていうところですね。はい、じゃはくさんは、なんかリコイル使ってみようと思いましたか。
@Guest 23:31
そもそも、えっと、ぶっちゃけ。えっと、イエスか農家で言えば、割とのよりって感じですね。
@Guest 23:38
あ、えっと、一応ちょっと色々調べてはみたんですけど、結構ちょっと今のまんまだと、えっと、ユースケースが非常にちょっとせ
@Guest 23:46
狭いや、あの、あれですね。ちょっと、僕の想像力が及んでいないっていうところもあるんですけど、
@Guest 23:51
ちょ
@Guest 23:52
とそうですね、リコイルを素で使うことは、まあまずないだろうな、という感じではありますね。えっとたリコイルただつか、どうしても使いたくなるとしたら、なんかえっと、ほんとになんか
@Guest 24:05
でかい。なんか、サイトのほんとに1ページだけ
@Guest 24:08
ほあ、マジで1ページだけのなんかページで、ただ、ちょっとそのページでなんか色々操作をしないといけない。なんか、複雑さがあってみたいな。
@Guest 24:15
そうですね。な、なんかそれこそえっと、サービスのか、ちょっと複雑目の管理画面とか、なんか、そういうところでリラックス入れるほどじゃないけど、
@Guest 24:25
なんか、ステート管理が欲しいなっていうシーンだったら、えっと、なんかリコイル使うのは全然ありだとは思っています。
@Guest 24:32
なるほど、
@Guest 24:33
うん、はい、そうですね、えっと、ゲットする時だけだったよな。えっと、足にちゃんとアシク使えるっていうのが、なんか非常にあのいいですね。
@Guest 24:43
あの、リラックスとかだと、結構そのアシンカーウェイ
@Guest 24:46
と、あの、非同期アクションって、なんか、リラックスサンクとか、リラックスサーガとか入れないと対応できなかったので、結構なんか
@Guest 24:53
ちょっと気軽に使うには。あの、腰が重い感じだったんですけど、その点リコイルはなんかちゃんとゲットする時になんか
@Guest 25:03
あ、非同期処理が使えるので。まあ、なんかapiとか気軽に叩けるし、まあ、なんかそうですね。なんか、リラックスほどでもないけど、なんかとりあえず入れとくかっていうし、ではあり
@Guest 25:13
という感じですね。で、そうですね、えっと、リコイルをライブラリン使うのはありだと思っていて、
@Guest 25:21
えっと、で、えっと、1回ち。そのリコイルを調べるために、ちょっと軽くライブラリーを作ってみたんですけど、
@Guest 25:30
えっと、まふるるっぽいやつですね。えっと、ま、フルルっぽいやつを作ってみたんですけど、えっと、セレクターをのゲット
@Guest 25:39
ゲットでは、えっと、アトムにセットできないんですね。
@Guest 25:44
えっと、こ、これがえっと、フル今のフルーのapiとえっと、何何がえっ、
@Guest 25:51
食い合わないかって言うと、えっと、フルールには。えっと、そのオペレーション層っていう。なんか、apiと非同期処理をして、アクションを起こしたりする層があるんですが、
@Guest 26:00
はいはい、
@Guest 26:01
えっと、そのセレクターのゲゲットをした時に、えっと、
@Guest 26:07
アトムに対して状態の更新ができないので、えっと、apiから引っ張ってきたデータをローカルでキャッシュするみたいなことができないんですね。
@Guest 26:14
ああ、なるほど、
@Guest 26:16
うんはい。なので、多分そのフルールで言うと、このオペレーションは、えっと、多分セレセットセレクターを使っ
@Guest 26:25
てやらないといけないんだけど、セットセレクターが、えっと、
@Guest 26:30
プロ。えっと、プロ水をスローできたかどうかがちょっと覚えていなくて、うん、ちょっとそこら辺考えると、フルールの考え方のまんまでで、同じようなライブラリをつ
@Guest 26:39
来るのは、ちょちょっとち。多分違うんだろうな、というところまではわかっているっていう感じですね。で、やっぱアントセレクターちょっとあの、
@Guest 26:49
やっぱ個個人で管理すると、キーがめちゃくちゃになったり、そのセレクターからのセレクターへなんか依存したりとかが全然できてしまうので、
@Guest 26:57
やっぱフレーム枠作るんだったらそうですね。そこらへん、なんかどういう単位で、アクションアクションとか、オペレーションするかとかは、
@Guest 27:06
ちょっと考えていかないといけないかな、というところですね。
@Guest 27:11
確かに、キーの管理が今、自分もものすごく悩ましいなと思ってるんですよ。特に大きくなればなるほど、これだけはい、管理したもんかって、
@Guest 27:22
やっぱユニーク製の担保をしなきゃいけないわけですよね。キーを定義するときに、
@Guest 27:27
そうですね、あれ、大変ですね、
@Guest 27:29
いや、ものすごい大変だなと思っていて、やりこう。大好きになりましたけど、その点はどうにかならなかったのかなって正直思います。
@Guest 27:38
うん、ま、あとはいえ、そこら辺は結構そうですね。えっと、なんかでかい
@Guest 27:43
でかいアプリケーションの全態の状態管理をさせようと思うと、ネックになるんですけど、なんか、ちょっと複雑なコンポーネントを局所的に状態管理したいう上では。なんかまあ、そんなに問題ならないところはあって、
@Guest 27:57
ちょっとそうですね、結構難しいんですよね。そのライブ
@Guest 28:00
ライブラリーとか、フレームワークを作るにしても、でかいアプリをターゲットにするのか、その局所的な複雑さをターゲットにするのかによって、結構apiの設計
@Guest 28:10
が変わってくる感じがあって、ほうほうで、名前でなんかでかい
@Guest 28:14
アプリ向けに作るんだったら、名前、空間の管理とか、そのreダックパターンのディレクトリと、なんかその名前。えっと、キーの名前、空間を一致させて、なんか自動的に作るみたいなやつがある
@Guest 28:27
手もあるんですけど、なんか小さい小さい、
@Guest 28:33
なんか、梱包ね、局所的な複雑さとかに向けるんだったら、なんかキ適当でもいいじゃん。なんか、ssrするわけでもないし、みたいな
@Guest 28:40
考え方もあるので、結構なんかま、そこら辺柔軟にしてくれたのはなんかいいところもあるし、悪いところあるし、なんとも言えねえっていう感じですね。
@Guest 28:49
なるほど、なるほど
@Guest 28:51
はい、そうですね、ちょっとキーの管理はまあでかいやつめけだったら、なんかちゃんとフレームワーク側で担保してあげたいやつですね。
@Guest 28:59
ま、確かにこれはあのライブやりがそのメタライブやりが、えっと、管理する前提でのものかもしれない
@Guest 29:08
そうですね。うん、
@Guest 29:13
まあ、ちょ、ちょっとどういう設計しそうです。そうなったのかまでは、ちょっとあんまり詳しくはわからないんですけど、まあ、
@Guest 29:21
ssrとか考え出すとそうですね。なんか、キーを勝手に付けてしまう
@Guest 29:28
いうのは、結構でかい話になってしまうので、あのフックくらいなんか、呼び出し順序とかが決定的なら、なんかキーを自動的に作るみたいなことも多分できたと思うんですけど、結構その
@Guest 29:41
アトムとかセレクターって、あの、普通にモジュールとしてインポートされたり、エクスポートされたりするんで、なんか自動的に決める方法がな。多分、
@Guest 29:51
多分結構無茶しないと難しいんだろうな、というのはありますね。
@Guest 29:58
ま、そうですね、シンプルさに寄せるんだったら、今の形が多分ベストなんだろうな。応用は応用はできるので、という感じですね。はい
@Guest 30:07
はいはいあ、ありがとうございます。そうですよね、そうですね、キーをなんかそういうあの残す
@Guest 30:13
キーをそのユーザーに書かせる理由みたいな。僕もちょっと気になってて、ま。そこを確かにそういうあの、
@Guest 30:22
あのリコイルが中で持ってるっていうその勝手に作って持つっていう手段もあった中で、あえて、そういうキーを
@Guest 30:31
ユーザーに欠かせるっていうのは、まあ、そういうシンプルさをと、まず、第1に優先した
@Guest 30:40
ところかもしれない
@Guest 30:41
そうですね。ちょっと神の味噌汁という感じなのですが、
@Guest 30:46
はいままやりようはい、いくらかあるという感じですね。うんうん
@Guest 30:52
やみささんなんか、あのアイアとかこんな使い方してみたいみたいなのあったりしますか。
@Guest 31:00
あ、そうですね、私は今とてもこうなんか後を隠蔽することにすごい可能性を感じていて、
@Guest 31:07
はい
@Guest 31:08
っていうのもあっていうのは。まあ、実際にグローバルのステートが入ってる場所だったんですけど、
@Guest 31:15
ま、リコールのapi使うと、その後を直接サブスクライブしてま。コンポーネントが自由に読んだり、書いたりできてしまうと。
@Guest 31:23
でも、社内でちょっと勉強会した時に、それって、複数人の開発の時が大変だよね、みたいな話が出ていたんですよね。
@Guest 31:33
アトムそのものに、なんかロジックとか何も付随していなくて、完全に使う側に委ねられてしまっている
@Guest 31:41
から、あっという間にカオスな状況になってしまうんじゃないか。なので、そこで、まあ、カスタムフックとうまく組み合わせれば、
@Guest 31:49
うまくいくんじゃないかっていうのが、自分がちょっと思っていることで、
@Guest 31:53
まあ、私が今考えている設計パターンは、こうアトムとまそのアトムを使うためのカスタムフックを同じモジュールに書いて、
@Guest 32:01
カスタム服だけエクスポートします。みたいな、
@Guest 32:05
そんな感じのま。これは、リコイルをラップして、別の生徒会員ライブラで使うとかいう話じゃなくて、ま割とリコイルを生で使うに近い話ですけど、も、
@Guest 32:15
はい、
@Guest 32:16
そういう風にも直接アトムを直でコンポーネンとか触るのやめて、全部カスタムフックで
@Guest 32:23
触るようにすればいいんじゃないかな。ってのがちょっと思っているところで
@Guest 32:27
は、い
@Guest 32:28
ま、そうするとまユーザーからしたら、なんか便利なグローバルなステートを持ったカスタムフックがありますよ。みたいな感じのapiに見えるわけですよね。
@Guest 32:38
はい、
@Guest 32:40
そうなんか、生の後も露出するんじゃなくて、全部カスタムフックを、まあ、グローバルなステートを持ったカスタムフックを作るための便利な手段として、なんかリコイルが
@Guest 32:50
使えるんじゃないかなって、今はちょっと思っています。
@Guest 32:54
なるほど、フックフックでアムをラップする。なるほど、なるほど、
@Guest 33:03
これもすごいあれですよね。あ、あのリアクトフクらしい考え方っていうか、まさにリアクトク大活躍
@Guest 33:11
そうですね、もう、リアクトフックといえば、カプセルか隠蔽が全てみたいな感じで思っているので。
@Guest 33:19
はい、
@Guest 33:20
そのカスタムフックのやり方に対して、まあ、グローバルなステートっていうピースを足してくれるのがリコレなのかなと。ちょっと思うところはあります。
@Guest 33:33
うん、うん、うん、そうですね、あの、僕のさっき言ってた意見もまあか、勝手には
@Guest 33:41
あの近いアイデアっていうのを持っていて、そういうステートを提供する側が、そのみに入るところを
@Guest 33:51
自由に制御することができる。ええ、アトムをまそのまま出すこともできるけれども、むしろそれをこう
@Guest 33:58
うまいことをラップして、うん、そういう
@Guest 34:01
あのゲットゲットをラップしたものであったりとか、あと、僕のアイデアだと、そのセットをまあ、セレクターで通してのみ提供するみたいな。そういう
@Guest 34:11
私だったら、そのセットの部分をカスタムフックを通して提供するかなみたいな、ちょっと思いました。
@Guest 34:18
ああ、はいはいはいはい、
@Guest 34:20
なんか生のこのアップデート関数は露出させないで、1増やす関数だけ露出するカスタムフックを通じてみたいな。
@Guest 34:28
おははいすると、まあ絶対に位置ずつしか増えないステートがまあできるわけじゃないですか。
@Guest 34:34
はい、
@Guest 34:35
なんかそういう感じの、まあ、隠蔽っていうんですかね。みたいなことをやっていくのがいいんじゃないかなって、個人的には思ってますね。
@Guest 34:43
そうですよね、結構え割とおそのほんとにリコ入りの素直な
@Guest 34:52
活用方法みたいなそう。あの、
@Guest 34:55
無理にそういうあの別ライバリーを用意するみたいな話ではなくて、ほんとにそのリコールの活用方法の1つっていう、すごいすごいデを使いそうな
@Guest 35:05
そう感じのそう
@Guest 35:07
なんすよ。すぐに電話っていうか、今つく担当しているプロダクトにちょっとリコイル入れてしまいました。すに
@Guest 35:11
早いな、なるほど、
@Guest 35:16
すごいや、プロダクション1番乗りを目指したいくらいですね。ほんとは、それはさすがに怪しいですけど、
@Guest 35:24
いや、ご報告をお待ちしております。いや、ぜひ聞いてみたい。その話は
@Guest 35:30
はい、うまくいけばぜひ
@Guest 35:32
ぜひ、また後、ほどきお聞かせください。はい
@Guest 35:36
はいはい、お待ちしております。もう、リラックスを1度入れてしまったプロダクトにリコールを差し込むとこはなかなかないので、
@Guest 35:43
それは確かに
@Guest 35:44
確かに
@Guest 35:48
はいはい、そうですね。あと、リコイルはssr対応は個人的に気になってますね。なんかや、やる気はありそうというのはどこかで見たんですが、
@Guest 35:59
そうですね、もうどうなんですか。
@Guest 36:01
なんか、ネクストジュースと一緒に使ってみて、動いたって報告と動かなかったって報告が両方あってよくわかんないんですけど、
@Guest 36:08
ああなるあな、なんか確か。まだ
@Guest 36:12
エクスペリメンタルなapiを叩いて、なんかステットを取るみたいな感じだった気がするので。あ、
@Guest 36:19
ちょっとおよく覚えてないんですけど、なんかそうですねえ、ssr対応はまななんかできれば欲しいという感じはしますね。
@Guest 36:29
そうですね、
@Guest 36:30
うん、なんかうん、あのし、あのははからっていうか、あのaki見た見盛りだとそんなに対応難しくないかなっていう
@Guest 36:39
感じはしたんですけど、なんか困難な点とかああったりするんですかね。
@Guest 36:45
そうですね、えっと
@Guest 36:47
と、リコイルでssrをしようとすると、えっと、まずリアクトが。あの、これはリアクトサスペンスの問題なんですけど、え、
@Guest 36:56
あ、すいません、これは、ネクストジェスとかじゃなくて、素。なんか、ssrをしようとしている時のケースです。えっと、
@Guest 37:03
サスペンスの問題として、まあ、なんかあのレンダリングが完了したかどうかって確かまだえっと、ちゃんとわかれなかったはずで、
@Guest 37:13
なんかそう。サーバー上でえっと、apiを叩いてサスペンスされたけど、リアクトドムレンダトストリングはなんか終わってるから返すねみたいな感じで、
@Guest 37:22
なんかなっちゃうとかそういうことがあるんで。結構素リアクトを使っている場合だと、
@Guest 37:28
リコイル。うん、そうですね。で、そのリコイルので生成された状態を。えっと、1回全部ジェイソン出して、あと、
@Guest 37:36
えっと、クライアント側でまたえっと、その状態を復元するみたいな処理一連の処理ができないとそうあのサーバーサイドレンダリングの結構コアな部分では使えないっていう感じになりますね。
@Guest 37:49
あ、そっかそうですね、あれですねあの、あのサーバーサイドレンダリング、レンダリングするところまでしか考えてなかった。それを、そっか、クライアントに
@Guest 37:57
状態を送らないと。はい、それは確かにそうですね。うん、
@Guest 38:02
そうですね、なんかそこらへんの。なんか、一連の流れがリコでできると、結構
@Guest 38:11
結構なんか、ちゃんとした状態管理ライブラリーのとしては、なんか文句なしっていう感じになるかなという感じですね。
@Guest 38:21
ま、ネクストそうですね、はい、ネクストとかを使ってると、ゲトシャルプロップスで全部終わっちゃうので。いやとはいえ、なんかその
@Guest 38:28
ネクストジュースでも、なんかリコイルバックエンドにしようとすると、やっぱりそういうことはできないと。そうですね、という感じですね。
@Guest 38:38
なるほど、
@Guest 38:39
そうですね、じゃあまりこええと、ネクストに限らず、そういうサーバーサイドになり、その逆ト全般でサーバーサイドリンダリングの対応っていうのは、
@Guest 38:49
まあ、あのまだそういうできたっていう報告とできなかったっていう報告があるのか。
@Guest 38:58
そうなんですね、大変ですね、
@Guest 39:03
まあまあまだで出たばかりのライブラインなので、これから
@Guest 39:06
あ、そうですよ。そうですよ、そうですまた
@Guest 39:08
まだ1ヶ月ですもんね、もう、みんなだいぶリコールの話しなくなってきたんで、1年くらい経ってたかと思いましたよ。
@Guest 39:22
まあ、これからやってくれるとは思いますね。
@Guest 39:24
え、あ、単純にあれですよねああ、あの新しく出たから飛びついてこう、新しい新しい物好き
@Guest 39:33
が集まったっていう感じはしたけれども、実はちゃんとこう。あの、ほんとにそういうなんか、この
@Guest 39:42
飛び道具的なライブラリではなくて、すごい今後の根幹をなす可能性のあるライブやりで、多分
@Guest 39:50
なんかもっとあれですね。その話題、話題にはなってないっていうこと、あの、その話題
@Guest 39:57
がなくなったって、はい、多分みんなこうちゃんと着々と実量は進むっていう雰囲気はしますね。でも、
@Guest 40:05
そうですね、はい、個人的にもリコール大好きになったので、ちゃんとプロダクション実績とか作っていきたいなとは思ってます。
@Guest 40:14
そうですね、じく実際に使って出していきたい。
@Guest 40:16
そうですね、調子悪い
@Guest 40:18
ありますはい、そうですねふ、フルールもなんか結構フルールもそうですね、結構ちょっと
@Guest 40:24
apiがまだリアクトサスペンス向きじゃなかったりとか、古臭いところあるんで、なんか、リコイルをうまく取り入れて、なんかいい感じのライブライとか、フレーマークとか作れるんだったら、あのやっていきたいなっていう気持ちはあります。
@Guest 40:37
うん、ぜひぜひ楽しみにしております。はい、では、何か他に話したいこととかはありますかね。
@Guest 40:47
あ、そういえば、なんかうひょさんが、えっと、リコイルで副作用をどうしようみたいな話をしていたのがちょっと気になっているのですが、
@Guest 40:54
はい、
@Guest 40:55
なんかどどうですど、どうですっていうのもあれなんですけど、なんか、そのapiの通信とか、もう、なんか、普通にセレクターで頑張ってやっちゃっていいみたいな
@Guest 41:04
感じですかね。
@Guest 41:08
ああまあ、通信の結果がプロミスとしてきたときに、
@Guest 41:13
まあ、それをリコイルのま非同期サポートに載せるのはま、とてもありだなと思います。ま、これから、リアクトのコンパレントモードとかも出てくる中で、
@Guest 41:22
はい、例えば、apiを叩くところとか、個人的には無理にセレクターのセットを噛ませるとか、そういうことまではしなくていいかな。
@Guest 41:29
まあ、適当に別に叩けばいいんじゃないかなとは思いますね。
@Guest 41:35
はあ、なるほど、別別に叩くっていうのは、なんかその
@Guest 41:40
例えば、そのコンポーネントの中で、えっと、なんだろう。このえっと、イベントハントラーの
@Guest 41:48
中で、なんかapiを呼んで、その結果をなんかセレクターのセットとかに載せるみたいな、そういう感じにすればいいみたいな感じですかね。
@Guest 41:57
もうそうっすね、例えば、ちょっとま、実際に試して言ってるわけじゃないんですけど、
@Guest 42:04
あ、それこそコンカレントモール念頭に置くならまあapi叩きますプロミスをもらいます
@Guest 42:11
プロミスをまともにツッコミますくらいがま。多分1番単純な形かなと思っていて、多分もしかして、それくらいでもいけるんじゃないかなとは
@Guest 42:20
ちょっと思うんです。
@Guest 42:22
はい、なるほど、なるほど、はい、わかりました、ありがとうございますなんか考えます、
@Guest 42:31
ちょっと私もまだちゃんと考えたわけじゃないので、そこはぜひ色々研究していきたいところではありますね。
@Guest 42:38
そうですね、やっていきたいですね、
@Guest 42:41
はい、コイル本体は副作用がどうのとか、多分まだ全然行っていないので、はい、研究する余地は多分とてもあるところなんだと思います。
@Guest 42:51
はい、
@Guest 42:52
ありがとうございますえ、というわけでえ、今回はえっと、リコルをテーマにえっと、2人にお話を伺いました。
@Guest 43:02
私達UITのメンバーが所属するえ、line株式会社では、え、このようなフロントイングに関する議論を行っております。
@Guest 43:11
こ、こういった感じのえっとま、リコイルのテーマというところとかは。えっと、まあ、社内勉強会でも、まあえ
@Guest 43:19
え話した成果でもあります。今後もえっとまあいてにされては。えっと、このような感じで、社内社、外問わずどんどん情報を発信していきたいと思います。
@Guest 43:29
またえ、twitterでのハッシュタグはシャープUIT INSIDE、エピソードのご意見やご感想、リクエストなど、ぜひぜひご気軽にツイートしてください。
@Guest 43:39
それでは、えっと、2人はくらさん、えおさん、ありがとうございました、
@Guest 43:45
ありがとうございました、
@Guest 43:46
ありがとうございました。
