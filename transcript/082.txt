@Guest 00:04
こんにちは、UITの玉田です。今回もitサイドを始めたいと思います。
@Guest 00:11
UIT INSIDEは、ユーザーインターフェースと、テクノロジーを愛する開発者のためのポットキャストです。
@Guest 00:17
最新のウェブ標準の動向や開発、フレームワークの変遷、uyやuxに関することまで、毎週フロントエンドの情報を発信していくことを目的としています。
@Guest 00:28
ハッシュタグはシャープ、UIT、アンダースコアインサイドエピソードのご意見やご感想はいつでもお待ちしております。ぜひぜひツイートしてください。
@Guest 00:39
でえ、今回はですね、b3とtxxを使ってみたという会で、今回、私と同じくuytのチャンフィさんと山本さんを
@Guest 00:51
のえ、3人でお話ししていきたいと思います。それでは、2人よろしくお願いしますよろしくお願いしまします。はい
@Guest 01:02
でですねえ、今回え、お話したいことについてなんですけども、この3人が今何をしているかと言います。と、
@Guest 01:09
現在新規プロジェクトをえ、絶賛開発中でして、で、そのプロジェクトで、えっとま、
@Guest 01:16
もちろん、フロントエンドのアプリケーションの開発を進めているんですけど、もまその中で、今はえーと、技術スタックとして技術を使ってえ、開発をしています。
@Guest 01:28
さらにえビュー3にえ、txxを組み合わせた形で、アプリケーションを構成しています。
@Guest 01:37
で、tsxというのはですね。タイプスクリプトとま、jsxの組み合わせ
@Guest 01:44
でそう呼んでいるんですけども。まあ、つまり、えっとまjxを使うっていうことなんで、まげビのゲンダーファンクションを使うという
@Guest 01:53
ところで、これをえーと、ビュー3で組み合わせるということは。
@Guest 01:59
今回コンポジションインペアも使っていまして、ま。そこで、セットアップ関数でま通常であれば、
@Guest 02:05
ま、例えば、こうえー、レフとかリアクティブの値をこう返すっていう形になってるんですけども、そこで、レンダーファンクションを返すという形で、実装を
@Guest 02:15
進めています。はいでですね、ま、これま、最初あのpocということで、チャンフィーさんが色々な
@Guest 02:24
こう。まあ、調査をしつつま開発を進めていたっていうことなんですけどもままずこれ
@Guest 02:30
なぜこう普通のつえ、テンプレートコンプ使わないで、テスを今回使ったのかっていうところを
@Guest 02:38
をま。もちろん私たちは知ってるんですけど、まあ、もう少しえっとちゃんフィーさんに聞いてみたいなと思いますど、どうですかね。
@Guest 02:46
これを採用した理由みたいなのは、
@Guest 02:49
まあ、そうですね。あの、ビルでコンポレント書く時って、割とそのシングルファイルコンパントで、テンプレとブロックの中でこう書く場合が結構多いと思うんですけど、
@Guest 02:58
そうなると、やっぱりまタイプスクリットと一緒に合わせて使った場合って、あのプロスでたまにこうレキ型のプロスとかもあると思うんですね。例えば、ま、ボタンの色をボタンの色を指す。
@Guest 03:10
なんか、プライマリーとか、セカンダリとか、そういうものを熱狂型にしたいとします。
@Guest 03:15
で、そうなった時って、あの、今のそのビアとかこのて、エリタ上でのヘルパーとかを使っても、やっぱてプロテンプレートブロックに入った
@Guest 03:24
そのプロスって、あのちゃんとその
@Guest 03:28
レト型のものを全部割り出してこう。座ョしてくれるような機能はついてないんですね。ま、そこをあのtsxを
@Guest 03:37
でを使うことで、ちゃんとそこをあのサゼーションしてくれるようになった。
@Guest 03:44
はいはい
@Guest 03:45
ので、
@Guest 03:45
まあ、それがまあまず大きな理由だったんですね。やっぱ、コンプレットをかけながら、いちいちそれをそれ用のレドリードミを書いたりとか、ストリーブックを全て書いてま。使い方を説明したくはなかったので、ま、それ自体がてプ、あの、
@Guest 03:59
そのリドの代わりになってるって感じですね。タイプスケット自体が
@Guest 04:04
そうですよね、やっぱりそうですよね、tsxのメリット
@Guest 04:10
というか、そのコプロップスのあの方がちゃんと保管できるっていうところが、まあ、まずは理由ですけど、確かにや。
@Guest 04:19
ただ結構それ以外もなんか色々使ってみて。私はあの思ったよりしっくり来たなっていうところでしたね。うん、結構
@Guest 04:30
まあまあでも多分あの、そんなに皆さん経験ないんで、こう単純にやってみたかったっていうところも、
@Guest 04:39
それは否定できないしかしたら、あの
@Guest 04:44
あとやっぱりそうですね。全てあのスクリットの中にこう一貫して、そのそのセットアップをするための行動と、
@Guest 04:52
テンプレートがずらりとこうなんて、一直線で並ぶことになるので、割と行動の見通しが良くなって、まあ、このコンポイントは何をしてるのかっていうのは、
@Guest 05:01
はっきり言うと分かるようになったんじゃないかな、と思いますね。やっぱ、テプレットブロックが上にあって、下にスクエットブロックがあの並べ並んでいる。この構造って、まあ
@Guest 05:11
結構そうなんですね。あの、staとかよく書く人とかだったら、結構慣れてると思うんですけど、割とjavajavaskと書くいって、その順番にちょっと違和感感じてる方多かったんじゃないかなと思いますね。
@Guest 05:22
ああ、そうですね、そうですね、あ、そうです。あと、もう1つあの重要な。今回プロジェクトを前提として結構
@Guest 05:31
あれですよね。その割と、その画面の設計とかは、あのエンジニアによだいぶ酔ってると言いますかね。もう、あの、ほぼその今回はそのcssのフレイマーク
@Guest 05:43
でえ、画面を構成するっていうところだったので、あまりそういうデザイナーの方と協業みたいなのは、今回のプロジェクトではあんまりなかったっていうところも、結構
@Guest 05:53
採用の決め手だったかもしれない
@Guest 05:55
そうですね。やっぱ、テプレートブロックのこう利点ってメリットって、やっぱりデザイナーの方も直接触れるような形
@Guest 06:03
であることが大きかったと思うんですけど。まあ、今回の場合はまエンジニアだけでこうプロットを作ってるので、ま、そのようなところはまあ考慮しなくてもよかったってことですね。
@Guest 06:14
なるほど、なるほど、ありがとうございますではですね、まあ、これをプロジェクトを始めて、大体ま
@Guest 06:24
3ヶ月ぐらいもうちょっとですかね。4、3、4か月ぐらい経っているんですけれども、
@Guest 06:30
まあそれぞれ多分もう大体3人ともこう感触っていうのは掴めてきていて、まあ、感想とかか
@Guest 06:39
それぞれ持ちかなと思うので、ちょっとまそれぞれまざたにな感じで大丈夫です。んで、なんかか思ったことを
@Guest 06:49
言っていただけると嬉しいですけど、どうですか。じゃあ、まずどうしましょうや本さん何かはい、
@Guest 06:58
感想みたいなの
@Guest 07:00
そうそうでありましたら、はいさっきの方の他の話で言うと、あの
@Guest 07:09
カジュアルに小さなコンポーネントを作れるっていうのがまかなり、
@Guest 07:14
個人的には大きかったですね。うん、うん、それで、だいぶ家族性も上がりますし、まあ、実際のコンポーネント、そのセットアップ内で
@Guest 07:24
まほんとにちっさなコンポネントを作るっていう場合もありますし、まあ、そのセットアップのデファイン、コンポーネントの外に出しちゃって、別の
@Guest 07:33
でファインコンポーネントしてま。そこで、もう少しセットアップ内でやるよりは、複雑なコンポネートを作るとか。まいくつか流度はあったと思うんですけど、
@Guest 07:43
ま、こういうあのコンポンネットの分割がカジュアルにできるっていうのは、sfcだと、あんまりファイル分ける感じになっちゃうと思うので、うん
@Guest 07:54
たかなと。だいぶまここが結構個人的には好きでしたね。はい、
@Guest 08:01
そうですね、いいファリコンポーネントみたいないしはもう完全になくなって、そういう
@Guest 08:10
粒道を細かくできるっていう
@Guest 08:12
ところ
@Guest 08:13
は、すごい使いやすかったと思いますね。うん、そうですね、私がまミュー
@Guest 08:22
とかと比べるとやっぱり
@Guest 08:25
うん。1番嬉しかったのは、方がちゃんとつくようになったっていうところですね。まあ、当たり前じゃ当たり前ですけど、ま、ただ。でも
@Guest 08:34
まあ全部そのジェースの上に乗っかってるっていうのは、え、すごいあれですね、こう型が
@Guest 08:42
つくのもありがたいですし、なんかこう
@Guest 08:46
あ、もちろん、そのテンプレートで肩をつけるっていう方法もあるんですけども、そういうのをこう調べるコストみたいなのが
@Guest 08:55
だいぶ減った嬉しさはありますね。まあ、頑張ればできるんでしょうけど、多分そういうこうテセック
@Guest 09:05
の知見を生かせるっていうところは良かったですね。うんま、それに結構ビュース
@Guest 09:14
ちゃんと思ったり、方がついていて、すごい。なんか、こうプロップスの方、そのリクワイヤードちゃんと見てくれたりとか、うん、うん、うん、
@Guest 09:24
なんなんて言うんですかね。こうジェジェニックス自体は提供してるんですけども、結構その
@Guest 09:33
ある。プロパティからこう型を推論するっていうのが思ったより、うまいこと言っていて、うん、結構
@Guest 09:43
割となんなん。結構その体育スクリット自体の進化もつよ。あの、すごいあってすごい
@Guest 09:52
よかたいかい体験としては結構良かったですね。
@Guest 09:56
あんまり片付けをこう意識せずに、そう書いていっても、最終的にはもう全部片付いてるうまいうまい感じ。片付いてる場合が多かったので、確かにあれはすごいいい体験でした。そのスリップっていう
@Guest 10:12
結構、あのレフレフとか、ドットバリューとか忘れがちなので、そういうのを忘れてるのを指してくれると、すごくありがたいですね。うん、
@Guest 10:21
ああ、そうですよね、うん。
@Guest 10:24
逆にそういうレフ型のものと、そうでないものに、そのリアクティブなものとかをちゃんと区分付けて、ちゃんと中の動きを理解する上。でも、
@Guest 10:34
やっぱりそのテンプレートブロックに渡すと、暗黙的にそのバリーをなんか中からおき、あの掘り出してくれって評価してくれるような機能が入ってると思うんですけど。まあ、そこはちゃんと
@Guest 10:44
あの明治的にパリーとかを使うことで、あの、そもそものコンポレーション、APIのこの使い方というか、中の仕組みとかがわかりやすくなったんじゃないかなと思いますね。勉強になりました
@Guest 10:59
逆に言うと、肩がないとちょっと私まだ自信ないですね。なんか、バリそのつけ忘れとか起きそう。
@Guest 11:09
でも、確実になんかパリーついてないと、何かしらたいタイプスクートで怒ってくれて、そこはすごい便利でしたね。
@Guest 11:20
そういったそうですね、まあ、最初すごい
@Guest 11:23
使い始めて、やっぱ果たして、テンプレートブロックでややれてるものが全て、jssもtssも書けるのか。っていうのがすごい心配だったんですけど、
@Guest 11:33
まあ、そうです。今のところ、全てpssで表現はできているっていう感じですよね。
@Guest 11:39
はいはいはい、
@Guest 11:41
ただまあそうですね、結構ディアティブとか、スロットとかは、割とテプレとブロックに比べると、ちょっと記述が冗長にななりがちで、
@Guest 11:50
まあそこはちょっとデメリットなだったんじゃないかなって思います。はいはい、
@Guest 11:57
そうですね、デレクティブま、流スの問題っていうよりは、流通のこう。広報感を保
@Guest 12:06
たが故になんか複雑になってしまったみたいな。うん、うん、まあ、そういうディレクティブまでもディレクティブ、あれはあれで便利。なんで、こううまいことその
@Guest 12:16
なんていうんですかね。こうヘルパーっていうか、まあこう何かこうくるんであげると多分使いやすくなるかなと思うんですよね。ま、
@Guest 12:25
そうですよね、うん、
@Guest 12:30
あと、まあテンプレートブロックではこうよなに勝手にやってくれてたあのクラスのマジとかそういうそこらへんはまあ、1番多分ルート要素の
@Guest 12:40
ルートレメントのこう、クラスのマとかは勝手にやってくれるんですけど、まあ中でこう。今まであの
@Guest 12:48
クラス。あのテプレとプロックで、バインクラスをバイトしてた時に、
@Guest 12:53
結構オブジェクト型とか、ア型とか色々受け付けると思うんですけど。まあ、そこははいちゃんとあの
@Guest 12:59
tssになると、ノーマライズクラスっていうヘルパーファミションを直接インポットしてこそこを直接
@Guest 13:06
あのマジしてあげないといけなかったりとか、まあ、そこは少しなんか冗長になりがちな部分だなって思いました。
@Guest 13:14
あれ、あの、そうですよね、あのビのなんかヘルパー。
@Guest 13:23
あ、そううん、うんうん。シェアードっていう名前、空間に
@Guest 13:30
ノーマライズクラスっていうこれ全然知らなかったんですけど、こういうヘルパーファンクションがあって、これを使うっていう
@Guest 13:39
までも、状況っていう面で言うと、略トとかだと。これだけのために、クラスネームスっていう
@Guest 13:45
品パッケージとかがあったりするんですよ。なんで
@Guest 13:51
うん、
@Guest 13:53
結構や、それは個人的には全然許容。うん、うん、できましたね。なるほど、なんかちゃんと見えるんで、
@Guest 14:02
確かにそうですよね、明治的にやってあげるのが、やっぱりこう開発者は嬉しいって感じね。よし、なにやってくれるよりは。
@Guest 14:11
あと、タイプスクリプト問題で1つ今んとこ問題だと感じているのは、あの
@Guest 14:21
イベント関連のえっと方ですね。例えば、オンクリックとか、オホバーとか、そういう
@Guest 14:31
型型の問題なんですかね。今のところ、そのtsexの
@Guest 14:38
りとtsexを組み合わせた時に、こう方が微妙になってないっていうところがまだ
@Guest 14:47
あったりっていうので、そのオンクリックの例が。1番顕著だったんですけど、も、
@Guest 14:57
なんなんて言えばいいですかね。すごい言葉で興文を説明するのは、めちゃくちゃクリック
@Guest 15:03
リスクっていう、うん、プロパティを持ったオブジェクトをスプレットで展開する感じってことですよね。
@Guest 15:10
にはいはいう風に書かないといけなかったっていうこと。
@Guest 15:13
ま、そうすることで、一応型チェックはスキップできるって感じですよね。実際は型はチェックされてないので、
@Guest 15:20
まあ、それか、もう明治的にオンクリックっていうプロプロップを追加して
@Guest 15:25
で、タイプはファクションにしてみたいなっていう。なんか、ワカランドもあったと思います。
@Guest 15:32
そうですね、
@Guest 15:33
まあ、ちょっと気持ち悪いですよね、気持ち悪いです。
@Guest 15:35
うん、確かにバックランドで言うと、あと、
@Guest 15:41
結構そのtsx自体がそのリアクト前提になってるっていうのが、その方あのたたい方は大丈夫なんですけど、そのエディタ側がそういう
@Guest 15:52
vsコードがなんかその勝手になんかくらくらす。
@Guest 15:58
クラスと、あの、そのテリアクト上でのティセックスだと、クラスクラスネームっていう名前でつけないといけないけど、
@Guest 16:06
えビだと、普通に暮らすっていう名前が使えるんですよ。でま、それを明治的に確かなんか肩を
@Guest 16:17
指定してあげていた記憶がありますね。
@Guest 16:20
そこをなんかやっぱノードモジューズに、そのジェリアクトのjsxを使う使うプロジェクトと、あと、私たちのもうビーjsのビの
@Guest 16:33
使ってるプロジェクトが混ざってると、やっぱどっちのタイプ見に行けばいいのって、なんかあのエリタが混乱する場合がありましたよね。ストリム君がちょうど
@Guest 16:42
それに当てはまってで、いくらビューのコンポントジェイスをエを書いても、それがなんかリアクトのものかのように認識されて、で、クラスじゃなくて、クラスネームだろって怒られたりとかしてましたね。
@Guest 16:56
はいはい、そうですよね、なんか、ライブやりの方のをこうま、たまにそういう上書きをしてあげないといけない
@Guest 17:06
っていうところですね。そうですね、あと、私の感想で言うと
@Guest 17:16
結構そうですね。あの割とそのtxっていうことなんで、どうしてもリアクトと最初は比較していまして、まあ、結構
@Guest 17:26
わざわざそのtxを使う理由っていうのが最初はわからなかったんですよね。あの、なんか、
@Guest 17:32
流のあの利点みたいなのは、その例えば、そういうリレクティブとか、スロットとか、そういう利点をが使えなくなるんじゃないかと。は
@Guest 17:41
最初思ってたんですけど、まとはいえ、あのビューでのtxっていうのは、使い心地がちょっと違うなと
@Guest 17:51
持ってました。これ、あの、どちらも知ってる前提の話になっちゃうんですけども、その牛のセットアップ
@Guest 17:59
ていう関数が、そのほんとにセットアップなんで、ヤクトみたいに、まあ、あの、その値が更新
@Guest 18:08
されるたびに、その関数が実行されるみたいな。そういう結構極端な実装ではなくて、ちゃんとセットアップは1回しか実行されないみたいなっていうところがあって、
@Guest 18:19
まあ、割とそういうなんかこう間違いみたいなのは置きにくそうだなというような方は思いましたね。結構そういう
@Guest 18:28
ディレクティブとかも結局使えるっていうことが分かったんで、ま、そんなに理由のあの利点みたいなのはそこじゃないかなと思います。
@Guest 18:37
で、あの1つあったのがコンポリントを返す関数みたいなのを、あの
@Guest 18:44
以前書いた時に、なんかこう。何回目のこう関数かっていうのを間違えると、例えばその
@Guest 18:51
そのbtxに関数を埋め込んでしまって、なんかこうすごい。あの関数をただ、あのストリング化したやつがバーって
@Guest 19:00
行きたいなっていう
@Guest 19:01
感想の中身がわって出てくるみたいな、そう、そういう失敗とかは、まあ、ちょっとコ柄があるけど、っていうところが
@Guest 19:10
っていう感じですかね。あれ、見た目は面白いんですよね、
@Guest 19:16
で、そうですね、ま、なんでそういう失敗しやすさみたいなのはあのま、どちらも一応一旦あ、
@Guest 19:25
だけど、まあ、理由だとそういうデメリットがあり、つつもまリアクトだと、やっぱりそういう。まあ、
@Guest 19:34
レプスの列挙はやっぱりなかなか難しい、難しいっていうか、その間違いやすい
@Guest 19:42
のかなっていうところがあってま。そういうのは、回避できるっていうところは、まビの利点かなと思います。
@Guest 19:51
でも、もうちょっとそうですね、なんか、あのたいタイプスクリプト、太陽を
@Guest 19:58
やっぱりもっとこう自然な感じで使えると、個人的にはありがたい。
@Guest 20:04
やっぱり、オンクリックの問題とか、そこらへんとかですかね。まま、それ以外はそんなに結構
@Guest 20:14
意外とすんなりかけて、結構体験よかったなっていうのが私の感想です。そうですね、他
@Guest 20:23
なんかあったりしますか。
@Guest 20:25
まあ、1つだけまた課題だなって思ったのが1つあって、あの、
@Guest 20:31
まあ、私たちあのこ書いたコンパレントのテストとかもこう書いてたんですけど、あのビューテストイティールが、
@Guest 20:39
あのドットtsxに書いたコンポネントをちゃんとか、マウントがマウントする時の方方がちょっと。はい、
@Guest 20:47
多分不完全なんでしょうね。で、ドットビューの中のタイプスケートブロックに書くと、ちゃんとワトワトの本書書けるんですけど、
@Guest 20:58
あのtsxで書くと、それがうまく動かなかったです
@Guest 21:04
なので、そうそうですね、なので、ポートでポートする前提のコンポイントしか書けなくて。そうですよね、あの、sfcだとなので、せっかくts
@Guest 21:14
xを書くのに、実際はドッドビーのファイルの中にこのコンプレットを書いてるっていうのは、今ちょっとモヤモヤですかね。ここは
@Guest 21:23
ですね、
@Guest 21:25
確かにそれはありましたね、なんかもうそれそういうもんだと今思い込んでたんですけど、確かに
@Guest 21:33
そう。スクリプトタグのあのラングにtsxって書くと、まそのtxが使えるでま、それをこう
@Guest 21:43
ドットビューファイルの中に、そのスクリプト、最後1つだけを置くみたいな感じになってますね。
@Guest 21:48
そうですね、まあ、一応テストファイルの方で、そこをあの保管。
@Guest 21:53
あの、あのカチェックしないように外すことはできるんですけど、そうすると、まテストファイルでこうカボカが使えるっていう。ちょっとメリットがなくなってしまうので、
@Guest 22:03
やばい、ちょっと迷った挙句を今そのようなニヤニヤしてます。
@Guest 22:09
ただ、まあ、やっぱお1つのコンパイントの中で、複数のちっちゃいコンパイトとかをエスポートしたりとか、結構
@Guest 22:16
のあの何て言うんすかね。tsで書き出すメリットの方が大きいと思うんで、そこはまあ、早くちょっとビーテストテルの方で、
@Guest 22:25
アップデートされてほしいなっていう感想です。
@Guest 22:32
あと、まあ割とどうでもいいんですけど、あの、sfcで普通に書いてる別のプロジェクトと並行して、開発をしてると、
@Guest 22:40
地味にコンテキスト、スイッチのコストがあるなっていうのがあって、うんぞところをなんてすか。波かっこでくるのか、
@Guest 22:49
ダブルコートでくるのかとか
@Guest 22:53
するところをあのマスターシュ。あの、ななか2重で書くのかとか、そういうのがあるなって、ややこしくなるっていうのは、なんか
@Guest 23:02
ふんふん。
@Guest 23:04
確かにべ別プロジェクトでテンプレート書いてると、そうなんすよねこがこんがらがりそう。
@Guest 23:12
いや、それは大変そうですね。
@Guest 23:15
プロジェクトだと、まだ全然fsfcの方が多いと思うので、こからがりがちです。
@Guest 23:22
じゃあ、次の話題で行きたいと思います。
@Guest 23:26
こんな感じで、こうまtセックスを採用し、たまろんな感想を皆さんお持ちかなと思うんですけれども、まずばり、これは
@Guest 23:36
どどうですかね。広まっていきそうですかね、なんか、そういうtsxあえて、セフシを使わない
@Guest 23:44
選択肢っていうのは、結構個人的には並列して、あのいきそうですよね。なんか、
@Guest 23:53
もちろん、そういうテンプレートをあのエンジニアじゃない人がかけるっていうメリットはすごいおっきいので、
@Guest 24:00
なんかこう。肩が重要でないところは、そういうところで。
@Guest 24:05
そういうま結構コアなところとか、そういう抽象的なところはっていうところ、あのは使い分けっていう感じで、
@Guest 24:15
ま、そもそも同じプロジェクトの中で、どちらも自由に使えますもんね。なんで、
@Guest 24:22
今私たちがやってるプロジェクトも、まあ、もしかしたらこのsfcが入るかも。あ、
@Guest 24:28
混在ってことですね。うん、
@Guest 24:31
そうですよね、どうですかね、使い心地的に今後広まってほしい。
@Guest 24:36
私は今、別のプロジェクトでも、あの定説って書くのを試してこう。実践してるんですけど、まあ、個人的には
@Guest 24:45
まあ、もうちょっとその型の部分の方のちょっともうちょっと向上して、
@Guest 24:50
あの広まってほしいなっていう印象ではあります。あと、まあ結局ま最初思ったのはこのリアト書いてたいとこのテ
@Guest 24:59
同じテセスだったら、まあ、ビの方も自由にこうかけるようになるんじゃない。と思ったんですけど、まあ、そこはちょっとだけ。あの、テストが違うので、やっぱり
@Guest 25:09
そうやって書いてた人がすぐに切り替えできるっていうわけでもなかったんですけど、まあ、それでもやっぱり最初のtセスを学ぶっていう
@Guest 25:18
コストさえ、最初乗り越えれば、まあ、あとはやっぱ行動は読めるようになるんですよね。あのビーの行動もリアクトの行動も
@Guest 25:26
で、それでその流通通じゃないよ。あの、
@Guest 25:32
あのsfcを書いてた時に比べると、やっぱりそこの2つの
@Guest 25:37
あのフレーマークの間の違いはちょっと少しはうまま埋まってると思うので。あと、せっかく
@Guest 25:43
コンポションAPIとかを使ってるので、やっぱりそこそういう意味でも、やっぱり差はちょっと縮まってると思うので、まあ、両方使ってみるといいんじゃないかなと思います。
@Guest 25:54
確かになんかあの、そういう観点。あの、なんていうか、そのリアクト、今までやってた人がプロジェクトに参加しやすいみたいな。そういう目線は確かにうんま違いはあるんですけど、
@Guest 26:05
全然そんなにあの違和感ない程度なんで、そっか。確かにそういう面で見ると、
@Guest 26:14
採用するメリットで十分ありますね。
@Guest 26:17
やっぱ、コンポレーションaiがこうちゃんと採用しされてからこそ、
@Guest 26:22
このベッドで出てきてるんじゃないかなと思っていて、やっぱ書き方がすごいリアクトに近くなったんですよね。sf2ってうん、こう合わせることで
@Guest 26:31
そうですよね、うん
@Guest 26:33
ま、個人的にもそうですね、私も同じで、あのまあ改善の余地というか、もうちょっと良くなってほしいところは、ところどころあるものの概ね。
@Guest 26:43
だいぶかき味はすごく良かったので、まあ使っていきたいし、普及もまある程度してほしいなという感想です。
@Guest 26:51
私もすごい思ったより、だいぶか地は良かった
@Guest 26:57
です。結構
@Guest 27:00
なんか、リアクトと比較しても、全然そういうところはじゃ満足いく感じだったっていうところですね。
@Guest 27:09
うん、あとまあ何より一部だけこう。テセスに書き換えるってことも、きっと可能容易にできるはずなので、
@Guest 27:18
やっぱりそこはそういう意味でも、既存のプロプロジェクトを書き換えるっていうのを試してもいいかもしれないですね。
@Guest 27:25
はいはいはい、そうですよね、これま流通のそのあの
@Guest 27:32
で使えるかっていうのはまではちょっと。まだ私たち試してないんですけど、多分
@Guest 27:37
あのデスだったら、もう容易にそういうこう段階的な採用とかもできますし、ちょっとずつこう。あの
@Guest 27:47
まこう全員でがこうチーム全員で学習しながら行こうとかもすごいやりやすそうですね。
@Guest 27:54
やっぱ何よりそのプロスの保管機能がすごく便利なので、やっぱり私はまたまた別のプロジェクトがあったら、ぜひtssまた使いたいなと思ってます。
@Guest 28:04
ですね、
@Guest 28:05
もう
@Guest 28:13
よかった、よかったこれこれで誰。誰かつか使いたくないとかあったらどうしましたけど、よかった。
@Guest 28:28
はいでは、今回はえービスとtsxを使っていった話について、え、やっていきました。
@Guest 28:35
LINEのフラントエンド組織uytでは、このような技術的なキャッチアップを日々行っております。
@Guest 28:41
UITサイト以外にも、毎週社内勉強会で、え、このようなフロントエの情報交換を行っています。
@Guest 28:47
今後もUITサイトを通して、このような情報をえが、外部に発信していけたらと思います。
@Guest 28:54
最後に、LINE株式会社ではえ、採用をえ、大募集しています。このポトキャストを聞いて、何に興味を持たれましたら、そのと1番下にある求人ページから是非アクセスしてください。
@Guest 29:06
それでは、チャンフィーさん、山本さん、ありがとうございました、ありがとうございました。
